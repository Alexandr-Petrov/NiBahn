
Nibahn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00001798  0000182c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  00800100  00800100  0000182c  2**0
                  ALLOC
  3 .stab         00001b0c  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001385  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000046bd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000046d0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  0000470c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00004e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000055a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000055be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_17>
      48:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__vector_18>
      4c:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_19>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	32 2e       	mov	r3, r18
      8e:	31 31       	cpi	r19, 0x11	; 17
	...

00000091 <bot_lib_revision>:
	...

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e8 e9       	ldi	r30, 0x98	; 152
      a6:	f7 e1       	ldi	r31, 0x17	; 23
      a8:	00 e0       	ldi	r16, 0x00	; 0
      aa:	0b bf       	out	0x3b, r16	; 59
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
      ae:	07 90       	elpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a0 30       	cpi	r26, 0x00	; 0
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a9 3e       	cpi	r26, 0xE9	; 233
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
      cc:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <main>:
 * @brief
 * Main function of the Nibahn.c file.
 * Does the main calculations and controls the behavior of Nibo
 */

int main(){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	2f 97       	sbiw	r28, 0x0f	; 15
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	f8 94       	cli
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	0f be       	out	0x3f, r0	; 63
      e6:	cd bf       	out	0x3d, r28	; 61

	/// initialize the LEDs
	leds_init();
      e8:	0e 94 8d 09 	call	0x131a	; 0x131a <leds_init>

    /// initialize the robot
    bot_init();
      ec:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <bot_init>

    /// initialize spi-port
    spi_init();
      f0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_init>

    /// initialize the floor sensors
	floor_init();
      f4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <floor_init>

    /// declare and initialize a variable for storing received bytes
    uint8_t x=0;
      f8:	1c 86       	std	Y+12, r1	; 0x0c

    /// initialize xBee Module
    xBee_init();
      fa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <xBee_init>

    /// for saving the values gotten from the sensors
    unsigned int current_floorL = 0, current_floorR = 0;
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	19 82       	std	Y+1, r1	; 0x01
     102:	1c 82       	std	Y+4, r1	; 0x04
     104:	1b 82       	std	Y+3, r1	; 0x03
    /// for saving the current Speed value and setting the reelection_delay
    short Speed = 0, reelection_delay = 2000;
     106:	1e 82       	std	Y+6, r1	; 0x06
     108:	1d 82       	std	Y+5, r1	; 0x05
     10a:	80 ed       	ldi	r24, 0xD0	; 208
     10c:	97 e0       	ldi	r25, 0x07	; 7
     10e:	9e 87       	std	Y+14, r25	; 0x0e
     110:	8d 87       	std	Y+13, r24	; 0x0d
    /// for saving the flag values
	short flag_id_established = 0, ignore_line = 0;
     112:	18 86       	std	Y+8, r1	; 0x08
     114:	1f 82       	std	Y+7, r1	; 0x07
     116:	1a 86       	std	Y+10, r1	; 0x0a
     118:	19 86       	std	Y+9, r1	; 0x09
	/// for saving the ID of the Nibo and maximum number of Nibos in the chain
	u8_t ownId = 0b01, maxnibos = 0b11;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	8b 87       	std	Y+11, r24	; 0x0b
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	8f 87       	std	Y+15, r24	; 0x0f
	delay(10000);
     122:	80 e1       	ldi	r24, 0x10	; 16
     124:	97 e2       	ldi	r25, 0x27	; 39
     126:	0e 94 19 04 	call	0x832	; 0x832 <delay>

    /// Operation loop
    while (1) {

    	/// if Nibo is the master
    	if ((int)ownId == 1)
     12a:	8b 85       	ldd	r24, Y+11	; 0x0b
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	49 f4       	brne	.+18     	; 0x142 <main+0x6e>
			{
    			/// Sets the front LEDs Orange
				leds_set_status(LEDS_ORANGE, 4);
     130:	64 e0       	ldi	r22, 0x04	; 4
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
				leds_set_status(LEDS_ORANGE, 5);
     138:	65 e0       	ldi	r22, 0x05	; 5
     13a:	83 e0       	ldi	r24, 0x03	; 3
     13c:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
     140:	14 c0       	rjmp	.+40     	; 0x16a <main+0x96>
			}
    	/// if Nibo is not participating in the chain
    	else if((int)ownId == 0)
     142:	8b 85       	ldd	r24, Y+11	; 0x0b
     144:	88 23       	and	r24, r24
     146:	49 f4       	brne	.+18     	; 0x15a <main+0x86>
			{
    		/// Sets the front LEDs Red
				leds_set_status(LEDS_RED, 4);
     148:	64 e0       	ldi	r22, 0x04	; 4
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
				leds_set_status(LEDS_RED, 5);
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
     158:	08 c0       	rjmp	.+16     	; 0x16a <main+0x96>
			}
    	/// if Nibo is not a master
    	else
			{
    			/// Sets the front LEDs Red
				leds_set_status(LEDS_GREEN, 4);
     15a:	64 e0       	ldi	r22, 0x04	; 4
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
				leds_set_status(LEDS_GREEN, 5);
     162:	65 e0       	ldi	r22, 0x05	; 5
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 95 09 	call	0x132a	; 0x132a <leds_set_status>
			}
    	/// if send buffer is not full and the ID of this Nibo was not established yet
    	if(xBee_readyToSend() && flag_id_established == 0)
     16a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xBee_readyToSend>
     16e:	88 23       	and	r24, r24
     170:	89 f0       	breq	.+34     	; 0x194 <main+0xc0>
     172:	8f 81       	ldd	r24, Y+7	; 0x07
     174:	98 85       	ldd	r25, Y+8	; 0x08
     176:	89 2b       	or	r24, r25
     178:	69 f4       	brne	.+26     	; 0x194 <main+0xc0>
			{
    			/// sets the flag of ID to established
				flag_id_established = 1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	98 87       	std	Y+8, r25	; 0x08
     180:	8f 83       	std	Y+7, r24	; 0x07
				/// forms the byte to claim the ID
				x = buildSendData(ownId, ownId, 0b1000);
     182:	48 e0       	ldi	r20, 0x08	; 8
     184:	6b 85       	ldd	r22, Y+11	; 0x0b
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	0e 94 2f 03 	call	0x65e	; 0x65e <buildSendData>
     18c:	8c 87       	std	Y+12, r24	; 0x0c
				/// sends the formed byte
				xBee_sendByte(x);
     18e:	8c 85       	ldd	r24, Y+12	; 0x0c
     190:	0e 94 e6 03 	call	0x7cc	; 0x7cc <xBee_sendByte>
			}
        /// if the receive buffer is not empty
        if (xBee_receivedData())
     194:	0e 94 02 04 	call	0x804	; 0x804 <xBee_receivedData>
     198:	88 23       	and	r24, r24
     19a:	09 f4       	brne	.+2      	; 0x19e <main+0xca>
     19c:	17 c1       	rjmp	.+558    	; 0x3cc <main+0x2f8>
        {
            /// -> get next received data byte of the buffer
            x = xBee_readByte();
     19e:	0e 94 10 04 	call	0x820	; 0x820 <xBee_readByte>
     1a2:	8c 87       	std	Y+12, r24	; 0x0c

            /// if it's a broadcast and not with the command from the second set or if it's sent to the ID of this Nibo
            if(((sendDataGetReciver(x) == 0b00) && (sendDataGetFunctionSet(x) != 0b01)) || (sendDataGetReciver(x) == ownId))
     1a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     1a6:	0e 94 55 03 	call	0x6aa	; 0x6aa <sendDataGetReciver>
     1aa:	88 23       	and	r24, r24
     1ac:	29 f4       	brne	.+10     	; 0x1b8 <main+0xe4>
     1ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     1b0:	0e 94 89 03 	call	0x712	; 0x712 <sendDataGetFunctionSet>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	41 f4       	brne	.+16     	; 0x1c8 <main+0xf4>
     1b8:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ba:	0e 94 55 03 	call	0x6aa	; 0x6aa <sendDataGetReciver>
     1be:	98 2f       	mov	r25, r24
     1c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c2:	98 17       	cp	r25, r24
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <main+0xf4>
     1c6:	02 c1       	rjmp	.+516    	; 0x3cc <main+0x2f8>
            	{
            		/// if it's sent from PC, Master or from the Nibo with the ID of this Nibo
					if((sendDataGetSender(x) == 0b00) || (sendDataGetReciver(x) == ownId) || (sendDataGetSender(x) == 0b01))
     1c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ca:	0e 94 66 03 	call	0x6cc	; 0x6cc <sendDataGetSender>
     1ce:	88 23       	and	r24, r24
     1d0:	69 f0       	breq	.+26     	; 0x1ec <main+0x118>
     1d2:	8c 85       	ldd	r24, Y+12	; 0x0c
     1d4:	0e 94 55 03 	call	0x6aa	; 0x6aa <sendDataGetReciver>
     1d8:	98 2f       	mov	r25, r24
     1da:	8b 85       	ldd	r24, Y+11	; 0x0b
     1dc:	98 17       	cp	r25, r24
     1de:	31 f0       	breq	.+12     	; 0x1ec <main+0x118>
     1e0:	8c 85       	ldd	r24, Y+12	; 0x0c
     1e2:	0e 94 66 03 	call	0x6cc	; 0x6cc <sendDataGetSender>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	09 f0       	breq	.+2      	; 0x1ec <main+0x118>
     1ea:	f0 c0       	rjmp	.+480    	; 0x3cc <main+0x2f8>
						{
							/// if received byte has 00 in the commands set section and nibo participates in the chain
							/// commands set 1
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
     1ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     1ee:	0e 94 89 03 	call	0x712	; 0x712 <sendDataGetFunctionSet>
     1f2:	88 23       	and	r24, r24
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <main+0x124>
     1f6:	43 c0       	rjmp	.+134    	; 0x27e <main+0x1aa>
     1f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fa:	88 23       	and	r24, r24
     1fc:	09 f4       	brne	.+2      	; 0x200 <main+0x12c>
     1fe:	3f c0       	rjmp	.+126    	; 0x27e <main+0x1aa>
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
     200:	1a 86       	std	Y+10, r1	; 0x0a
     202:	19 86       	std	Y+9, r1	; 0x09
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     204:	8c 85       	ldd	r24, Y+12	; 0x0c
     206:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     20a:	88 23       	and	r24, r24
     20c:	39 f4       	brne	.+14     	; 0x21c <main+0x148>
										{
											/// speed of the Nibo will be increased
											Speed = Speedup(Speed);
     20e:	8d 81       	ldd	r24, Y+5	; 0x05
     210:	9e 81       	ldd	r25, Y+6	; 0x06
     212:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Speedup>
     216:	9e 83       	std	Y+6, r25	; 0x06
     218:	8d 83       	std	Y+5, r24	; 0x05
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     21a:	d7 c0       	rjmp	.+430    	; 0x3ca <main+0x2f6>
										{
											/// speed of the Nibo will be increased
											Speed = Speedup(Speed);
										}
									/// if received byte has 01 in the commands section
									else if (sendDataGetFunction(x) == 0b01)
     21c:	8c 85       	ldd	r24, Y+12	; 0x0c
     21e:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	39 f4       	brne	.+14     	; 0x234 <main+0x160>
										{
											/// speed of the Nibo will be decreased
											Speed = Slowdown(Speed);
     226:	8d 81       	ldd	r24, Y+5	; 0x05
     228:	9e 81       	ldd	r25, Y+6	; 0x06
     22a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Slowdown>
     22e:	9e 83       	std	Y+6, r25	; 0x06
     230:	8d 83       	std	Y+5, r24	; 0x05
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     232:	cb c0       	rjmp	.+406    	; 0x3ca <main+0x2f6>
										{
											/// speed of the Nibo will be decreased
											Speed = Slowdown(Speed);
										}
									/// if received byte has 10 in the commands section
									else if  (sendDataGetFunction(x) == 0b10)
     234:	8c 85       	ldd	r24, Y+12	; 0x0c
     236:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     23a:	82 30       	cpi	r24, 0x02	; 2
     23c:	69 f4       	brne	.+26     	; 0x258 <main+0x184>
										{
											/// setting the flag to 0 to mark that ID is not established
											flag_id_established = 0;
     23e:	18 86       	std	Y+8, r1	; 0x08
     240:	1f 82       	std	Y+7, r1	; 0x07
											/// Nibo will turn 180 degrees left
											Directionchange_left();
     242:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Directionchange_left>
											/// Nibo will enter the reelection mode and get the starting ID (1) later, to participate in the reelection
											ownId = Reelection_turn(ownId,reelection_delay,maxnibos);
     246:	8d 85       	ldd	r24, Y+13	; 0x0d
     248:	9e 85       	ldd	r25, Y+14	; 0x0e
     24a:	4f 85       	ldd	r20, Y+15	; 0x0f
     24c:	bc 01       	movw	r22, r24
     24e:	8b 85       	ldd	r24, Y+11	; 0x0b
     250:	0e 94 b5 02 	call	0x56a	; 0x56a <Reelection_turn>
     254:	8b 87       	std	Y+11, r24	; 0x0b
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     256:	b9 c0       	rjmp	.+370    	; 0x3ca <main+0x2f6>
											Directionchange_left();
											/// Nibo will enter the reelection mode and get the starting ID (1) later, to participate in the reelection
											ownId = Reelection_turn(ownId,reelection_delay,maxnibos);
										}
									/// if received byte has 11 in the commands section
									else if (sendDataGetFunction(x) == 0b11)
     258:	8c 85       	ldd	r24, Y+12	; 0x0c
     25a:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     25e:	83 30       	cpi	r24, 0x03	; 3
     260:	09 f0       	breq	.+2      	; 0x264 <main+0x190>
     262:	b3 c0       	rjmp	.+358    	; 0x3ca <main+0x2f6>
										{
											/// setting the flag to 0 to mark that ID is not established
											flag_id_established = 0;
     264:	18 86       	std	Y+8, r1	; 0x08
     266:	1f 82       	std	Y+7, r1	; 0x07
											/// Nibo will turn 180 degrees right
											Directionchange_right();
     268:	0e 94 df 02 	call	0x5be	; 0x5be <Directionchange_right>
											/// Nibo will will enter the reelection mode and get the starting ID (1) later, to participate in the reelection
											ownId = Reelection_turn(ownId,reelection_delay,maxnibos);
     26c:	8d 85       	ldd	r24, Y+13	; 0x0d
     26e:	9e 85       	ldd	r25, Y+14	; 0x0e
     270:	4f 85       	ldd	r20, Y+15	; 0x0f
     272:	bc 01       	movw	r22, r24
     274:	8b 85       	ldd	r24, Y+11	; 0x0b
     276:	0e 94 b5 02 	call	0x56a	; 0x56a <Reelection_turn>
     27a:	8b 87       	std	Y+11, r24	; 0x0b
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     27c:	a6 c0       	rjmp	.+332    	; 0x3ca <main+0x2f6>
											ownId = Reelection_turn(ownId,reelection_delay,maxnibos);
										}
								}
							/// if received byte has 01 in the commands set section
							/// commands Set 2
							else if(sendDataGetFunctionSet(x) == 0b01)
     27e:	8c 85       	ldd	r24, Y+12	; 0x0c
     280:	0e 94 89 03 	call	0x712	; 0x712 <sendDataGetFunctionSet>
     284:	81 30       	cpi	r24, 0x01	; 1
     286:	69 f5       	brne	.+90     	; 0x2e2 <main+0x20e>
								{
									/// line will be ignored if nibo gets anything from this set of commands
									ignore_line = 1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	9a 87       	std	Y+10, r25	; 0x0a
     28e:	89 87       	std	Y+9, r24	; 0x09
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     290:	8c 85       	ldd	r24, Y+12	; 0x0c
     292:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     296:	88 23       	and	r24, r24
     298:	39 f4       	brne	.+14     	; 0x2a8 <main+0x1d4>
										{
											/// Speed of the Nibo will be increased
											Speed = Speedup(Speed);
     29a:	8d 81       	ldd	r24, Y+5	; 0x05
     29c:	9e 81       	ldd	r25, Y+6	; 0x06
     29e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Speedup>
     2a2:	9e 83       	std	Y+6, r25	; 0x06
     2a4:	8d 83       	std	Y+5, r24	; 0x05
     2a6:	92 c0       	rjmp	.+292    	; 0x3cc <main+0x2f8>
										}
									/// if received byte has 01 in the commands section
									else if (sendDataGetFunction(x) == 0b01)
     2a8:	8c 85       	ldd	r24, Y+12	; 0x0c
     2aa:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	39 f4       	brne	.+14     	; 0x2c0 <main+0x1ec>
										{
											/// Speed of the Nibo will be decreased
											Speed = Slowdown(Speed);
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	9e 81       	ldd	r25, Y+6	; 0x06
     2b6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Slowdown>
     2ba:	9e 83       	std	Y+6, r25	; 0x06
     2bc:	8d 83       	std	Y+5, r24	; 0x05
     2be:	86 c0       	rjmp	.+268    	; 0x3cc <main+0x2f8>
										}
									/// if received byte has 10 in the commands section
									else if  (sendDataGetFunction(x) == 0b10)
     2c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c2:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	19 f4       	brne	.+6      	; 0x2d0 <main+0x1fc>
										{
											/// Nibo will turn 90 degrees left
											Turn_left();
     2ca:	0e 94 07 03 	call	0x60e	; 0x60e <Turn_left>
     2ce:	7e c0       	rjmp	.+252    	; 0x3cc <main+0x2f8>
										}
									/// if received byte has 11 in the commands section
									else if (sendDataGetFunction(x) == 0b11)
     2d0:	8c 85       	ldd	r24, Y+12	; 0x0c
     2d2:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x208>
     2da:	78 c0       	rjmp	.+240    	; 0x3cc <main+0x2f8>
										{
											/// Nibo will turn 90 degrees right
											Turn_right();
     2dc:	0e 94 1b 03 	call	0x636	; 0x636 <Turn_right>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <main+0x2f8>
										}
								}
							/// if received byte has 10 in the commands set section
							/// commands set 3
							 else if(sendDataGetFunctionSet(x) == 0b10)
     2e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e4:	0e 94 89 03 	call	0x712	; 0x712 <sendDataGetFunctionSet>
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	09 f0       	breq	.+2      	; 0x2ee <main+0x21a>
     2ec:	4a c0       	rjmp	.+148    	; 0x382 <main+0x2ae>
								{
								 	/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     2ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     2f0:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     2f4:	88 23       	and	r24, r24
     2f6:	79 f4       	brne	.+30     	; 0x316 <main+0x242>
										{
											/// if send buffer is not full
											if(xBee_readyToSend())
     2f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xBee_readyToSend>
     2fc:	88 23       	and	r24, r24
     2fe:	09 f4       	brne	.+2      	; 0x302 <main+0x22e>
     300:	65 c0       	rjmp	.+202    	; 0x3cc <main+0x2f8>
											{
												/// the byte to force other Nibo to select another ID is formed
												x = buildSendData(ownId, ownId, 0b1001);
     302:	49 e0       	ldi	r20, 0x09	; 9
     304:	6b 85       	ldd	r22, Y+11	; 0x0b
     306:	8b 85       	ldd	r24, Y+11	; 0x0b
     308:	0e 94 2f 03 	call	0x65e	; 0x65e <buildSendData>
     30c:	8c 87       	std	Y+12, r24	; 0x0c
												/// byte sent
												xBee_sendByte(x);
     30e:	8c 85       	ldd	r24, Y+12	; 0x0c
     310:	0e 94 e6 03 	call	0x7cc	; 0x7cc <xBee_sendByte>
     314:	5b c0       	rjmp	.+182    	; 0x3cc <main+0x2f8>
											}
										}
								 	/// if received byte has 01 in the commands section
									/// this will be true only if some other Nibo claimed current ID of this Nibo before
									else if (sendDataGetFunction(x) == 0b01 && sendDataGetSender(x) == ownId)
     316:	8c 85       	ldd	r24, Y+12	; 0x0c
     318:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	69 f4       	brne	.+26     	; 0x33a <main+0x266>
     320:	8c 85       	ldd	r24, Y+12	; 0x0c
     322:	0e 94 66 03 	call	0x6cc	; 0x6cc <sendDataGetSender>
     326:	98 2f       	mov	r25, r24
     328:	8b 85       	ldd	r24, Y+11	; 0x0b
     32a:	98 17       	cp	r25, r24
     32c:	31 f4       	brne	.+12     	; 0x33a <main+0x266>
										{
											/// increment own ID
											ownId = ownId+1;
     32e:	8b 85       	ldd	r24, Y+11	; 0x0b
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	8b 87       	std	Y+11, r24	; 0x0b
											/// setting the flag to 0 to mark that ID is not established
											flag_id_established = 0;
     334:	18 86       	std	Y+8, r1	; 0x08
     336:	1f 82       	std	Y+7, r1	; 0x07
     338:	49 c0       	rjmp	.+146    	; 0x3cc <main+0x2f8>
										}
								 	/// if received byte has 10 in the commands section
									else if (sendDataGetFunction(x) == 0b10)
     33a:	8c 85       	ldd	r24, Y+12	; 0x0c
     33c:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	59 f4       	brne	.+22     	; 0x35a <main+0x286>
										{
											/// will start the forced reelection process
											ownId = Reelection_forced(ownId,reelection_delay,maxnibos);
     344:	8d 85       	ldd	r24, Y+13	; 0x0d
     346:	9e 85       	ldd	r25, Y+14	; 0x0e
     348:	4f 85       	ldd	r20, Y+15	; 0x0f
     34a:	bc 01       	movw	r22, r24
     34c:	8b 85       	ldd	r24, Y+11	; 0x0b
     34e:	0e 94 8b 02 	call	0x516	; 0x516 <Reelection_forced>
     352:	8b 87       	std	Y+11, r24	; 0x0b
											/// setting the flag to 0 to mark that ID is not established
											flag_id_established = 0;
     354:	18 86       	std	Y+8, r1	; 0x08
     356:	1f 82       	std	Y+7, r1	; 0x07
     358:	39 c0       	rjmp	.+114    	; 0x3cc <main+0x2f8>
										}
								 	/// if received byte has 11 in the commands section
									else if (sendDataGetFunction(x) == 0b11)
     35a:	8c 85       	ldd	r24, Y+12	; 0x0c
     35c:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	a1 f5       	brne	.+104    	; 0x3cc <main+0x2f8>
										{
										/// if send buffer is not full
										if(xBee_readyToSend())
     364:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xBee_readyToSend>
     368:	88 23       	and	r24, r24
     36a:	09 f0       	breq	.+2      	; 0x36e <main+0x29a>
											/// set the ID of the Nibo 00 effectively switching it off from the chain
											ownId = 0b00;
     36c:	1b 86       	std	Y+11, r1	; 0x0b
											{
												/// forms the byte that will start reelection through the broadcast
												x = buildSendData(0b00, ownId, 0b1010);
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	6b 85       	ldd	r22, Y+11	; 0x0b
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 2f 03 	call	0x65e	; 0x65e <buildSendData>
     378:	8c 87       	std	Y+12, r24	; 0x0c
												/// send the formed byte
												xBee_sendByte(x);
     37a:	8c 85       	ldd	r24, Y+12	; 0x0c
     37c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <xBee_sendByte>
     380:	25 c0       	rjmp	.+74     	; 0x3cc <main+0x2f8>
											}
										}
								}
							/// if received byte has 11 in the commands set section
							/// commands set 4
							 else if(sendDataGetFunctionSet(x) == 0b11)
     382:	8c 85       	ldd	r24, Y+12	; 0x0c
     384:	0e 94 89 03 	call	0x712	; 0x712 <sendDataGetFunctionSet>
     388:	83 30       	cpi	r24, 0x03	; 3
     38a:	01 f5       	brne	.+64     	; 0x3cc <main+0x2f8>
							 	 {
								 /// If received byte has 00 in the commands section and ID of the sender Nibo is lower than of this Nibo
								 if (sendDataGetFunction(x) == 0b00 && sendDataGetSender(x) < ownId && current_floorR > 40 && current_floorL > 40)
     38c:	8c 85       	ldd	r24, Y+12	; 0x0c
     38e:	0e 94 9b 03 	call	0x736	; 0x736 <sendDataGetFunction>
     392:	88 23       	and	r24, r24
     394:	d9 f4       	brne	.+54     	; 0x3cc <main+0x2f8>
     396:	8c 85       	ldd	r24, Y+12	; 0x0c
     398:	0e 94 66 03 	call	0x6cc	; 0x6cc <sendDataGetSender>
     39c:	98 2f       	mov	r25, r24
     39e:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a0:	98 17       	cp	r25, r24
     3a2:	a0 f4       	brcc	.+40     	; 0x3cc <main+0x2f8>
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	9c 81       	ldd	r25, Y+4	; 0x04
     3a8:	89 97       	sbiw	r24, 0x29	; 41
     3aa:	80 f0       	brcs	.+32     	; 0x3cc <main+0x2f8>
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	89 97       	sbiw	r24, 0x29	; 41
     3b2:	60 f0       	brcs	.+24     	; 0x3cc <main+0x2f8>
									{
									 	 /// sets the speed to 0
									 	 copro_setSpeed(0,0);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 12 06 	call	0xc24	; 0xc24 <copro_setSpeed>
									 	 /// speed of the wheels will be 0 for the fixed period of time
									 	 delay(350);
     3c0:	8e e5       	ldi	r24, 0x5E	; 94
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 19 04 	call	0x832	; 0x832 <delay>
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <main+0x2f8>
							if (sendDataGetFunctionSet(x) == 0b00 && ownId!=0)
								{
									/// line will not be ignored if nibo gets anything from this set of commands
									ignore_line = 0;
									/// if received byte has 00 in the commands section
									if (sendDataGetFunction(x) == 0b00)
     3ca:	00 00       	nop
							 	 }
							}
						}
            		}
                		/// get the actual values from the floor sensors
                		floor_update();
     3cc:	0e 94 dd 07 	call	0xfba	; 0xfba <floor_update>
                		/// update the values in the coprocessor
                		copro_update();
     3d0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <copro_update>
                				/// get the values from the right sensor near the line
                				current_floorR = floor_relative[LINE_RIGHT];
     3d4:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floor_relative+0x2>
     3d8:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floor_relative+0x3>
     3dc:	9c 83       	std	Y+4, r25	; 0x04
     3de:	8b 83       	std	Y+3, r24	; 0x03
                				/// if black line is detected by the right line sensor and flag states that line shouldn't be ignored
                				if (current_floorR < 33 && ignore_line!=1)
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	9c 81       	ldd	r25, Y+4	; 0x04
     3e4:	81 97       	sbiw	r24, 0x21	; 33
     3e6:	c8 f4       	brcc	.+50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3e8:	89 85       	ldd	r24, Y+9	; 0x09
     3ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	a9 f0       	breq	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
                					{
                					/// if send buffer is not full
										if(xBee_readyToSend())
     3f0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xBee_readyToSend>
     3f4:	88 23       	and	r24, r24
     3f6:	49 f0       	breq	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
											{
												/// forms the byte that will stop all Nibos with lower IDs
												x = buildSendData(0b00, ownId, 0b1100);
     3f8:	4c e0       	ldi	r20, 0x0C	; 12
     3fa:	6b 85       	ldd	r22, Y+11	; 0x0b
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 2f 03 	call	0x65e	; 0x65e <buildSendData>
     402:	8c 87       	std	Y+12, r24	; 0x0c
												/// sends the formed byte
												xBee_sendByte(x);
     404:	8c 85       	ldd	r24, Y+12	; 0x0c
     406:	0e 94 e6 03 	call	0x7cc	; 0x7cc <xBee_sendByte>
											}
										/// slightly turns to the right
                						copro_setTargetRel(4, 0, 14);
     40a:	4e e0       	ldi	r20, 0x0E	; 14
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
                					}
                				/// get the values from the left sensor near the line
                				current_floorL = floor_relative[LINE_LEFT];
     41a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floor_relative>
     41e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <floor_relative+0x1>
     422:	9a 83       	std	Y+2, r25	; 0x02
     424:	89 83       	std	Y+1, r24	; 0x01
                				/// if black line is detected by the left line sensor and flag states that line shouldn't be ignored
                				if (current_floorL < 33 && ignore_line!=1)
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	81 97       	sbiw	r24, 0x21	; 33
     42c:	c8 f4       	brcc	.+50     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     42e:	89 85       	ldd	r24, Y+9	; 0x09
     430:	9a 85       	ldd	r25, Y+10	; 0x0a
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	a9 f0       	breq	.+42     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
                					{
                						/// if send buffer is not full
                						if(xBee_readyToSend())
     436:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xBee_readyToSend>
     43a:	88 23       	and	r24, r24
     43c:	49 f0       	breq	.+18     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
											{
                								/// forms the byte that will stop all Nibos with lower IDs
												x = buildSendData(0b00, ownId, 0b1100);
     43e:	4c e0       	ldi	r20, 0x0C	; 12
     440:	6b 85       	ldd	r22, Y+11	; 0x0b
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 2f 03 	call	0x65e	; 0x65e <buildSendData>
     448:	8c 87       	std	Y+12, r24	; 0x0c
												/// sends the formed byte
												xBee_sendByte(x);
     44a:	8c 85       	ldd	r24, Y+12	; 0x0c
     44c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <xBee_sendByte>
											}
                						/// slightly turns to the right
                						copro_setTargetRel(0, 4, 14);
     450:	4e e0       	ldi	r20, 0x0E	; 14
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	64 e0       	ldi	r22, 0x04	; 4
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
                					}
                				/// if black line is not detected
                				if (current_floorR > 40 && current_floorL > 40)
     460:	8b 81       	ldd	r24, Y+3	; 0x03
     462:	9c 81       	ldd	r25, Y+4	; 0x04
     464:	89 97       	sbiw	r24, 0x29	; 41
     466:	58 f0       	brcs	.+22     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	89 97       	sbiw	r24, 0x29	; 41
     46e:	38 f0       	brcs	.+14     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
                					{
                						/// set the speed to it's current value defined by the Speed variable
                						copro_setSpeed(Speed,Speed);
     470:	2d 81       	ldd	r18, Y+5	; 0x05
     472:	3e 81       	ldd	r19, Y+6	; 0x06
     474:	8d 81       	ldd	r24, Y+5	; 0x05
     476:	9e 81       	ldd	r25, Y+6	; 0x06
     478:	b9 01       	movw	r22, r18
     47a:	0e 94 12 06 	call	0xc24	; 0xc24 <copro_setSpeed>
                					}
                				/// if both sensors simultaneously detect the black line and flag states that line shouldn't be ignored
                				if (current_floorR < 40 && current_floorL < 40 && ignore_line!=1)
     47e:	8b 81       	ldd	r24, Y+3	; 0x03
     480:	9c 81       	ldd	r25, Y+4	; 0x04
     482:	88 97       	sbiw	r24, 0x28	; 40
     484:	80 f4       	brcc	.+32     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	88 97       	sbiw	r24, 0x28	; 40
     48c:	60 f4       	brcc	.+24     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     48e:	89 85       	ldd	r24, Y+9	; 0x09
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	41 f0       	breq	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
                					{
                						/// move back a little
                						copro_setTargetRel(-10, -10, 14);
     496:	4e e0       	ldi	r20, 0x0E	; 14
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	66 ef       	ldi	r22, 0xF6	; 246
     49c:	7f ef       	ldi	r23, 0xFF	; 255
     49e:	86 ef       	ldi	r24, 0xF6	; 246
     4a0:	9f ef       	ldi	r25, 0xFF	; 255
     4a2:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
                					}
                				/// some delay to slow down any action and give some time to turn or roll back
                				delay(100);
     4a6:	84 e6       	ldi	r24, 0x64	; 100
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 19 04 	call	0x832	; 0x832 <delay>
            			}
     4ae:	3d ce       	rjmp	.-902    	; 0x12a <main+0x56>

000004b0 <Speedup>:

#include <stdio.h>
#include "Nibo_actions.h"

short Speedup(short Speed)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <Speedup+0x6>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	89 83       	std	Y+1, r24	; 0x01
	if(Speed < 0)
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	99 23       	and	r25, r25
     4c4:	1c f4       	brge	.+6      	; 0x4cc <Speedup+0x1c>
	{
		/// Set Speed to 0 effectively stopping Nibo
		Speed = 0;
     4c6:	1a 82       	std	Y+2, r1	; 0x02
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <Speedup+0x24>
	}
	else
	{
		/// Set Speed to 7
		Speed = 7;
     4cc:	87 e0       	ldi	r24, 0x07	; 7
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Speed;
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <Slowdown>:


short Slowdown(short Speed)
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <Slowdown+0x6>
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	9a 83       	std	Y+2, r25	; 0x02
     4ee:	89 83       	std	Y+1, r24	; 0x01
	/// if Speed was > 0
	if(Speed > 0)
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	18 16       	cp	r1, r24
     4f6:	19 06       	cpc	r1, r25
     4f8:	1c f4       	brge	.+6      	; 0x500 <Slowdown+0x1e>
	{
		/// Set Speed to 0 effectively stopping Nibo
		Speed = 0;
     4fa:	1a 82       	std	Y+2, r1	; 0x02
     4fc:	19 82       	std	Y+1, r1	; 0x01
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <Slowdown+0x26>
	}
	else
	{
		/// make Nibo go backwards
		Speed = -7;
     500:	89 ef       	ldi	r24, 0xF9	; 249
     502:	9f ef       	ldi	r25, 0xFF	; 255
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	89 83       	std	Y+1, r24	; 0x01
	}
	return Speed;
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <Reelection_forced>:


u8_t Reelection_forced(u8_t ownId, short reelection_delay, u8_t maxnibos)
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <Reelection_forced+0x6>
     51c:	00 d0       	rcall	.+0      	; 0x51e <Reelection_forced+0x8>
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	89 83       	std	Y+1, r24	; 0x01
     524:	7b 83       	std	Y+3, r23	; 0x03
     526:	6a 83       	std	Y+2, r22	; 0x02
     528:	4c 83       	std	Y+4, r20	; 0x04
	/// if ID of the Nibo is 0 (nibo was not taking part in the election
	if (ownId == 0)
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	88 23       	and	r24, r24
     52e:	11 f4       	brne	.+4      	; 0x534 <Reelection_forced+0x1e>
	{
		/// set ID as the max possible ID
		return maxnibos;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	14 c0       	rjmp	.+40     	; 0x55c <Reelection_forced+0x46>
	}
	/// disables uart0 port so Nibo would not recieve bytes from other Nibos before delay ends
	uart0_disable();
     534:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart0_disable>
	/// time of the delay depends on the ID of the Nibo. Nibos with lower IDs will be able to participate sooner
	/// in this function all Nibos will return to their previous Roles if no changes were made to the chain before reelection
	delay(reelection_delay*ownId);
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	28 9f       	mul	r18, r24
     544:	a0 01       	movw	r20, r0
     546:	29 9f       	mul	r18, r25
     548:	50 0d       	add	r21, r0
     54a:	38 9f       	mul	r19, r24
     54c:	50 0d       	add	r21, r0
     54e:	11 24       	eor	r1, r1
     550:	ca 01       	movw	r24, r20
     552:	0e 94 19 04 	call	0x832	; 0x832 <delay>
	/// enables the uart0 port and now Nibo can recieve and send messages to other Nibos
	uart0_enable();
     556:	0e 94 0c 0b 	call	0x1618	; 0x1618 <uart0_enable>
	return 0b01;
     55a:	81 e0       	ldi	r24, 0x01	; 1
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <Reelection_turn>:

u8_t Reelection_turn(u8_t ownId, short reelection_delay, u8_t maxnibos)
{
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	00 d0       	rcall	.+0      	; 0x570 <Reelection_turn+0x6>
     570:	00 d0       	rcall	.+0      	; 0x572 <Reelection_turn+0x8>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	7b 83       	std	Y+3, r23	; 0x03
     57a:	6a 83       	std	Y+2, r22	; 0x02
     57c:	4c 83       	std	Y+4, r20	; 0x04
	/// disables uart0 port so Nibo would not recieve bytes from other Nibos before delay ends
	uart0_disable();
     57e:	0e 94 0f 0b 	call	0x161e	; 0x161e <uart0_disable>
	/// in this function all Nibos will get the opposite Roles if no changes were made to the chain before reelection because delay for the Nibos with lower IDs will be Higher
	delay(reelection_delay*(maxnibos-ownId));
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	28 2f       	mov	r18, r24
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	88 2f       	mov	r24, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	28 1b       	sub	r18, r24
     590:	39 0b       	sbc	r19, r25
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	9b 81       	ldd	r25, Y+3	; 0x03
     596:	28 9f       	mul	r18, r24
     598:	a0 01       	movw	r20, r0
     59a:	29 9f       	mul	r18, r25
     59c:	50 0d       	add	r21, r0
     59e:	38 9f       	mul	r19, r24
     5a0:	50 0d       	add	r21, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	ca 01       	movw	r24, r20
     5a6:	0e 94 19 04 	call	0x832	; 0x832 <delay>
	/// enables the uart0 port and now Nibo can recieve and send messages to other Nibos
	uart0_enable();
     5aa:	0e 94 0c 0b 	call	0x1618	; 0x1618 <uart0_enable>
	return 0b01;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <Directionchange_right>:

void Directionchange_right()
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-56, 56, 10);
     5c6:	4a e0       	ldi	r20, 0x0A	; 10
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	68 e3       	ldi	r22, 0x38	; 56
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	88 ec       	ldi	r24, 0xC8	; 200
     5d0:	9f ef       	ldi	r25, 0xFF	; 255
     5d2:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
	///delay allows to complete the operation without interruption
	delay(5000);
     5d6:	88 e8       	ldi	r24, 0x88	; 136
     5d8:	93 e1       	ldi	r25, 0x13	; 19
     5da:	0e 94 19 04 	call	0x832	; 0x832 <delay>
}
     5de:	00 00       	nop
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <Directionchange_left>:


void Directionchange_left()
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(56, -56, 10);
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	68 ec       	ldi	r22, 0xC8	; 200
     5f4:	7f ef       	ldi	r23, 0xFF	; 255
     5f6:	88 e3       	ldi	r24, 0x38	; 56
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
	///delay allows to complete the operation without interruption
	delay(5000);
     5fe:	88 e8       	ldi	r24, 0x88	; 136
     600:	93 e1       	ldi	r25, 0x13	; 19
     602:	0e 94 19 04 	call	0x832	; 0x832 <delay>
}
     606:	00 00       	nop
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <Turn_left>:

void Turn_left()
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-28, 28, 10);
     616:	4a e0       	ldi	r20, 0x0A	; 10
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	6c e1       	ldi	r22, 0x1C	; 28
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	84 ee       	ldi	r24, 0xE4	; 228
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
	///delay allows to complete the operation without interruption
	delay(5000);
     626:	88 e8       	ldi	r24, 0x88	; 136
     628:	93 e1       	ldi	r25, 0x13	; 19
     62a:	0e 94 19 04 	call	0x832	; 0x832 <delay>
}
     62e:	00 00       	nop
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <Turn_right>:


void Turn_right()
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(28, -28, 10);
     63e:	4a e0       	ldi	r20, 0x0A	; 10
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	64 ee       	ldi	r22, 0xE4	; 228
     644:	7f ef       	ldi	r23, 0xFF	; 255
     646:	8c e1       	ldi	r24, 0x1C	; 28
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 38 06 	call	0xc70	; 0xc70 <copro_setTargetRel>
	///delay allows to complete the operation without interruption
	delay(5000);
     64e:	88 e8       	ldi	r24, 0x88	; 136
     650:	93 e1       	ldi	r25, 0x13	; 19
     652:	0e 94 19 04 	call	0x832	; 0x832 <delay>
}
     656:	00 00       	nop
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <buildSendData>:
 * @param sender Who sent the data. Size 2 bits.
 * @param The user data consisting of function set and function. Size 4 bits.
 *
 * @return The ready-packed data is returned.
 */
u8_t buildSendData(u8_t reciver, u8_t sender, u8_t data){
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	00 d0       	rcall	.+0      	; 0x664 <buildSendData+0x6>
     664:	00 d0       	rcall	.+0      	; 0x666 <buildSendData+0x8>
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	6b 83       	std	Y+3, r22	; 0x03
     66e:	4c 83       	std	Y+4, r20	; 0x04
	u8_t output = 0;
     670:	19 82       	std	Y+1, r1	; 0x01
	output = output + reciver; ///2 bit
     672:	99 81       	ldd	r25, Y+1	; 0x01
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	89 0f       	add	r24, r25
     678:	89 83       	std	Y+1, r24	; 0x01
	output = output << 2; ///shift to make room
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	88 0f       	add	r24, r24
     67e:	88 0f       	add	r24, r24
     680:	89 83       	std	Y+1, r24	; 0x01
	output = output + sender; ///2 bit
     682:	99 81       	ldd	r25, Y+1	; 0x01
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	89 0f       	add	r24, r25
     688:	89 83       	std	Y+1, r24	; 0x01
	output = output << 4; ///shift to make room
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	82 95       	swap	r24
     68e:	80 7f       	andi	r24, 0xF0	; 240
     690:	89 83       	std	Y+1, r24	; 0x01
	output = output + data; ///4 bit
     692:	99 81       	ldd	r25, Y+1	; 0x01
     694:	8c 81       	ldd	r24, Y+4	; 0x04
     696:	89 0f       	add	r24, r25
     698:	89 83       	std	Y+1, r24	; 0x01
	return output;
     69a:	89 81       	ldd	r24, Y+1	; 0x01
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <sendDataGetReciver>:
 *
 * @param sendData The packed transmission data.
 *
 * @return The ID of the recipient.
 */
u8_t sendDataGetReciver(u8_t sendData){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData >> 6; ///push to delete the last 6 bits.
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	82 95       	swap	r24
     6ba:	86 95       	lsr	r24
     6bc:	86 95       	lsr	r24
     6be:	83 70       	andi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
	return sendData;
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     6c4:	0f 90       	pop	r0
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <sendDataGetSender>:
 *
 * @param sendData The packed transmission data.
 *
 * @return The ID of the sender
 */
u8_t sendDataGetSender(u8_t sendData){
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	1f 92       	push	r1
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData << 2; ///push to delete the first 2 bits.
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	88 0f       	add	r24, r24
     6dc:	88 0f       	add	r24, r24
     6de:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData >> 6; ///push to delete the last 4 bits.
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	82 95       	swap	r24
     6e4:	86 95       	lsr	r24
     6e6:	86 95       	lsr	r24
     6e8:	83 70       	andi	r24, 0x03	; 3
     6ea:	89 83       	std	Y+1, r24	; 0x01
	return sendData;
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <sendDataGetData>:
 *
 * @param sendData The packed transmission data.
 *
 * @return Returns the compiler payload data from the transmission data.
 */
u8_t sendDataGetData(u8_t sendData){
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData & 15; /// zero set of the first 4 bits
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	8f 70       	andi	r24, 0x0F	; 15
     706:	89 83       	std	Y+1, r24	; 0x01
	return sendData;
     708:	89 81       	ldd	r24, Y+1	; 0x01
}
     70a:	0f 90       	pop	r0
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <sendDataGetFunctionSet>:
 *
 * @param sendData The packed transmission data.
 *
 * @return Returns the function set.
 */
u8_t sendDataGetFunctionSet(u8_t sendData){
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	1f 92       	push	r1
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData & 15; ///zero set of the first 4 bits
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	8f 70       	andi	r24, 0x0F	; 15
     722:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData >> 2; ///push to delete the last 2 bits.
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	86 95       	lsr	r24
     728:	86 95       	lsr	r24
     72a:	89 83       	std	Y+1, r24	; 0x01
	return sendData;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
}
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <sendDataGetFunction>:
 *
 * @param sendData The packed transmission data.
 *
 * @return Returns the function.
 */
u8_t sendDataGetFunction(u8_t sendData){
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	89 83       	std	Y+1, r24	; 0x01
	sendData = sendData & 3; ///zero set of the first 6 bits
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	83 70       	andi	r24, 0x03	; 3
     746:	89 83       	std	Y+1, r24	; 0x01
	return sendData;
     748:	89 81       	ldd	r24, Y+1	; 0x01
}
     74a:	0f 90       	pop	r0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <uart0_rxempty>:


/*!
 * Liefert true wenn der Empfangspuffer leer ist.
 */
static inline char uart0_rxempty() {
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
  return uart0_rxbuf_begin==uart0_rxbuf_end;
     75a:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <uart0_rxbuf_begin>
     75e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <uart0_rxbuf_end>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	29 17       	cp	r18, r25
     766:	09 f0       	breq	.+2      	; 0x76a <uart0_rxempty+0x18>
     768:	80 e0       	ldi	r24, 0x00	; 0
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <uart0_txfull>:


/*!
 * Liefert true wenn der Sendepuffer voll ist.
 */
static inline char uart0_txfull() {
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
  return uart0_txbuf_end==UART0_TXBUF_SIZE;
     778:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <uart0_txbuf_end>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	98 30       	cpi	r25, 0x08	; 8
     780:	09 f0       	breq	.+2      	; 0x784 <uart0_txfull+0x14>
     782:	80 e0       	ldi	r24, 0x00	; 0
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <initUART0>:

/**
 * Function which initialize the UART0 Port of the Nibo and sets the baudrate of the port
 * Default baude rate of the modules is 9600
 */
void initUART0(){
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
    uart0_set_baudrate(9600);
     792:	80 e8       	ldi	r24, 0x80	; 128
     794:	95 e2       	ldi	r25, 0x25	; 37
     796:	0e 94 c4 0a 	call	0x1588	; 0x1588 <uart0_set_baudrate>
    uart0_enable();
     79a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <uart0_enable>
}
     79e:	00 00       	nop
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <xBee_init>:

/**
 * Initializes and enables the xBee Module
 */
void xBee_init() {
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62

    //LED ausschalten
    DDRE &= ~(1 << 0);
     7ae:	82 e2       	ldi	r24, 0x22	; 34
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	22 e2       	ldi	r18, 0x22	; 34
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	2e 7f       	andi	r18, 0xFE	; 254
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18

    initUART0();
     7c0:	0e 94 c5 03 	call	0x78a	; 0x78a <initUART0>

}
     7c4:	00 00       	nop
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <xBee_sendByte>:

/**
 * Transmits a single byte
 */
void xBee_sendByte(uint8_t data) {
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	1f 92       	push	r1
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	89 83       	std	Y+1, r24	; 0x01
    // -> puts the char into the buffer to send the char
    uart0_putchar(data);
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <uart0_putchar>
}
     7de:	00 00       	nop
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <xBee_readyToSend>:

/**
 * Checks if xBee is ready to transmit data
 */
uint8_t xBee_readyToSend() {
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
    return !uart0_txfull();
     7f0:	0e 94 b8 03 	call	0x770	; 0x770 <uart0_txfull>
     7f4:	98 2f       	mov	r25, r24
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	99 23       	and	r25, r25
     7fa:	09 f0       	breq	.+2      	; 0x7fe <xBee_readyToSend+0x16>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <xBee_receivedData>:

/**
 * Checks if xBee received something
 */
uint8_t xBee_receivedData() {
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
    return !uart0_rxempty();
     80c:	0e 94 a9 03 	call	0x752	; 0x752 <uart0_rxempty>
     810:	98 2f       	mov	r25, r24
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	99 23       	and	r25, r25
     816:	09 f0       	breq	.+2      	; 0x81a <xBee_receivedData+0x16>
     818:	80 e0       	ldi	r24, 0x00	; 0
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <xBee_readByte>:


/**
 * Reads the next byte of received data
 */
uint8_t xBee_readByte() {
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
    // -> get char out of the buffer
    return uart0_getchar();
     828:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <uart0_getchar>
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <delay>:
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	41 f0       	breq	.+16     	; 0x846 <delay+0x14>
     836:	ef e9       	ldi	r30, 0x9F	; 159
     838:	ff e0       	ldi	r31, 0x0F	; 15
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <delay+0x8>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <delay+0xe>
     840:	00 00       	nop
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f6 cf       	rjmp	.-20     	; 0x832 <delay>
     846:	08 95       	ret

00000848 <spi_tx>:
     848:	8f b9       	out	0x0f, r24	; 15
     84a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <spi_tx_chk>
     84e:	89 27       	eor	r24, r25
     850:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <spi_tx_chk>
     854:	08 95       	ret

00000856 <spi_restart_transmission>:
     856:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <spi_pos>
     85a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <spi_tx_size>
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	98 0f       	add	r25, r24
     862:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <spi_size>
     866:	96 e9       	ldi	r25, 0x96	; 150
     868:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <spi_tx_chk>
     86c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <spi_rx_chk>
     870:	f8 94       	cli
     872:	b0 99       	sbic	0x16, 0	; 22
     874:	03 c0       	rjmp	.+6      	; 0x87c <spi_restart_transmission+0x26>
     876:	78 94       	sei
     878:	00 00       	nop
     87a:	fa cf       	rjmp	.-12     	; 0x870 <spi_restart_transmission+0x1a>
     87c:	90 ec       	ldi	r25, 0xC0	; 192
     87e:	9d b9       	out	0x0d, r25	; 13
     880:	0e 94 24 04 	call	0x848	; 0x848 <spi_tx>
     884:	77 9a       	sbi	0x0e, 7	; 14
     886:	78 94       	sei
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	08 95       	ret

0000088c <spi_init>:
     88c:	b8 98       	cbi	0x17, 0	; 23
     88e:	c0 98       	cbi	0x18, 0	; 24
     890:	bb 9a       	sbi	0x17, 3	; 23
     892:	c3 9a       	sbi	0x18, 3	; 24
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0c 94 2b 04 	jmp	0x856	; 0x856 <spi_restart_transmission>

0000089a <__vector_17>:
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
     8c0:	8f b1       	in	r24, 0x0f	; 15
     8c2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <spi_rx_chk>
     8c6:	98 27       	eor	r25, r24
     8c8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <spi_rx_chk>
     8cc:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <spi_pos>
     8d0:	e1 11       	cpse	r30, r1
     8d2:	16 c0       	rjmp	.+44     	; 0x900 <__vector_17+0x66>
     8d4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <spi_rx_size>
     8d8:	8c 31       	cpi	r24, 0x1C	; 28
     8da:	30 f0       	brcs	.+12     	; 0x8e8 <__vector_17+0x4e>
     8dc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <spi_tx_size>
     8e0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <spi_rx_size>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__vector_17+0x60>
     8e8:	48 2f       	mov	r20, r24
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <spi_size>
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	42 17       	cp	r20, r18
     8f4:	53 07       	cpc	r21, r19
     8f6:	fc f0       	brlt	.+62     	; 0x936 <__vector_17+0x9c>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <spi_size>
     8fe:	1b c0       	rjmp	.+54     	; 0x936 <__vector_17+0x9c>
     900:	2e 2f       	mov	r18, r30
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <spi_rx_size>
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	42 17       	cp	r20, r18
     90c:	53 07       	cpc	r21, r19
     90e:	2c f0       	brlt	.+10     	; 0x91a <__vector_17+0x80>
     910:	d9 01       	movw	r26, r18
     912:	a9 5d       	subi	r26, 0xD9	; 217
     914:	be 4f       	sbci	r27, 0xFE	; 254
     916:	8c 93       	st	X, r24
     918:	0e c0       	rjmp	.+28     	; 0x936 <__vector_17+0x9c>
     91a:	21 50       	subi	r18, 0x01	; 1
     91c:	31 09       	sbc	r19, r1
     91e:	42 17       	cp	r20, r18
     920:	53 07       	cpc	r21, r19
     922:	49 f4       	brne	.+18     	; 0x936 <__vector_17+0x9c>
     924:	99 23       	and	r25, r25
     926:	39 f0       	breq	.+14     	; 0x936 <__vector_17+0x9c>
     928:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <spi_err_cnt>
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <spi_err_cnt>
     932:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <spi_rx_size>
     936:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <spi_tx_size>
     93a:	e8 17       	cp	r30, r24
     93c:	28 f4       	brcc	.+10     	; 0x948 <__vector_17+0xae>
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	e8 5f       	subi	r30, 0xF8	; 248
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	80 81       	ld	r24, Z
     946:	0a c0       	rjmp	.+20     	; 0x95c <__vector_17+0xc2>
     948:	e8 13       	cpse	r30, r24
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__vector_17+0xb8>
     94c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <spi_tx_chk>
     950:	05 c0       	rjmp	.+10     	; 0x95c <__vector_17+0xc2>
     952:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <spi_size>
     956:	e8 17       	cp	r30, r24
     958:	48 f4       	brcc	.+18     	; 0x96c <__vector_17+0xd2>
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	0e 94 24 04 	call	0x848	; 0x848 <spi_tx>
     960:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <spi_pos>
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <spi_pos>
     96a:	11 c0       	rjmp	.+34     	; 0x98e <__vector_17+0xf4>
     96c:	b8 98       	cbi	0x17, 0	; 23
     96e:	c0 98       	cbi	0x18, 0	; 24
     970:	1d b8       	out	0x0d, r1	; 13
     972:	b8 98       	cbi	0x17, 0	; 23
     974:	c0 98       	cbi	0x18, 0	; 24
     976:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <spi_frame_cnt>
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <spi_frame_cnt>
     980:	78 94       	sei
     982:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <spi_rx_size>
     986:	0e 94 ee 04 	call	0x9dc	; 0x9dc <spi_finished_callback>
     98a:	0e 94 2b 04 	call	0x856	; 0x856 <spi_restart_transmission>
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	1f 90       	pop	r1
     9b2:	18 95       	reti

000009b4 <wait_copro>:
     9b4:	78 94       	sei
     9b6:	20 e1       	ldi	r18, 0x10	; 16
     9b8:	37 e2       	ldi	r19, 0x27	; 39
     9ba:	97 e0       	ldi	r25, 0x07	; 7
     9bc:	89 9f       	mul	r24, r25
     9be:	f0 01       	movw	r30, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	e4 5b       	subi	r30, 0xB4	; 180
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	21 50       	subi	r18, 0x01	; 1
     9c8:	31 09       	sbc	r19, r1
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <wait_copro+0x1e>
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <wait_copro+0x12>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	23 2b       	or	r18, r19
     9d6:	09 f4       	brne	.+2      	; 0x9da <wait_copro+0x26>
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	08 95       	ret

000009dc <spi_finished_callback>:
     9dc:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <copro_seq>
     9e0:	9f 5f       	subi	r25, 0xFF	; 255
     9e2:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <copro_seq>
     9e6:	8b 31       	cpi	r24, 0x1B	; 27
     9e8:	41 f4       	brne	.+16     	; 0x9fa <spi_finished_callback+0x1e>
     9ea:	e8 e2       	ldi	r30, 0x28	; 40
     9ec:	f1 e0       	ldi	r31, 0x01	; 1
     9ee:	a3 e8       	ldi	r26, 0x83	; 131
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	8a 95       	dec	r24
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <spi_finished_callback+0x16>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <spi_tx_buf+0xe>
     a00:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <spi_tx_buf+0x7>
     a04:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <spi_tx_buf>
     a08:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <copro_commands>
     a0c:	9f 3f       	cpi	r25, 0xFF	; 255
     a0e:	69 f0       	breq	.+26     	; 0xa2a <spi_finished_callback+0x4e>
     a10:	97 e0       	ldi	r25, 0x07	; 7
     a12:	ec e4       	ldi	r30, 0x4C	; 76
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	a8 e0       	ldi	r26, 0x08	; 8
     a18:	b1 e0       	ldi	r27, 0x01	; 1
     a1a:	01 90       	ld	r0, Z+
     a1c:	0d 92       	st	X+, r0
     a1e:	9a 95       	dec	r25
     a20:	e1 f7       	brne	.-8      	; 0xa1a <spi_finished_callback+0x3e>
     a22:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <copro_commands>
     a26:	87 e0       	ldi	r24, 0x07	; 7
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <spi_finished_callback+0x50>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <copro_commands+0x7>
     a30:	9f 3f       	cpi	r25, 0xFF	; 255
     a32:	79 f0       	breq	.+30     	; 0xa52 <spi_finished_callback+0x76>
     a34:	a8 2f       	mov	r26, r24
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	a8 5f       	subi	r26, 0xF8	; 248
     a3a:	be 4f       	sbci	r27, 0xFE	; 254
     a3c:	97 e0       	ldi	r25, 0x07	; 7
     a3e:	e3 e5       	ldi	r30, 0x53	; 83
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	01 90       	ld	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	9a 95       	dec	r25
     a48:	e1 f7       	brne	.-8      	; 0xa42 <spi_finished_callback+0x66>
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <copro_commands+0x7>
     a50:	89 5f       	subi	r24, 0xF9	; 249
     a52:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <copro_commands+0xe>
     a56:	9f 3f       	cpi	r25, 0xFF	; 255
     a58:	79 f0       	breq	.+30     	; 0xa78 <spi_finished_callback+0x9c>
     a5a:	a8 2f       	mov	r26, r24
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	a8 5f       	subi	r26, 0xF8	; 248
     a60:	be 4f       	sbci	r27, 0xFE	; 254
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	ea e5       	ldi	r30, 0x5A	; 90
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <spi_finished_callback+0x8c>
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <copro_commands+0xe>
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <spi_finished_callback+0xa4>
     a78:	81 11       	cpse	r24, r1
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <spi_finished_callback+0xa4>
     a7c:	87 e0       	ldi	r24, 0x07	; 7
     a7e:	08 95       	ret
     a80:	85 e1       	ldi	r24, 0x15	; 21
     a82:	08 95       	ret

00000a84 <_copro_check_busy>:
     a84:	27 e0       	ldi	r18, 0x07	; 7
     a86:	82 9f       	mul	r24, r18
     a88:	c0 01       	movw	r24, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 5b       	subi	r30, 0xB4	; 180
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 81       	ld	r25, Z
     a96:	9f 3f       	cpi	r25, 0xFF	; 255
     a98:	09 f4       	brne	.+2      	; 0xa9c <_copro_check_busy+0x18>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret

00000a9e <copro_update>:
     a9e:	f8 94       	cli
     aa0:	a5 e6       	ldi	r26, 0x65	; 101
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	e3 e8       	ldi	r30, 0x83	; 131
     aa6:	f1 e0       	ldi	r31, 0x01	; 1
     aa8:	81 81       	ldd	r24, Z+1	; 0x01
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	98 2f       	mov	r25, r24
     aae:	88 27       	eor	r24, r24
     ab0:	20 81       	ld	r18, Z
     ab2:	82 0f       	add	r24, r18
     ab4:	91 1d       	adc	r25, r1
     ab6:	11 96       	adiw	r26, 0x01	; 1
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	83 81       	ldd	r24, Z+3	; 0x03
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	98 2f       	mov	r25, r24
     ac2:	88 27       	eor	r24, r24
     ac4:	22 81       	ldd	r18, Z+2	; 0x02
     ac6:	82 0f       	add	r24, r18
     ac8:	91 1d       	adc	r25, r1
     aca:	13 96       	adiw	r26, 0x03	; 3
     acc:	9c 93       	st	X, r25
     ace:	8e 93       	st	-X, r24
     ad0:	12 97       	sbiw	r26, 0x02	; 2
     ad2:	85 81       	ldd	r24, Z+5	; 0x05
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	98 2f       	mov	r25, r24
     ad8:	88 27       	eor	r24, r24
     ada:	24 81       	ldd	r18, Z+4	; 0x04
     adc:	82 0f       	add	r24, r18
     ade:	91 1d       	adc	r25, r1
     ae0:	15 96       	adiw	r26, 0x05	; 5
     ae2:	9c 93       	st	X, r25
     ae4:	8e 93       	st	-X, r24
     ae6:	14 97       	sbiw	r26, 0x04	; 4
     ae8:	87 81       	ldd	r24, Z+7	; 0x07
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	98 2f       	mov	r25, r24
     aee:	88 27       	eor	r24, r24
     af0:	26 81       	ldd	r18, Z+6	; 0x06
     af2:	82 0f       	add	r24, r18
     af4:	91 1d       	adc	r25, r1
     af6:	17 96       	adiw	r26, 0x07	; 7
     af8:	9c 93       	st	X, r25
     afa:	8e 93       	st	-X, r24
     afc:	16 97       	sbiw	r26, 0x06	; 6
     afe:	81 85       	ldd	r24, Z+9	; 0x09
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	98 2f       	mov	r25, r24
     b04:	88 27       	eor	r24, r24
     b06:	20 85       	ldd	r18, Z+8	; 0x08
     b08:	82 0f       	add	r24, r18
     b0a:	91 1d       	adc	r25, r1
     b0c:	19 96       	adiw	r26, 0x09	; 9
     b0e:	9c 93       	st	X, r25
     b10:	8e 93       	st	-X, r24
     b12:	18 97       	sbiw	r26, 0x08	; 8
     b14:	78 94       	sei
     b16:	f8 94       	cli
     b18:	22 85       	ldd	r18, Z+10	; 0x0a
     b1a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <copro_ticks_offset_l>
     b1e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <copro_ticks_offset_l+0x1>
     b22:	ac 01       	movw	r20, r24
     b24:	42 0f       	add	r20, r18
     b26:	51 1d       	adc	r21, r1
     b28:	93 85       	ldd	r25, Z+11	; 0x0b
     b2a:	89 2f       	mov	r24, r25
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	98 2f       	mov	r25, r24
     b30:	88 27       	eor	r24, r24
     b32:	84 0f       	add	r24, r20
     b34:	95 1f       	adc	r25, r21
     b36:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <copro_ticks_l+0x1>
     b3a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <copro_ticks_l>
     b3e:	24 85       	ldd	r18, Z+12	; 0x0c
     b40:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <copro_ticks_offset_r>
     b44:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <copro_ticks_offset_r+0x1>
     b48:	ac 01       	movw	r20, r24
     b4a:	42 0f       	add	r20, r18
     b4c:	51 1d       	adc	r21, r1
     b4e:	95 85       	ldd	r25, Z+13	; 0x0d
     b50:	89 2f       	mov	r24, r25
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	98 2f       	mov	r25, r24
     b56:	88 27       	eor	r24, r24
     b58:	84 0f       	add	r24, r20
     b5a:	95 1f       	adc	r25, r21
     b5c:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <copro_ticks_r+0x1>
     b60:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <copro_ticks_r>
     b64:	87 85       	ldd	r24, Z+15	; 0x0f
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	98 2f       	mov	r25, r24
     b6a:	88 27       	eor	r24, r24
     b6c:	26 85       	ldd	r18, Z+14	; 0x0e
     b6e:	82 0f       	add	r24, r18
     b70:	91 1d       	adc	r25, r1
     b72:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <copro_speed_l+0x1>
     b76:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <copro_speed_l>
     b7a:	81 89       	ldd	r24, Z+17	; 0x11
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	98 2f       	mov	r25, r24
     b80:	88 27       	eor	r24, r24
     b82:	20 89       	ldd	r18, Z+16	; 0x10
     b84:	82 0f       	add	r24, r18
     b86:	91 1d       	adc	r25, r1
     b88:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <copro_speed_r+0x1>
     b8c:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <copro_speed_r>
     b90:	83 89       	ldd	r24, Z+19	; 0x13
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	98 2f       	mov	r25, r24
     b96:	88 27       	eor	r24, r24
     b98:	22 89       	ldd	r18, Z+18	; 0x12
     b9a:	82 0f       	add	r24, r18
     b9c:	91 1d       	adc	r25, r1
     b9e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <copro_current_l+0x1>
     ba2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <copro_current_l>
     ba6:	85 89       	ldd	r24, Z+21	; 0x15
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	98 2f       	mov	r25, r24
     bac:	88 27       	eor	r24, r24
     bae:	24 89       	ldd	r18, Z+20	; 0x14
     bb0:	82 0f       	add	r24, r18
     bb2:	91 1d       	adc	r25, r1
     bb4:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <copro_current_r+0x1>
     bb8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <copro_current_r>
     bbc:	78 94       	sei
     bbe:	f8 94       	cli
     bc0:	80 8d       	ldd	r24, Z+24	; 0x18
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	98 2f       	mov	r25, r24
     bc6:	88 27       	eor	r24, r24
     bc8:	27 89       	ldd	r18, Z+23	; 0x17
     bca:	82 0f       	add	r24, r18
     bcc:	91 1d       	adc	r25, r1
     bce:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <copro_rc5_cmd+0x1>
     bd2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <copro_rc5_cmd>
     bd6:	82 8d       	ldd	r24, Z+26	; 0x1a
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	98 2f       	mov	r25, r24
     bdc:	88 27       	eor	r24, r24
     bde:	21 8d       	ldd	r18, Z+25	; 0x19
     be0:	82 0f       	add	r24, r18
     be2:	91 1d       	adc	r25, r1
     be4:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <copro_target_distance+0x1>
     be8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <copro_target_distance>
     bec:	78 94       	sei
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	08 95       	ret

00000bf2 <copro_stop>:
     bf2:	f8 94       	cli
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <copro_commands>
     bfa:	78 94       	sei
     bfc:	08 95       	ret

00000bfe <copro_stopImmediate>:
     bfe:	f8 94       	cli
     c00:	8a e0       	ldi	r24, 0x0A	; 10
     c02:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <copro_commands>
     c06:	78 94       	sei
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 95       	ret

00000c0c <copro_setPWM>:
     c0c:	f8 94       	cli
     c0e:	ec e4       	ldi	r30, 0x4C	; 76
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	25 e0       	ldi	r18, 0x05	; 5
     c14:	20 83       	st	Z, r18
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	92 83       	std	Z+2, r25	; 0x02
     c1a:	63 83       	std	Z+3, r22	; 0x03
     c1c:	74 83       	std	Z+4, r23	; 0x04
     c1e:	78 94       	sei
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	08 95       	ret

00000c24 <copro_setSpeed>:
     c24:	f8 94       	cli
     c26:	ec e4       	ldi	r30, 0x4C	; 76
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	22 e0       	ldi	r18, 0x02	; 2
     c2c:	20 83       	st	Z, r18
     c2e:	81 83       	std	Z+1, r24	; 0x01
     c30:	92 83       	std	Z+2, r25	; 0x02
     c32:	63 83       	std	Z+3, r22	; 0x03
     c34:	74 83       	std	Z+4, r23	; 0x04
     c36:	78 94       	sei
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	08 95       	ret

00000c3c <copro_setTargetAbs>:
     c3c:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <copro_ticks_offset_l>
     c40:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <copro_ticks_offset_l+0x1>
     c44:	82 1b       	sub	r24, r18
     c46:	93 0b       	sbc	r25, r19
     c48:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <copro_ticks_offset_r>
     c4c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <copro_ticks_offset_r+0x1>
     c50:	62 1b       	sub	r22, r18
     c52:	73 0b       	sbc	r23, r19
     c54:	f8 94       	cli
     c56:	ec e4       	ldi	r30, 0x4C	; 76
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	23 e0       	ldi	r18, 0x03	; 3
     c5c:	20 83       	st	Z, r18
     c5e:	81 83       	std	Z+1, r24	; 0x01
     c60:	92 83       	std	Z+2, r25	; 0x02
     c62:	63 83       	std	Z+3, r22	; 0x03
     c64:	74 83       	std	Z+4, r23	; 0x04
     c66:	45 83       	std	Z+5, r20	; 0x05
     c68:	56 83       	std	Z+6, r21	; 0x06
     c6a:	78 94       	sei
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	08 95       	ret

00000c70 <copro_setTargetRel>:
     c70:	f8 94       	cli
     c72:	ec e4       	ldi	r30, 0x4C	; 76
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	24 e0       	ldi	r18, 0x04	; 4
     c78:	20 83       	st	Z, r18
     c7a:	81 83       	std	Z+1, r24	; 0x01
     c7c:	92 83       	std	Z+2, r25	; 0x02
     c7e:	63 83       	std	Z+3, r22	; 0x03
     c80:	74 83       	std	Z+4, r23	; 0x04
     c82:	45 83       	std	Z+5, r20	; 0x05
     c84:	56 83       	std	Z+6, r21	; 0x06
     c86:	78 94       	sei
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret

00000c8c <copro_setSpeedParameters>:
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	18 2f       	mov	r17, r24
     c94:	d6 2f       	mov	r29, r22
     c96:	c4 2f       	mov	r28, r20
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <wait_copro>
     c9e:	f8 94       	cli
     ca0:	ec e4       	ldi	r30, 0x4C	; 76
     ca2:	f1 e0       	ldi	r31, 0x01	; 1
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	86 87       	std	Z+14, r24	; 0x0e
     ca8:	17 87       	std	Z+15, r17	; 0x0f
     caa:	d0 8b       	std	Z+16, r29	; 0x10
     cac:	c1 8b       	std	Z+17, r28	; 0x11
     cae:	78 94       	sei
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	08 95       	ret

00000cba <copro_setPositionParameters>:
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	08 95       	ret

00000cbe <copro_resetOdometry>:
     cbe:	f8 94       	cli
     cc0:	e3 e8       	ldi	r30, 0x83	; 131
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	25 85       	ldd	r18, Z+13	; 0x0d
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	32 2f       	mov	r19, r18
     cca:	22 27       	eor	r18, r18
     ccc:	44 85       	ldd	r20, Z+12	; 0x0c
     cce:	24 0f       	add	r18, r20
     cd0:	31 1d       	adc	r19, r1
     cd2:	43 85       	ldd	r20, Z+11	; 0x0b
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	54 2f       	mov	r21, r20
     cd8:	44 27       	eor	r20, r20
     cda:	e2 85       	ldd	r30, Z+10	; 0x0a
     cdc:	4e 0f       	add	r20, r30
     cde:	51 1d       	adc	r21, r1
     ce0:	fc 01       	movw	r30, r24
     ce2:	e4 1b       	sub	r30, r20
     ce4:	f5 0b       	sbc	r31, r21
     ce6:	f0 93 49 01 	sts	0x0149, r31	; 0x800149 <copro_ticks_offset_l+0x1>
     cea:	e0 93 48 01 	sts	0x0148, r30	; 0x800148 <copro_ticks_offset_l>
     cee:	ab 01       	movw	r20, r22
     cf0:	42 1b       	sub	r20, r18
     cf2:	53 0b       	sbc	r21, r19
     cf4:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <copro_ticks_offset_r+0x1>
     cf8:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <copro_ticks_offset_r>
     cfc:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <copro_ticks_l+0x1>
     d00:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <copro_ticks_l>
     d04:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <copro_ticks_r+0x1>
     d08:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <copro_ticks_r>
     d0c:	78 94       	sei
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	08 95       	ret

00000d12 <copro_ir_stop>:
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 da 04 	call	0x9b4	; 0x9b4 <wait_copro>
     d18:	f8 94       	cli
     d1a:	88 e0       	ldi	r24, 0x08	; 8
     d1c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <copro_commands+0x7>
     d20:	78 94       	sei
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret

00000d26 <copro_ir_startMeasure>:
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 da 04 	call	0x9b4	; 0x9b4 <wait_copro>
     d2c:	f8 94       	cli
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <copro_commands+0x7>
     d34:	78 94       	sei
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	08 95       	ret

00000d3a <copro_transmitRC5>:
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	d8 2f       	mov	r29, r24
     d40:	c9 2f       	mov	r28, r25
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 da 04 	call	0x9b4	; 0x9b4 <wait_copro>
     d48:	f8 94       	cli
     d4a:	ec e4       	ldi	r30, 0x4C	; 76
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	89 e0       	ldi	r24, 0x09	; 9
     d50:	87 83       	std	Z+7, r24	; 0x07
     d52:	d0 87       	std	Z+8, r29	; 0x08
     d54:	c1 87       	std	Z+9, r28	; 0x09
     d56:	78 94       	sei
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <floor_calibrateUpdate>:
     d60:	cf 92       	push	r12
     d62:	df 92       	push	r13
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	11 e0       	ldi	r17, 0x01	; 1
     d74:	c3 ea       	ldi	r28, 0xA3	; 163
     d76:	d1 e0       	ldi	r29, 0x01	; 1
     d78:	28 85       	ldd	r18, Y+8	; 0x08
     d7a:	39 85       	ldd	r19, Y+9	; 0x09
     d7c:	88 81       	ld	r24, Y
     d7e:	99 81       	ldd	r25, Y+1	; 0x01
     d80:	28 1b       	sub	r18, r24
     d82:	39 0b       	sbc	r19, r25
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	c1 2c       	mov	r12, r1
     d8a:	d1 2c       	mov	r13, r1
     d8c:	80 e1       	ldi	r24, 0x10	; 16
     d8e:	e8 2e       	mov	r14, r24
     d90:	f1 2c       	mov	r15, r1
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
     d9a:	f8 01       	movw	r30, r16
     d9c:	31 83       	std	Z+1, r19	; 0x01
     d9e:	20 83       	st	Z, r18
     da0:	2a 85       	ldd	r18, Y+10	; 0x0a
     da2:	3b 85       	ldd	r19, Y+11	; 0x0b
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	9b 81       	ldd	r25, Y+3	; 0x03
     da8:	28 1b       	sub	r18, r24
     daa:	39 0b       	sbc	r19, r25
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	c7 01       	movw	r24, r14
     db2:	b6 01       	movw	r22, r12
     db4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
     db8:	f8 01       	movw	r30, r16
     dba:	33 83       	std	Z+3, r19	; 0x03
     dbc:	22 83       	std	Z+2, r18	; 0x02
     dbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc0:	3d 85       	ldd	r19, Y+13	; 0x0d
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	9d 81       	ldd	r25, Y+5	; 0x05
     dc6:	28 1b       	sub	r18, r24
     dc8:	39 0b       	sbc	r19, r25
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
     dd6:	f8 01       	movw	r30, r16
     dd8:	35 83       	std	Z+5, r19	; 0x05
     dda:	24 83       	std	Z+4, r18	; 0x04
     ddc:	2e 85       	ldd	r18, Y+14	; 0x0e
     dde:	3f 85       	ldd	r19, Y+15	; 0x0f
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	9f 81       	ldd	r25, Y+7	; 0x07
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
     df4:	f8 01       	movw	r30, r16
     df6:	37 83       	std	Z+7, r19	; 0x07
     df8:	26 83       	std	Z+6, r18	; 0x06
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <floor_measure>:
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e1a:	c3 eb       	ldi	r28, 0xB3	; 179
     e1c:	d1 e0       	ldi	r29, 0x01	; 1
     e1e:	0f ef       	ldi	r16, 0xFF	; 255
     e20:	13 e0       	ldi	r17, 0x03	; 3
     e22:	98 01       	movw	r18, r16
     e24:	28 1b       	sub	r18, r24
     e26:	39 0b       	sbc	r19, r25
     e28:	39 83       	std	Y+1, r19	; 0x01
     e2a:	28 83       	st	Y, r18
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e32:	98 01       	movw	r18, r16
     e34:	28 1b       	sub	r18, r24
     e36:	39 0b       	sbc	r19, r25
     e38:	3b 83       	std	Y+3, r19	; 0x03
     e3a:	2a 83       	std	Y+2, r18	; 0x02
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e42:	98 01       	movw	r18, r16
     e44:	28 1b       	sub	r18, r24
     e46:	39 0b       	sbc	r19, r25
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e52:	08 1b       	sub	r16, r24
     e54:	19 0b       	sbc	r17, r25
     e56:	1f 83       	std	Y+7, r17	; 0x07
     e58:	0e 83       	std	Y+6, r16	; 0x06
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e60:	2e 81       	ldd	r18, Y+6	; 0x06
     e62:	3f 81       	ldd	r19, Y+7	; 0x07
     e64:	21 50       	subi	r18, 0x01	; 1
     e66:	3c 4f       	sbci	r19, 0xFC	; 252
     e68:	28 1b       	sub	r18, r24
     e6a:	39 0b       	sbc	r19, r25
     e6c:	3f 83       	std	Y+7, r19	; 0x07
     e6e:	2e 83       	std	Y+6, r18	; 0x06
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	21 50       	subi	r18, 0x01	; 1
     e7c:	3c 4f       	sbci	r19, 0xFC	; 252
     e7e:	28 1b       	sub	r18, r24
     e80:	39 0b       	sbc	r19, r25
     e82:	3d 83       	std	Y+5, r19	; 0x05
     e84:	2c 83       	std	Y+4, r18	; 0x04
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     e8c:	2a 81       	ldd	r18, Y+2	; 0x02
     e8e:	3b 81       	ldd	r19, Y+3	; 0x03
     e90:	21 50       	subi	r18, 0x01	; 1
     e92:	3c 4f       	sbci	r19, 0xFC	; 252
     e94:	28 1b       	sub	r18, r24
     e96:	39 0b       	sbc	r19, r25
     e98:	3b 83       	std	Y+3, r19	; 0x03
     e9a:	2a 83       	std	Y+2, r18	; 0x02
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
     ea2:	28 81       	ld	r18, Y
     ea4:	39 81       	ldd	r19, Y+1	; 0x01
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	3c 4f       	sbci	r19, 0xFC	; 252
     eaa:	28 1b       	sub	r18, r24
     eac:	39 0b       	sbc	r19, r25
     eae:	39 83       	std	Y+1, r19	; 0x01
     eb0:	28 83       	st	Y, r18
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <floor_measure_diff>:
     ebc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 19 04 	call	0x832	; 0x832 <delay>
     ece:	0e 94 06 07 	call	0xe0c	; 0xe0c <floor_measure>
     ed2:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floor_relative>
     ed6:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <floor_relative+0x1>
     eda:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <floor_absolute+0x1>
     ede:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <floor_absolute>
     ee2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floor_relative+0x2>
     ee6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floor_relative+0x3>
     eea:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <floor_absolute+0x3>
     eee:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <floor_absolute+0x2>
     ef2:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <floor_relative+0x4>
     ef6:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <floor_relative+0x5>
     efa:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <floor_absolute+0x5>
     efe:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <floor_absolute+0x4>
     f02:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <floor_relative+0x6>
     f06:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <floor_relative+0x7>
     f0a:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <floor_absolute+0x7>
     f0e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <floor_absolute+0x6>
     f12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f16:	80 64       	ori	r24, 0x40	; 64
     f18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 19 04 	call	0x832	; 0x832 <delay>
     f24:	0e 94 06 07 	call	0xe0c	; 0xe0c <floor_measure>
     f28:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floor_relative>
     f2c:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <floor_relative+0x1>
     f30:	20 91 bb 01 	lds	r18, 0x01BB	; 0x8001bb <floor_absolute>
     f34:	30 91 bc 01 	lds	r19, 0x01BC	; 0x8001bc <floor_absolute+0x1>
     f38:	82 17       	cp	r24, r18
     f3a:	93 07       	cpc	r25, r19
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <floor_measure_diff+0x84>
     f3e:	9c 01       	movw	r18, r24
     f40:	82 1b       	sub	r24, r18
     f42:	93 0b       	sbc	r25, r19
     f44:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <floor_relative+0x1>
     f48:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <floor_relative>
     f4c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floor_relative+0x2>
     f50:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floor_relative+0x3>
     f54:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <floor_absolute+0x2>
     f58:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <floor_absolute+0x3>
     f5c:	82 17       	cp	r24, r18
     f5e:	93 07       	cpc	r25, r19
     f60:	08 f4       	brcc	.+2      	; 0xf64 <floor_measure_diff+0xa8>
     f62:	9c 01       	movw	r18, r24
     f64:	82 1b       	sub	r24, r18
     f66:	93 0b       	sbc	r25, r19
     f68:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <floor_relative+0x3>
     f6c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <floor_relative+0x2>
     f70:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <floor_relative+0x4>
     f74:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <floor_relative+0x5>
     f78:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <floor_absolute+0x4>
     f7c:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <floor_absolute+0x5>
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	08 f4       	brcc	.+2      	; 0xf88 <floor_measure_diff+0xcc>
     f86:	9c 01       	movw	r18, r24
     f88:	82 1b       	sub	r24, r18
     f8a:	93 0b       	sbc	r25, r19
     f8c:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <floor_relative+0x5>
     f90:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <floor_relative+0x4>
     f94:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <floor_relative+0x6>
     f98:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <floor_relative+0x7>
     f9c:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <floor_absolute+0x6>
     fa0:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <floor_absolute+0x7>
     fa4:	82 17       	cp	r24, r18
     fa6:	93 07       	cpc	r25, r19
     fa8:	08 f4       	brcc	.+2      	; 0xfac <floor_measure_diff+0xf0>
     faa:	9c 01       	movw	r18, r24
     fac:	82 1b       	sub	r24, r18
     fae:	93 0b       	sbc	r25, r19
     fb0:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <floor_relative+0x7>
     fb4:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <floor_relative+0x6>
     fb8:	08 95       	ret

00000fba <floor_update>:
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	0e 94 5e 07 	call	0xebc	; 0xebc <floor_measure_diff>
     fce:	e3 eb       	ldi	r30, 0xB3	; 179
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	43 ea       	ldi	r20, 0xA3	; 163
     fd4:	51 e0       	ldi	r21, 0x01	; 1
     fd6:	da 01       	movw	r26, r20
     fd8:	8d 91       	ld	r24, X+
     fda:	9c 91       	ld	r25, X
     fdc:	24 e0       	ldi	r18, 0x04	; 4
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	2a 95       	dec	r18
     fe4:	e1 f7       	brne	.-8      	; 0xfde <floor_update+0x24>
     fe6:	20 81       	ld	r18, Z
     fe8:	31 81       	ldd	r19, Z+1	; 0x01
     fea:	28 1b       	sub	r18, r24
     fec:	39 0b       	sbc	r19, r25
     fee:	c0 e0       	ldi	r28, 0x00	; 0
     ff0:	d1 e0       	ldi	r29, 0x01	; 1
     ff2:	c8 80       	ld	r12, Y
     ff4:	d9 80       	ldd	r13, Y+1	; 0x01
     ff6:	d6 01       	movw	r26, r12
     ff8:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
     ffc:	bb 27       	eor	r27, r27
     ffe:	a9 2f       	mov	r26, r25
    1000:	98 2f       	mov	r25, r24
    1002:	87 2f       	mov	r24, r23
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
    1008:	da 01       	movw	r26, r20
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	8d 91       	ld	r24, X+
    100e:	9c 91       	ld	r25, X
    1010:	13 97       	sbiw	r26, 0x03	; 3
    1012:	64 e0       	ldi	r22, 0x04	; 4
    1014:	96 95       	lsr	r25
    1016:	87 95       	ror	r24
    1018:	6a 95       	dec	r22
    101a:	e1 f7       	brne	.-8      	; 0x1014 <floor_update+0x5a>
    101c:	22 81       	ldd	r18, Z+2	; 0x02
    101e:	33 81       	ldd	r19, Z+3	; 0x03
    1020:	28 1b       	sub	r18, r24
    1022:	39 0b       	sbc	r19, r25
    1024:	ea 80       	ldd	r14, Y+2	; 0x02
    1026:	fb 80       	ldd	r15, Y+3	; 0x03
    1028:	d7 01       	movw	r26, r14
    102a:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    102e:	bb 27       	eor	r27, r27
    1030:	a9 2f       	mov	r26, r25
    1032:	98 2f       	mov	r25, r24
    1034:	87 2f       	mov	r24, r23
    1036:	93 83       	std	Z+3, r25	; 0x03
    1038:	82 83       	std	Z+2, r24	; 0x02
    103a:	da 01       	movw	r26, r20
    103c:	14 96       	adiw	r26, 0x04	; 4
    103e:	8d 91       	ld	r24, X+
    1040:	9c 91       	ld	r25, X
    1042:	15 97       	sbiw	r26, 0x05	; 5
    1044:	b4 e0       	ldi	r27, 0x04	; 4
    1046:	96 95       	lsr	r25
    1048:	87 95       	ror	r24
    104a:	ba 95       	dec	r27
    104c:	e1 f7       	brne	.-8      	; 0x1046 <floor_update+0x8c>
    104e:	24 81       	ldd	r18, Z+4	; 0x04
    1050:	35 81       	ldd	r19, Z+5	; 0x05
    1052:	28 1b       	sub	r18, r24
    1054:	39 0b       	sbc	r19, r25
    1056:	0c 81       	ldd	r16, Y+4	; 0x04
    1058:	1d 81       	ldd	r17, Y+5	; 0x05
    105a:	d8 01       	movw	r26, r16
    105c:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    1060:	bb 27       	eor	r27, r27
    1062:	a9 2f       	mov	r26, r25
    1064:	98 2f       	mov	r25, r24
    1066:	87 2f       	mov	r24, r23
    1068:	95 83       	std	Z+5, r25	; 0x05
    106a:	84 83       	std	Z+4, r24	; 0x04
    106c:	da 01       	movw	r26, r20
    106e:	16 96       	adiw	r26, 0x06	; 6
    1070:	8d 91       	ld	r24, X+
    1072:	9c 91       	ld	r25, X
    1074:	17 97       	sbiw	r26, 0x07	; 7
    1076:	34 e0       	ldi	r19, 0x04	; 4
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	3a 95       	dec	r19
    107e:	e1 f7       	brne	.-8      	; 0x1078 <floor_update+0xbe>
    1080:	26 81       	ldd	r18, Z+6	; 0x06
    1082:	37 81       	ldd	r19, Z+7	; 0x07
    1084:	28 1b       	sub	r18, r24
    1086:	39 0b       	sbc	r19, r25
    1088:	4e 81       	ldd	r20, Y+6	; 0x06
    108a:	5f 81       	ldd	r21, Y+7	; 0x07
    108c:	da 01       	movw	r26, r20
    108e:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    1092:	bb 27       	eor	r27, r27
    1094:	a9 2f       	mov	r26, r25
    1096:	98 2f       	mov	r25, r24
    1098:	87 2f       	mov	r24, r23
    109a:	97 83       	std	Z+7, r25	; 0x07
    109c:	86 83       	std	Z+6, r24	; 0x06
    109e:	eb eb       	ldi	r30, 0xBB	; 187
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	a0 81       	ld	r26, Z
    10a4:	b1 81       	ldd	r27, Z+1	; 0x01
    10a6:	96 01       	movw	r18, r12
    10a8:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    10ac:	bb 27       	eor	r27, r27
    10ae:	a9 2f       	mov	r26, r25
    10b0:	98 2f       	mov	r25, r24
    10b2:	87 2f       	mov	r24, r23
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
    10b8:	a2 81       	ldd	r26, Z+2	; 0x02
    10ba:	b3 81       	ldd	r27, Z+3	; 0x03
    10bc:	97 01       	movw	r18, r14
    10be:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    10c2:	bb 27       	eor	r27, r27
    10c4:	a9 2f       	mov	r26, r25
    10c6:	98 2f       	mov	r25, r24
    10c8:	87 2f       	mov	r24, r23
    10ca:	93 83       	std	Z+3, r25	; 0x03
    10cc:	82 83       	std	Z+2, r24	; 0x02
    10ce:	a4 81       	ldd	r26, Z+4	; 0x04
    10d0:	b5 81       	ldd	r27, Z+5	; 0x05
    10d2:	98 01       	movw	r18, r16
    10d4:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    10d8:	bb 27       	eor	r27, r27
    10da:	a9 2f       	mov	r26, r25
    10dc:	98 2f       	mov	r25, r24
    10de:	87 2f       	mov	r24, r23
    10e0:	95 83       	std	Z+5, r25	; 0x05
    10e2:	84 83       	std	Z+4, r24	; 0x04
    10e4:	a6 81       	ldd	r26, Z+6	; 0x06
    10e6:	b7 81       	ldd	r27, Z+7	; 0x07
    10e8:	9a 01       	movw	r18, r20
    10ea:	0e 94 94 0b 	call	0x1728	; 0x1728 <__umulhisi3>
    10ee:	bb 27       	eor	r27, r27
    10f0:	a9 2f       	mov	r26, r25
    10f2:	98 2f       	mov	r25, r24
    10f4:	87 2f       	mov	r24, r23
    10f6:	97 83       	std	Z+7, r25	; 0x07
    10f8:	86 83       	std	Z+6, r24	; 0x06
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	08 95       	ret

0000110c <floor_calibrateBlack>:
    110c:	cf 93       	push	r28
    110e:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <line_cal+0x1>
    1112:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <line_cal>
    1116:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <line_cal+0x3>
    111a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <line_cal+0x2>
    111e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <line_cal+0x5>
    1122:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <line_cal+0x4>
    1126:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <line_cal+0x7>
    112a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <line_cal+0x6>
    112e:	c0 e1       	ldi	r28, 0x10	; 16
    1130:	0e 94 5e 07 	call	0xebc	; 0xebc <floor_measure_diff>
    1134:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <line_cal>
    1138:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <line_cal+0x1>
    113c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floor_relative>
    1140:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <floor_relative+0x1>
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <line_cal+0x1>
    114c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <line_cal>
    1150:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <line_cal+0x2>
    1154:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <line_cal+0x3>
    1158:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floor_relative+0x2>
    115c:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floor_relative+0x3>
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <line_cal+0x3>
    1168:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <line_cal+0x2>
    116c:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <line_cal+0x4>
    1170:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <line_cal+0x5>
    1174:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <floor_relative+0x4>
    1178:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <floor_relative+0x5>
    117c:	82 0f       	add	r24, r18
    117e:	93 1f       	adc	r25, r19
    1180:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <line_cal+0x5>
    1184:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <line_cal+0x4>
    1188:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <line_cal+0x6>
    118c:	30 91 aa 01 	lds	r19, 0x01AA	; 0x8001aa <line_cal+0x7>
    1190:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <floor_relative+0x6>
    1194:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <floor_relative+0x7>
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <line_cal+0x7>
    11a0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <line_cal+0x6>
    11a4:	c1 50       	subi	r28, 0x01	; 1
    11a6:	21 f6       	brne	.-120    	; 0x1130 <floor_calibrateBlack+0x24>
    11a8:	cf 91       	pop	r28
    11aa:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <floor_calibrateUpdate>

000011ae <floor_calibrateWhite>:
    11ae:	cf 93       	push	r28
    11b0:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <line_cal+0x9>
    11b4:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <line_cal+0x8>
    11b8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <line_cal+0xb>
    11bc:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <line_cal+0xa>
    11c0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <line_cal+0xd>
    11c4:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <line_cal+0xc>
    11c8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <line_cal+0xf>
    11cc:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <line_cal+0xe>
    11d0:	c0 e1       	ldi	r28, 0x10	; 16
    11d2:	0e 94 5e 07 	call	0xebc	; 0xebc <floor_measure_diff>
    11d6:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <line_cal+0x8>
    11da:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <line_cal+0x9>
    11de:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <floor_relative>
    11e2:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <floor_relative+0x1>
    11e6:	82 0f       	add	r24, r18
    11e8:	93 1f       	adc	r25, r19
    11ea:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <line_cal+0x9>
    11ee:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <line_cal+0x8>
    11f2:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <line_cal+0xa>
    11f6:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <line_cal+0xb>
    11fa:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <floor_relative+0x2>
    11fe:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <floor_relative+0x3>
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <line_cal+0xb>
    120a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <line_cal+0xa>
    120e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <line_cal+0xc>
    1212:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <line_cal+0xd>
    1216:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <floor_relative+0x4>
    121a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <floor_relative+0x5>
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <line_cal+0xd>
    1226:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <line_cal+0xc>
    122a:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <line_cal+0xe>
    122e:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <line_cal+0xf>
    1232:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <floor_relative+0x6>
    1236:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <floor_relative+0x7>
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <line_cal+0xf>
    1242:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <line_cal+0xe>
    1246:	c1 50       	subi	r28, 0x01	; 1
    1248:	21 f6       	brne	.-120    	; 0x11d2 <floor_calibrateWhite+0x24>
    124a:	cf 91       	pop	r28
    124c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <floor_calibrateUpdate>

00001250 <floor_readPersistent>:
    1250:	40 e1       	ldi	r20, 0x10	; 16
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	83 ea       	ldi	r24, 0xA3	; 163
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <eeprom_read_block>
    1260:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <line_cal>
    1264:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <line_cal+0x1>
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	11 f5       	brne	.+68     	; 0x12b0 <floor_readPersistent+0x60>
    126c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <line_cal+0x1>
    1270:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <line_cal>
    1274:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <line_cal+0x3>
    1278:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <line_cal+0x2>
    127c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <line_cal+0x5>
    1280:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <line_cal+0x4>
    1284:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <line_cal+0x7>
    1288:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <line_cal+0x6>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <line_cal+0x9>
    1294:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <line_cal+0x8>
    1298:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <line_cal+0xb>
    129c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <line_cal+0xa>
    12a0:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <line_cal+0xd>
    12a4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <line_cal+0xc>
    12a8:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <line_cal+0xf>
    12ac:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <line_cal+0xe>
    12b0:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <floor_calibrateUpdate>

000012b4 <floor_init>:
    12b4:	0e 94 28 09 	call	0x1250	; 0x1250 <floor_readPersistent>
    12b8:	e2 e6       	ldi	r30, 0x62	; 98
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 7b       	andi	r24, 0xBF	; 191
    12c0:	80 83       	st	Z, r24
    12c2:	e1 e6       	ldi	r30, 0x61	; 97
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	80 83       	st	Z, r24
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 8f 0a 	call	0x151e	; 0x151e <adc_init>
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	0e 94 8f 0a 	call	0x151e	; 0x151e <adc_init>
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 8f 0a 	call	0x151e	; 0x151e <adc_init>
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <adc_init>

000012e4 <floor_writePersistent>:
    12e4:	40 e1       	ldi	r20, 0x10	; 16
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	83 ea       	ldi	r24, 0xA3	; 163
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <eeprom_write_block>

000012f4 <bot_init>:
    12f4:	8f 9a       	sbi	0x11, 7	; 17
    12f6:	97 98       	cbi	0x12, 7	; 18
    12f8:	8a e0       	ldi	r24, 0x0A	; 10
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 19 04 	call	0x832	; 0x832 <delay>
    1300:	97 9a       	sbi	0x12, 7	; 18
    1302:	84 e6       	ldi	r24, 0x64	; 100
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0c 94 19 04 	jmp	0x832	; 0x832 <delay>

0000130a <bot_update>:
    130a:	87 e0       	ldi	r24, 0x07	; 7
    130c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <adc_read>
    1310:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <bot_supply+0x1>
    1314:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <bot_supply>
    1318:	08 95       	ret

0000131a <leds_init>:
    131a:	bf 9a       	sbi	0x17, 7	; 23
    131c:	c7 9a       	sbi	0x18, 7	; 24
    131e:	bd 9a       	sbi	0x17, 5	; 23
    1320:	be 9a       	sbi	0x17, 6	; 23
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	82 b9       	out	0x02, r24	; 2
    1326:	84 bb       	out	0x14, r24	; 20
    1328:	08 95       	ret

0000132a <leds_set_status>:
    132a:	95 b3       	in	r25, 0x15	; 21
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	06 2e       	mov	r0, r22
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <leds_set_status+0xc>
    1334:	22 0f       	add	r18, r18
    1336:	0a 94       	dec	r0
    1338:	ea f7       	brpl	.-6      	; 0x1334 <leds_set_status+0xa>
    133a:	80 ff       	sbrs	r24, 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <leds_set_status+0x18>
    133e:	29 2b       	or	r18, r25
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <leds_set_status+0x1c>
    1342:	20 95       	com	r18
    1344:	29 23       	and	r18, r25
    1346:	25 bb       	out	0x15, r18	; 21
    1348:	23 b1       	in	r18, 0x03	; 3
    134a:	81 ff       	sbrs	r24, 1
    134c:	08 c0       	rjmp	.+16     	; 0x135e <leds_set_status+0x34>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <leds_set_status+0x2c>
    1354:	88 0f       	add	r24, r24
    1356:	6a 95       	dec	r22
    1358:	ea f7       	brpl	.-6      	; 0x1354 <leds_set_status+0x2a>
    135a:	82 2b       	or	r24, r18
    135c:	08 c0       	rjmp	.+16     	; 0x136e <leds_set_status+0x44>
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <leds_set_status+0x3c>
    1364:	88 0f       	add	r24, r24
    1366:	6a 95       	dec	r22
    1368:	ea f7       	brpl	.-6      	; 0x1364 <leds_set_status+0x3a>
    136a:	80 95       	com	r24
    136c:	82 23       	and	r24, r18
    136e:	83 b9       	out	0x03, r24	; 3
    1370:	08 95       	ret

00001372 <leds_set_status_intensity>:
    1372:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <pwm_channel_C+0x1>
    1376:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <pwm_channel_C>
    137a:	08 95       	ret

0000137c <leds_get_status_intensity>:
    137c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <pwm_channel_C>
    1380:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <pwm_channel_C+0x1>
    1384:	08 95       	ret

00001386 <leds_set_headlights>:
    1386:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <pwm_channel_A+0x1>
    138a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <pwm_channel_A>
    138e:	08 95       	ret

00001390 <leds_get_headlights>:
    1390:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pwm_channel_A>
    1394:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pwm_channel_A+0x1>
    1398:	08 95       	ret

0000139a <leds_set_displaylight>:
    139a:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <pwm_channel_B+0x1>
    139e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pwm_channel_B>
    13a2:	08 95       	ret

000013a4 <leds_get_displaylight>:
    13a4:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pwm_channel_B>
    13a8:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pwm_channel_B+0x1>
    13ac:	08 95       	ret

000013ae <pwm_init>:
    13ae:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <pwm_timer_sub+0x1>
    13b2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <pwm_timer_sub>
    13b6:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <pwm_timer_ms+0x1>
    13ba:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <pwm_timer_ms>
    13be:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <pwm_timer_sec>
    13c2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <pwm_timer_sec+0x1>
    13c6:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <pwm_timer_sec+0x2>
    13ca:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <pwm_timer_sec+0x3>
    13ce:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <pwm_channel_A+0x1>
    13d2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <pwm_channel_A>
    13d6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <pwm_channel_B+0x1>
    13da:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <pwm_channel_B>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	93 e0       	ldi	r25, 0x03	; 3
    13e2:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <pwm_channel_C+0x1>
    13e6:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <pwm_channel_C>
    13ea:	c5 98       	cbi	0x18, 5	; 24
    13ec:	c6 98       	cbi	0x18, 6	; 24
    13ee:	bd 9a       	sbi	0x17, 5	; 23
    13f0:	be 9a       	sbi	0x17, 6	; 23
    13f2:	bf 9a       	sbi	0x17, 7	; 23
    13f4:	c7 9a       	sbi	0x18, 7	; 24
    13f6:	1d bc       	out	0x2d, r1	; 45
    13f8:	1c bc       	out	0x2c, r1	; 44
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	8f bd       	out	0x2f, r24	; 47
    13fe:	82 e1       	ldi	r24, 0x12	; 18
    1400:	8e bd       	out	0x2e, r24	; 46
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	94 e0       	ldi	r25, 0x04	; 4
    1406:	97 bd       	out	0x27, r25	; 39
    1408:	86 bd       	out	0x26, r24	; 38
    140a:	87 b7       	in	r24, 0x37	; 55
    140c:	84 60       	ori	r24, 0x04	; 4
    140e:	87 bf       	out	0x37, r24	; 55
    1410:	08 95       	ret

00001412 <__vector_14>:
    1412:	1f 92       	push	r1
    1414:	0f 92       	push	r0
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	0f 92       	push	r0
    141a:	11 24       	eor	r1, r1
    141c:	2f 93       	push	r18
    141e:	3f 93       	push	r19
    1420:	4f 93       	push	r20
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <pwm_timer_sub>
    142e:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <pwm_timer_sub+0x1>
    1432:	9c 01       	movw	r18, r24
    1434:	28 5e       	subi	r18, 0xE8	; 232
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	28 3e       	cpi	r18, 0xE8	; 232
    143a:	43 e0       	ldi	r20, 0x03	; 3
    143c:	34 07       	cpc	r19, r20
    143e:	28 f4       	brcc	.+10     	; 0x144a <__vector_14+0x38>
    1440:	30 93 ce 01 	sts	0x01CE, r19	; 0x8001ce <pwm_timer_sub+0x1>
    1444:	20 93 cd 01 	sts	0x01CD, r18	; 0x8001cd <pwm_timer_sub>
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <__vector_14+0x56>
    144a:	80 5d       	subi	r24, 0xD0	; 208
    144c:	93 40       	sbci	r25, 0x03	; 3
    144e:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <pwm_timer_sub+0x1>
    1452:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <pwm_timer_sub>
    1456:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pwm_timer_ms>
    145a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pwm_timer_ms+0x1>
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pwm_timer_ms+0x1>
    1464:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pwm_timer_ms>
    1468:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pwm_timer_ms>
    146c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pwm_timer_ms+0x1>
    1470:	9c 01       	movw	r18, r24
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	28 3e       	cpi	r18, 0xE8	; 232
    1478:	43 e0       	ldi	r20, 0x03	; 3
    147a:	34 07       	cpc	r19, r20
    147c:	28 f4       	brcc	.+10     	; 0x1488 <__vector_14+0x76>
    147e:	30 93 ca 01 	sts	0x01CA, r19	; 0x8001ca <pwm_timer_ms+0x1>
    1482:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <pwm_timer_ms>
    1486:	19 c0       	rjmp	.+50     	; 0x14ba <__vector_14+0xa8>
    1488:	87 5e       	subi	r24, 0xE7	; 231
    148a:	93 40       	sbci	r25, 0x03	; 3
    148c:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pwm_timer_ms+0x1>
    1490:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pwm_timer_ms>
    1494:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <pwm_timer_sec>
    1498:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <pwm_timer_sec+0x1>
    149c:	a0 91 d1 01 	lds	r26, 0x01D1	; 0x8001d1 <pwm_timer_sec+0x2>
    14a0:	b0 91 d2 01 	lds	r27, 0x01D2	; 0x8001d2 <pwm_timer_sec+0x3>
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	a1 1d       	adc	r26, r1
    14a8:	b1 1d       	adc	r27, r1
    14aa:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <pwm_timer_sec>
    14ae:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <pwm_timer_sec+0x1>
    14b2:	a0 93 d1 01 	sts	0x01D1, r26	; 0x8001d1 <pwm_timer_sec+0x2>
    14b6:	b0 93 d2 01 	sts	0x01D2, r27	; 0x8001d2 <pwm_timer_sec+0x3>
    14ba:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pwm_channel_A>
    14be:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pwm_channel_A+0x1>
    14c2:	8f 3f       	cpi	r24, 0xFF	; 255
    14c4:	23 e0       	ldi	r18, 0x03	; 3
    14c6:	92 07       	cpc	r25, r18
    14c8:	10 f0       	brcs	.+4      	; 0x14ce <__vector_14+0xbc>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	9b bd       	out	0x2b, r25	; 43
    14d0:	8a bd       	out	0x2a, r24	; 42
    14d2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pwm_channel_B>
    14d6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pwm_channel_B+0x1>
    14da:	8f 3f       	cpi	r24, 0xFF	; 255
    14dc:	43 e0       	ldi	r20, 0x03	; 3
    14de:	94 07       	cpc	r25, r20
    14e0:	10 f0       	brcs	.+4      	; 0x14e6 <__vector_14+0xd4>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	99 bd       	out	0x29, r25	; 41
    14e8:	88 bd       	out	0x28, r24	; 40
    14ea:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <pwm_channel_C>
    14ee:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <pwm_channel_C+0x1>
    14f2:	8f 3f       	cpi	r24, 0xFF	; 255
    14f4:	23 e0       	ldi	r18, 0x03	; 3
    14f6:	92 07       	cpc	r25, r18
    14f8:	10 f0       	brcs	.+4      	; 0x14fe <__vector_14+0xec>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	94 e0       	ldi	r25, 0x04	; 4
    14fe:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1502:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <adc_init>:
    151e:	e1 e6       	ldi	r30, 0x61	; 97
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	90 81       	ld	r25, Z
    1524:	21 e0       	ldi	r18, 0x01	; 1
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	01 c0       	rjmp	.+2      	; 0x152c <adc_init+0xe>
    152a:	22 0f       	add	r18, r18
    152c:	8a 95       	dec	r24
    152e:	ea f7       	brpl	.-6      	; 0x152a <adc_init+0xc>
    1530:	20 95       	com	r18
    1532:	92 23       	and	r25, r18
    1534:	90 83       	st	Z, r25
    1536:	e2 e6       	ldi	r30, 0x62	; 98
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	28 23       	and	r18, r24
    153e:	20 83       	st	Z, r18
    1540:	08 95       	ret

00001542 <adc_read>:
    1542:	90 e4       	ldi	r25, 0x40	; 64
    1544:	97 b9       	out	0x07, r25	; 7
    1546:	97 b1       	in	r25, 0x07	; 7
    1548:	87 70       	andi	r24, 0x07	; 7
    154a:	98 2b       	or	r25, r24
    154c:	97 b9       	out	0x07, r25	; 7
    154e:	87 ec       	ldi	r24, 0xC7	; 199
    1550:	86 b9       	out	0x06, r24	; 6
    1552:	36 9b       	sbis	0x06, 6	; 6
    1554:	02 c0       	rjmp	.+4      	; 0x155a <adc_read+0x18>
    1556:	00 00       	nop
    1558:	fc cf       	rjmp	.-8      	; 0x1552 <adc_read+0x10>
    155a:	24 b1       	in	r18, 0x04	; 4
    155c:	85 b1       	in	r24, 0x05	; 5
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	98 2f       	mov	r25, r24
    1562:	88 27       	eor	r24, r24
    1564:	82 0f       	add	r24, r18
    1566:	91 1d       	adc	r25, r1
    1568:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <adc_random_seed>
    156c:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <adc_random_seed+0x1>
    1570:	28 0f       	add	r18, r24
    1572:	39 1f       	adc	r19, r25
    1574:	30 93 d4 01 	sts	0x01D4, r19	; 0x8001d4 <adc_random_seed+0x1>
    1578:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <adc_random_seed>
    157c:	08 95       	ret

0000157e <adc_get_random_seed>:
    157e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <adc_random_seed>
    1582:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <adc_random_seed+0x1>
    1586:	08 95       	ret

00001588 <uart0_set_baudrate>:
    1588:	9c 01       	movw	r18, r24
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	44 1f       	adc	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	8a 95       	dec	r24
    159a:	d1 f7       	brne	.-12     	; 0x1590 <uart0_set_baudrate+0x8>
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	74 e2       	ldi	r23, 0x24	; 36
    15a0:	84 ef       	ldi	r24, 0xF4	; 244
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__udivmodsi4>
    15a8:	21 50       	subi	r18, 0x01	; 1
    15aa:	30 40       	sbci	r19, 0x00	; 0
    15ac:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    15b0:	29 b9       	out	0x09, r18	; 9
    15b2:	08 95       	ret

000015b4 <uart0_getchar>:
    15b4:	f8 94       	cli
    15b6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <uart0_rxbuf_begin>
    15ba:	e9 2f       	mov	r30, r25
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	ea 52       	subi	r30, 0x2A	; 42
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	80 81       	ld	r24, Z
    15c4:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <uart0_rxbuf_end>
    15c8:	28 30       	cpi	r18, 0x08	; 8
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <uart0_getchar+0x1c>
    15cc:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <uart0_rxbuf_end>
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <uart0_rxbuf_begin>
    15d6:	98 30       	cpi	r25, 0x08	; 8
    15d8:	10 f0       	brcs	.+4      	; 0x15de <uart0_getchar+0x2a>
    15da:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <uart0_rxbuf_begin>
    15de:	78 94       	sei
    15e0:	08 95       	ret

000015e2 <uart0_putchar>:
    15e2:	f8 94       	cli
    15e4:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <uart0_txbuf_end>
    15e8:	e9 2f       	mov	r30, r25
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	e2 52       	subi	r30, 0x22	; 34
    15ee:	fe 4f       	sbci	r31, 0xFE	; 254
    15f0:	80 83       	st	Z, r24
    15f2:	9f 5f       	subi	r25, 0xFF	; 255
    15f4:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <uart0_txbuf_end>
    15f8:	98 30       	cpi	r25, 0x08	; 8
    15fa:	10 f0       	brcs	.+4      	; 0x1600 <uart0_putchar+0x1e>
    15fc:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <uart0_txbuf_end>
    1600:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <uart0_txbuf_end>
    1604:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <uart0_txbuf_begin>
    1608:	29 17       	cp	r18, r25
    160a:	19 f4       	brne	.+6      	; 0x1612 <uart0_putchar+0x30>
    160c:	98 e0       	ldi	r25, 0x08	; 8
    160e:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <uart0_txbuf_end>
    1612:	55 9a       	sbi	0x0a, 5	; 10
    1614:	78 94       	sei
    1616:	08 95       	ret

00001618 <uart0_enable>:
    1618:	88 eb       	ldi	r24, 0xB8	; 184
    161a:	8a b9       	out	0x0a, r24	; 10
    161c:	08 95       	ret

0000161e <uart0_disable>:
    161e:	1a b8       	out	0x0a, r1	; 10
    1620:	08 95       	ret

00001622 <__vector_18>:
    1622:	1f 92       	push	r1
    1624:	0f 92       	push	r0
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	0f 92       	push	r0
    162a:	0b b6       	in	r0, 0x3b	; 59
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
    1638:	9c b1       	in	r25, 0x0c	; 12
    163a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <uart0_rxbuf_end>
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	a9 f0       	breq	.+42     	; 0x166c <__vector_18+0x4a>
    1642:	e8 2f       	mov	r30, r24
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	ea 52       	subi	r30, 0x2A	; 42
    1648:	fe 4f       	sbci	r31, 0xFE	; 254
    164a:	90 83       	st	Z, r25
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <uart0_rxbuf_end>
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	10 f0       	brcs	.+4      	; 0x165a <__vector_18+0x38>
    1656:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <uart0_rxbuf_end>
    165a:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <uart0_rxbuf_end>
    165e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <uart0_rxbuf_begin>
    1662:	98 17       	cp	r25, r24
    1664:	19 f4       	brne	.+6      	; 0x166c <__vector_18+0x4a>
    1666:	88 e0       	ldi	r24, 0x08	; 8
    1668:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <uart0_rxbuf_end>
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	0f 90       	pop	r0
    1676:	0b be       	out	0x3b, r0	; 59
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_19>:
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	0b b6       	in	r0, 0x3b	; 59
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <uart0_txbuf_begin>
    169e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <uart0_txbuf_end>
    16a2:	89 17       	cp	r24, r25
    16a4:	91 f0       	breq	.+36     	; 0x16ca <__vector_19+0x48>
    16a6:	e8 2f       	mov	r30, r24
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	e2 52       	subi	r30, 0x22	; 34
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	20 81       	ld	r18, Z
    16b0:	98 30       	cpi	r25, 0x08	; 8
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <__vector_19+0x36>
    16b4:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <uart0_txbuf_end>
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <uart0_txbuf_begin>
    16be:	88 30       	cpi	r24, 0x08	; 8
    16c0:	10 f0       	brcs	.+4      	; 0x16c6 <__vector_19+0x44>
    16c2:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <uart0_txbuf_begin>
    16c6:	2c b9       	out	0x0c, r18	; 12
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <__vector_19+0x4a>
    16ca:	55 98       	cbi	0x0a, 5	; 10
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0b be       	out	0x3b, r0	; 59
    16da:	0f 90       	pop	r0
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	0f 90       	pop	r0
    16e0:	1f 90       	pop	r1
    16e2:	18 95       	reti

000016e4 <__udivmodsi4>:
    16e4:	a1 e2       	ldi	r26, 0x21	; 33
    16e6:	1a 2e       	mov	r1, r26
    16e8:	aa 1b       	sub	r26, r26
    16ea:	bb 1b       	sub	r27, r27
    16ec:	fd 01       	movw	r30, r26
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <__udivmodsi4_ep>

000016f0 <__udivmodsi4_loop>:
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	ee 1f       	adc	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	a2 17       	cp	r26, r18
    16fa:	b3 07       	cpc	r27, r19
    16fc:	e4 07       	cpc	r30, r20
    16fe:	f5 07       	cpc	r31, r21
    1700:	20 f0       	brcs	.+8      	; 0x170a <__udivmodsi4_ep>
    1702:	a2 1b       	sub	r26, r18
    1704:	b3 0b       	sbc	r27, r19
    1706:	e4 0b       	sbc	r30, r20
    1708:	f5 0b       	sbc	r31, r21

0000170a <__udivmodsi4_ep>:
    170a:	66 1f       	adc	r22, r22
    170c:	77 1f       	adc	r23, r23
    170e:	88 1f       	adc	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	1a 94       	dec	r1
    1714:	69 f7       	brne	.-38     	; 0x16f0 <__udivmodsi4_loop>
    1716:	60 95       	com	r22
    1718:	70 95       	com	r23
    171a:	80 95       	com	r24
    171c:	90 95       	com	r25
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	bd 01       	movw	r22, r26
    1724:	cf 01       	movw	r24, r30
    1726:	08 95       	ret

00001728 <__umulhisi3>:
    1728:	a2 9f       	mul	r26, r18
    172a:	b0 01       	movw	r22, r0
    172c:	b3 9f       	mul	r27, r19
    172e:	c0 01       	movw	r24, r0
    1730:	a3 9f       	mul	r26, r19
    1732:	70 0d       	add	r23, r0
    1734:	81 1d       	adc	r24, r1
    1736:	11 24       	eor	r1, r1
    1738:	91 1d       	adc	r25, r1
    173a:	b2 9f       	mul	r27, r18
    173c:	70 0d       	add	r23, r0
    173e:	81 1d       	adc	r24, r1
    1740:	11 24       	eor	r1, r1
    1742:	91 1d       	adc	r25, r1
    1744:	08 95       	ret

00001746 <eeprom_read_block>:
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22

0000174a <eeprom_read_blraw>:
    174a:	fc 01       	movw	r30, r24
    174c:	e1 99       	sbic	0x1c, 1	; 28
    174e:	fe cf       	rjmp	.-4      	; 0x174c <eeprom_read_blraw+0x2>
    1750:	06 c0       	rjmp	.+12     	; 0x175e <eeprom_read_blraw+0x14>
    1752:	ff bb       	out	0x1f, r31	; 31
    1754:	ee bb       	out	0x1e, r30	; 30
    1756:	e0 9a       	sbi	0x1c, 0	; 28
    1758:	31 96       	adiw	r30, 0x01	; 1
    175a:	0d b2       	in	r0, 0x1d	; 29
    175c:	0d 92       	st	X+, r0
    175e:	41 50       	subi	r20, 0x01	; 1
    1760:	50 40       	sbci	r21, 0x00	; 0
    1762:	b8 f7       	brcc	.-18     	; 0x1752 <eeprom_read_blraw+0x8>
    1764:	08 95       	ret

00001766 <eeprom_write_block>:
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <eeprom_write_block+0xc>
    176c:	2d 91       	ld	r18, X+
    176e:	0e 94 be 0b 	call	0x177c	; 0x177c <eeprom_write_r18>
    1772:	41 50       	subi	r20, 0x01	; 1
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	d0 f7       	brcc	.-12     	; 0x176c <eeprom_write_block+0x6>
    1778:	08 95       	ret

0000177a <eeprom_write_byte>:
    177a:	26 2f       	mov	r18, r22

0000177c <eeprom_write_r18>:
    177c:	e1 99       	sbic	0x1c, 1	; 28
    177e:	fe cf       	rjmp	.-4      	; 0x177c <eeprom_write_r18>
    1780:	9f bb       	out	0x1f, r25	; 31
    1782:	8e bb       	out	0x1e, r24	; 30
    1784:	2d bb       	out	0x1d, r18	; 29
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	e2 9a       	sbi	0x1c, 2	; 28
    178c:	e1 9a       	sbi	0x1c, 1	; 28
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	08 95       	ret

00001794 <_exit>:
    1794:	f8 94       	cli

00001796 <__stop_program>:
    1796:	ff cf       	rjmp	.-2      	; 0x1796 <__stop_program>
