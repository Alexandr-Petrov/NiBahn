
Pflichtaufgaben.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  00002826  000028ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  008003a4  008003a4  00002b5e  2**0
                  ALLOC
  3 .stab         0000264c  00000000  00000000  00002b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013be  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000656a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000657c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000746a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_17>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	32 2e       	mov	r3, r18
      8e:	31 31       	cpi	r19, 0x11	; 17
	...

00000091 <bot_lib_revision>:
	...

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e6 e2       	ldi	r30, 0x26	; 38
      a6:	f8 e2       	ldi	r31, 0x28	; 40
      a8:	00 e0       	ldi	r16, 0x00	; 0
      aa:	0b bf       	out	0x3b, r16	; 59
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
      ae:	07 90       	elpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a4 3a       	cpi	r26, 0xA4	; 164
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
      b8:	24 e0       	ldi	r18, 0x04	; 4
      ba:	a4 ea       	ldi	r26, 0xA4	; 164
      bc:	b3 e0       	ldi	r27, 0x03	; 3
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a3 37       	cpi	r26, 0x73	; 115
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 10 03 	call	0x620	; 0x620 <main>
      cc:	0c 94 11 14 	jmp	0x2822	; 0x2822 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <findDirection>:
 *
 * Function for guiding the Nibo by determining the position of hindrances
 *
*/
void findDirection()
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <findDirection+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	int r;
	drive(); 	///Nibo goes forward
      de:	0e 94 96 02 	call	0x52c	; 0x52c <drive>
	showNibo(); ///Shows Nibo on display
      e2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <showNibo>
						 * timer - variable for counter: how long the Nibo
						 * rode from beginning to end of the tunnel
						 */
	///Tunnel
	/// If Nibo reached the end of the tunnel:
	if (copro_distance[0]/256 > 200 &&
      e6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
      ea:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
      ee:	81 15       	cp	r24, r1
      f0:	99 4c       	sbci	r25, 0xC9	; 201
      f2:	b0 f0       	brcs	.+44     	; 0x120 <findDirection+0x4c>
		copro_distance[2]/256 > 150 &&
      f4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
      f8:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
						 * timer - variable for counter: how long the Nibo
						 * rode from beginning to end of the tunnel
						 */
	///Tunnel
	/// If Nibo reached the end of the tunnel:
	if (copro_distance[0]/256 > 200 &&
      fc:	81 15       	cp	r24, r1
      fe:	97 49       	sbci	r25, 0x97	; 151
     100:	78 f0       	brcs	.+30     	; 0x120 <findDirection+0x4c>
		copro_distance[2]/256 > 150 &&
		copro_distance[4]/256 > 200)
     102:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     106:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
						 * rode from beginning to end of the tunnel
						 */
	///Tunnel
	/// If Nibo reached the end of the tunnel:
	if (copro_distance[0]/256 > 200 &&
		copro_distance[2]/256 > 150 &&
     10a:	81 15       	cp	r24, r1
     10c:	99 4c       	sbci	r25, 0xC9	; 201
     10e:	40 f0       	brcs	.+16     	; 0x120 <findDirection+0x4c>
		copro_distance[4]/256 > 200)
		{
			copro_stop();
     110:	0e 94 57 10 	call	0x20ae	; 0x20ae <copro_stop>
			flag=1; /// set flag to 1
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
     11c:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
		}
	///If Nibo rides forward through the tunnel:
	if (copro_distance[0]/256 > 150 &&
     120:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     124:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     128:	81 15       	cp	r24, r1
     12a:	97 49       	sbci	r25, 0x97	; 151
     12c:	78 f1       	brcs	.+94     	; 0x18c <findDirection+0xb8>
		copro_distance[4]/256 > 150)
     12e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     132:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		{
			copro_stop();
			flag=1; /// set flag to 1
		}
	///If Nibo rides forward through the tunnel:
	if (copro_distance[0]/256 > 150 &&
     136:	81 15       	cp	r24, r1
     138:	97 49       	sbci	r25, 0x97	; 151
     13a:	40 f1       	brcs	.+80     	; 0x18c <findDirection+0xb8>
		copro_distance[4]/256 > 150)
			{
				timer++; ///counter increases
     13c:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     140:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     14a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * If Nibo reached the end of the tunnel and the counter is not equal -2:
				 *
				 */
				if(flag==1 && timer!=-2)
     14e:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     152:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     156:	01 97       	sbiw	r24, 0x01	; 1
     158:	11 f5       	brne	.+68     	; 0x19e <findDirection+0xca>
     15a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     15e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     162:	02 96       	adiw	r24, 0x02	; 2
     164:	e1 f0       	breq	.+56     	; 0x19e <findDirection+0xca>
				{
					goBack(); ///Nibo goes back
     166:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <goBack>
					LEDShow('r', 0, 1); /// sets LEDs 0-1 to red
     16a:	41 e0       	ldi	r20, 0x01	; 1
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	82 e7       	ldi	r24, 0x72	; 114
     174:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
					timer--; ///counter decreases
     178:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     17c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     186:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * If Nibo reached the end of the tunnel and the counter is not equal -2:
				 *
				 */
				if(flag==1 && timer!=-2)
     18a:	09 c0       	rjmp	.+18     	; 0x19e <findDirection+0xca>
				}
			}
	///If Nibo left the tunnel:
	else
	{
		leds_set_status(LEDS_OFF, 0); /// switch off right back LED
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
		leds_set_status(LEDS_OFF, 1); /// switch off left back LED
     194:	61 e0       	ldi	r22, 0x01	; 1
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <findDirection+0xcc>

				/*
				 * If Nibo reached the end of the tunnel and the counter is not equal -2:
				 *
				 */
				if(flag==1 && timer!=-2)
     19e:	00 00       	nop
	{
		leds_set_status(LEDS_OFF, 0); /// switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// switch off left back LED
	}
	/// Exit from the tunnel. If a wall is on the right side:
	if (copro_distance[0]/256 > 50 &&
     1a0:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     1a4:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     1a8:	81 15       	cp	r24, r1
     1aa:	93 43       	sbci	r25, 0x33	; 51
     1ac:	10 f1       	brcs	.+68     	; 0x1f2 <findDirection+0x11e>
		copro_distance[4]/256 < 50 &&
     1ae:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     1b2:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
	{
		leds_set_status(LEDS_OFF, 0); /// switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// switch off left back LED
	}
	/// Exit from the tunnel. If a wall is on the right side:
	if (copro_distance[0]/256 > 50 &&
     1b6:	81 15       	cp	r24, r1
     1b8:	92 43       	sbci	r25, 0x32	; 50
     1ba:	d8 f4       	brcc	.+54     	; 0x1f2 <findDirection+0x11e>
		copro_distance[4]/256 < 50 &&
		flag==1)
     1bc:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     1c0:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		leds_set_status(LEDS_OFF, 0); /// switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// switch off left back LED
	}
	/// Exit from the tunnel. If a wall is on the right side:
	if (copro_distance[0]/256 > 50 &&
		copro_distance[4]/256 < 50 &&
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	a9 f4       	brne	.+42     	; 0x1f2 <findDirection+0x11e>
		flag==1)
		{
			turnLeft();/// Nibo turns left
     1c8:	0e 94 a4 02 	call	0x548	; 0x548 <turnLeft>
			LEDShow('g', 0, 1); /// sets LEDs 0-1 to green
     1cc:	41 e0       	ldi	r20, 0x01	; 1
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	87 e6       	ldi	r24, 0x67	; 103
     1d6:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			delay(1500); /// wait 1 second, Nibo turns
     1da:	8c ed       	ldi	r24, 0xDC	; 220
     1dc:	95 e0       	ldi	r25, 0x05	; 5
     1de:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
			flag=0; /// set flag to 0
     1e2:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     1e6:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// reset counter
     1ea:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     1ee:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>

		}
	/// Exit from the tunnel. Wall is on the left side:
	if (copro_distance[4]/256 > 50 &&
     1f2:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     1f6:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     1fa:	81 15       	cp	r24, r1
     1fc:	93 43       	sbci	r25, 0x33	; 51
     1fe:	10 f1       	brcs	.+68     	; 0x244 <findDirection+0x170>
		copro_distance[0]/256 < 50 &&
     200:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     204:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			flag=0; /// set flag to 0
			timer=0; /// reset counter

		}
	/// Exit from the tunnel. Wall is on the left side:
	if (copro_distance[4]/256 > 50 &&
     208:	81 15       	cp	r24, r1
     20a:	92 43       	sbci	r25, 0x32	; 50
     20c:	d8 f4       	brcc	.+54     	; 0x244 <findDirection+0x170>
		copro_distance[0]/256 < 50 &&
		flag==1)
     20e:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     212:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0; /// reset counter

		}
	/// Exit from the tunnel. Wall is on the left side:
	if (copro_distance[4]/256 > 50 &&
		copro_distance[0]/256 < 50 &&
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	a9 f4       	brne	.+42     	; 0x244 <findDirection+0x170>
		flag==1)
		{
			turnRight(); /// Nibo turns right
     21a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <turnRight>
			LEDShow('g', 0, 1); /// sets LEDs 0-1 to green
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			delay(1500); /// wait 1 second, Nibo turns
     22c:	8c ed       	ldi	r24, 0xDC	; 220
     22e:	95 e0       	ldi	r25, 0x05	; 5
     230:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
			flag=0; ///  set flag to 0
     234:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     238:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// reset counter
     23c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     240:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
	/// Exit from the tunnel. no walls, Nibo randomly chooses where to turn:
	if (copro_distance[4]/256 < 50 &&
     244:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     248:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     24c:	81 15       	cp	r24, r1
     24e:	92 43       	sbci	r25, 0x32	; 50
     250:	a8 f5       	brcc	.+106    	; 0x2bc <findDirection+0x1e8>
		copro_distance[0]/256 < 50 &&
     252:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     256:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			delay(1500); /// wait 1 second, Nibo turns
			flag=0; ///  set flag to 0
			timer=0; /// reset counter
		}
	/// Exit from the tunnel. no walls, Nibo randomly chooses where to turn:
	if (copro_distance[4]/256 < 50 &&
     25a:	81 15       	cp	r24, r1
     25c:	92 43       	sbci	r25, 0x32	; 50
     25e:	70 f5       	brcc	.+92     	; 0x2bc <findDirection+0x1e8>
		copro_distance[0]/256 < 50 &&
		flag==1)
     260:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     264:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			flag=0; ///  set flag to 0
			timer=0; /// reset counter
		}
	/// Exit from the tunnel. no walls, Nibo randomly chooses where to turn:
	if (copro_distance[4]/256 < 50 &&
		copro_distance[0]/256 < 50 &&
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	41 f5       	brne	.+80     	; 0x2bc <findDirection+0x1e8>
		flag==1)
		{
			r = rand() % 2; /// generate a number between 0 and 1
     26c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <rand>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	90 78       	andi	r25, 0x80	; 128
     274:	99 23       	and	r25, r25
     276:	24 f4       	brge	.+8      	; 0x280 <findDirection+0x1ac>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	8e 6f       	ori	r24, 0xFE	; 254
     27c:	9f 6f       	ori	r25, 0xFF	; 255
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	89 83       	std	Y+1, r24	; 0x01
			if(r==0){
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	9a 81       	ldd	r25, Y+2	; 0x02
     288:	89 2b       	or	r24, r25
     28a:	19 f4       	brne	.+6      	; 0x292 <findDirection+0x1be>
				turnLeft(); /// if the number is "0", Nibo turns left
     28c:	0e 94 a4 02 	call	0x548	; 0x548 <turnLeft>
     290:	02 c0       	rjmp	.+4      	; 0x296 <findDirection+0x1c2>
			}
			else{
				turnRight();/// if the number is not "0", Nibo turns right
     292:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <turnRight>
			}
			LEDShow('g', 0, 1); /// sets LEDs 0-1 to green
     296:	41 e0       	ldi	r20, 0x01	; 1
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	87 e6       	ldi	r24, 0x67	; 103
     2a0:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			delay(1500); /// wait 1 second, Nibo turns
     2a4:	8c ed       	ldi	r24, 0xDC	; 220
     2a6:	95 e0       	ldi	r25, 0x05	; 5
     2a8:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
			flag=0; /// set flag to 0
     2ac:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     2b0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0;/// reset counter
     2b4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     2b8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
		///Hindrance is right:
		if (copro_distance[0]/256 > 150 &&
     2bc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     2c0:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     2c4:	81 15       	cp	r24, r1
     2c6:	97 49       	sbci	r25, 0x97	; 151
     2c8:	80 f1       	brcs	.+96     	; 0x32a <findDirection+0x256>
			copro_distance[1]/256 > 100 &&
     2ca:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     2ce:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
			delay(1500); /// wait 1 second, Nibo turns
			flag=0; /// set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right:
		if (copro_distance[0]/256 > 150 &&
     2d2:	81 15       	cp	r24, r1
     2d4:	95 46       	sbci	r25, 0x65	; 101
     2d6:	48 f1       	brcs	.+82     	; 0x32a <findDirection+0x256>
			copro_distance[1]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     2d8:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     2dc:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
			flag=0; /// set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right:
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 100 &&
     2e0:	81 15       	cp	r24, r1
     2e2:	9b 4a       	sbci	r25, 0xAB	; 171
     2e4:	10 f1       	brcs	.+68     	; 0x32a <findDirection+0x256>
			copro_distance[2]/256 > 170 &&
			flag==0)
     2e6:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     2ea:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0;/// reset counter
		}
		///Hindrance is right:
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     2ee:	89 2b       	or	r24, r25
     2f0:	e1 f4       	brne	.+56     	; 0x32a <findDirection+0x256>
			flag==0)
		{
			LEDShow('r', 5, 7); ///set LEDs 5-7 to red
     2f2:	47 e0       	ldi	r20, 0x07	; 7
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	65 e0       	ldi	r22, 0x05	; 5
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	82 e7       	ldi	r24, 0x72	; 114
     2fc:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnLeft(); /// Nibo turns left on 90 degrees
     300:	0e 94 a4 02 	call	0x548	; 0x548 <turnLeft>
			hindranceShow(40, 50);///show the position of Hindrance
     304:	62 e3       	ldi	r22, 0x32	; 50
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
			hindranceShow(40, 30);
     310:	6e e1       	ldi	r22, 0x1E	; 30
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	88 e2       	ldi	r24, 0x28	; 40
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
			hindranceShow(65, 50);
     31c:	62 e3       	ldi	r22, 0x32	; 50
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	81 e4       	ldi	r24, 0x41	; 65
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
     328:	07 c0       	rjmp	.+14     	; 0x338 <findDirection+0x264>
		}
		else
		{
			LEDShow('g', 5, 7); /// if Hindrance is not right, set LEDs 5-7 to green
     32a:	47 e0       	ldi	r20, 0x07	; 7
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	65 e0       	ldi	r22, 0x05	; 5
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	87 e6       	ldi	r24, 0x67	; 103
     334:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
		}

		///Hindrance is top-right
		if (copro_distance[1]/256 > 180 &&
     338:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     33c:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     340:	81 15       	cp	r24, r1
     342:	95 4b       	sbci	r25, 0xB5	; 181
     344:	b0 f0       	brcs	.+44     	; 0x372 <findDirection+0x29e>
			//copro_distance[0]/256 < 150 &&
			flag==0 )
     346:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     34a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		{
			LEDShow('g', 5, 7); /// if Hindrance is not right, set LEDs 5-7 to green
		}

		///Hindrance is top-right
		if (copro_distance[1]/256 > 180 &&
     34e:	89 2b       	or	r24, r25
     350:	81 f4       	brne	.+32     	; 0x372 <findDirection+0x29e>
			//copro_distance[0]/256 < 150 &&
			flag==0 )
		{
			LEDShow('r', 6, 6); ///set LED 6 to red
     352:	46 e0       	ldi	r20, 0x06	; 6
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	66 e0       	ldi	r22, 0x06	; 6
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	82 e7       	ldi	r24, 0x72	; 114
     35c:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnHalfLeft(); /// Nibo turns left on 45 degrees
     360:	0e 94 ba 02 	call	0x574	; 0x574 <turnHalfLeft>
			hindranceShow(40, 50); ///Show the position of Hindrance
     364:	62 e3       	ldi	r22, 0x32	; 50
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	88 e2       	ldi	r24, 0x28	; 40
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
     370:	07 c0       	rjmp	.+14     	; 0x380 <findDirection+0x2ac>
	     }
		else {LEDShow('g', 6, 6);}///set LED 6 to green
     372:	46 e0       	ldi	r20, 0x06	; 6
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	66 e0       	ldi	r22, 0x06	; 6
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	87 e6       	ldi	r24, 0x67	; 103
     37c:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     380:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     384:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     388:	81 15       	cp	r24, r1
     38a:	97 49       	sbci	r25, 0x97	; 151
     38c:	80 f1       	brcs	.+96     	; 0x3ee <findDirection+0x31a>
			copro_distance[3]/256 > 100 &&
     38e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     392:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
			hindranceShow(40, 50); ///Show the position of Hindrance
	     }
		else {LEDShow('g', 6, 6);}///set LED 6 to green

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     396:	81 15       	cp	r24, r1
     398:	95 46       	sbci	r25, 0x65	; 101
     39a:	48 f1       	brcs	.+82     	; 0x3ee <findDirection+0x31a>
			copro_distance[3]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     39c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     3a0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
	     }
		else {LEDShow('g', 6, 6);}///set LED 6 to green

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 100 &&
     3a4:	81 15       	cp	r24, r1
     3a6:	9b 4a       	sbci	r25, 0xAB	; 171
     3a8:	10 f1       	brcs	.+68     	; 0x3ee <findDirection+0x31a>
			copro_distance[2]/256 > 170 &&
			flag==0)
     3aa:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     3ae:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else {LEDShow('g', 6, 6);}///set LED 6 to green

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     3b2:	89 2b       	or	r24, r25
     3b4:	e1 f4       	brne	.+56     	; 0x3ee <findDirection+0x31a>
			flag==0)
		{
			LEDShow('r', 2, 4);///set LEDs 2-4 to red
     3b6:	44 e0       	ldi	r20, 0x04	; 4
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	82 e7       	ldi	r24, 0x72	; 114
     3c0:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnRight(); /// Nibo turns right on 90 degrees
     3c4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <turnRight>
			hindranceShow(90, 50); ///show the position of Hindrance
     3c8:	62 e3       	ldi	r22, 0x32	; 50
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	8a e5       	ldi	r24, 0x5A	; 90
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
			hindranceShow(90, 30);
     3d4:	6e e1       	ldi	r22, 0x1E	; 30
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	8a e5       	ldi	r24, 0x5A	; 90
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
			hindranceShow(65, 50);
     3e0:	62 e3       	ldi	r22, 0x32	; 50
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	81 e4       	ldi	r24, 0x41	; 65
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
     3ec:	07 c0       	rjmp	.+14     	; 0x3fc <findDirection+0x328>
		}
		else
		{
			LEDShow('g', 2, 4);///set LEDs 2-4 to green
     3ee:	44 e0       	ldi	r20, 0x04	; 4
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	62 e0       	ldi	r22, 0x02	; 2
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	87 e6       	ldi	r24, 0x67	; 103
     3f8:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 180 &&
     3fc:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     400:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     404:	81 15       	cp	r24, r1
     406:	95 4b       	sbci	r25, 0xB5	; 181
     408:	b0 f0       	brcs	.+44     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			//copro_distance[0]/256 < 150 &&
		    flag==0)
     40a:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     40e:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else
		{
			LEDShow('g', 2, 4);///set LEDs 2-4 to green
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 180 &&
     412:	89 2b       	or	r24, r25
     414:	81 f4       	brne	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			//copro_distance[0]/256 < 150 &&
		    flag==0)
		{
			LEDShow('r', 3, 3);///set LED 3 to red
     416:	43 e0       	ldi	r20, 0x03	; 3
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	82 e7       	ldi	r24, 0x72	; 114
     420:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnHalfRight(); /// Nibo turns right on 45 degrees
     424:	0e 94 e6 02 	call	0x5cc	; 0x5cc <turnHalfRight>
			hindranceShow(85, 50);//Show the position of Hindrance
     428:	62 e3       	ldi	r22, 0x32	; 50
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	85 e5       	ldi	r24, 0x55	; 85
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 93 03 	call	0x726	; 0x726 <hindranceShow>
     434:	07 c0       	rjmp	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		 }
		else {LEDShow('g', 3, 3);}///set LED 3 to green
     436:	43 e0       	ldi	r20, 0x03	; 3
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	87 e6       	ldi	r24, 0x67	; 103
     440:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>

		///Hindrance is ahead
			/// (Left)
		if (copro_distance[2]/256 > 170 &&
     444:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     448:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     44c:	81 15       	cp	r24, r1
     44e:	9b 4a       	sbci	r25, 0xAB	; 171
     450:	f0 f0       	brcs	.+60     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			copro_distance[1]/256 > 60 &&
     452:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     456:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
		 }
		else {LEDShow('g', 3, 3);}///set LED 3 to green

		///Hindrance is ahead
			/// (Left)
		if (copro_distance[2]/256 > 170 &&
     45a:	81 15       	cp	r24, r1
     45c:	9d 43       	sbci	r25, 0x3D	; 61
     45e:	b8 f0       	brcs	.+46     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			copro_distance[1]/256 > 60 &&
			copro_distance[4]/256 < 50 &&
     460:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     464:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		else {LEDShow('g', 3, 3);}///set LED 3 to green

		///Hindrance is ahead
			/// (Left)
		if (copro_distance[2]/256 > 170 &&
			copro_distance[1]/256 > 60 &&
     468:	81 15       	cp	r24, r1
     46a:	92 43       	sbci	r25, 0x32	; 50
     46c:	80 f4       	brcc	.+32     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			copro_distance[4]/256 < 50 &&
			copro_distance[0]/256 < 50)
     46e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     472:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>

		///Hindrance is ahead
			/// (Left)
		if (copro_distance[2]/256 > 170 &&
			copro_distance[1]/256 > 60 &&
			copro_distance[4]/256 < 50 &&
     476:	81 15       	cp	r24, r1
     478:	92 43       	sbci	r25, 0x32	; 50
     47a:	48 f4       	brcc	.+18     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			copro_distance[0]/256 < 50)
		{
			LEDShow('r', 4, 5);///set LEDs 4-5 to red
     47c:	45 e0       	ldi	r20, 0x05	; 5
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	64 e0       	ldi	r22, 0x04	; 4
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnLeft(); /// Nibo turns left
     48a:	0e 94 a4 02 	call	0x548	; 0x548 <turnLeft>
		}
			/// (Right)
		if (copro_distance[2]/256 > 170 &&
     48e:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     492:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     496:	81 15       	cp	r24, r1
     498:	9b 4a       	sbci	r25, 0xAB	; 171
     49a:	f0 f0       	brcs	.+60     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			copro_distance[3]/256 > 60 &&
     49c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     4a0:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
		{
			LEDShow('r', 4, 5);///set LEDs 4-5 to red
			turnLeft(); /// Nibo turns left
		}
			/// (Right)
		if (copro_distance[2]/256 > 170 &&
     4a4:	81 15       	cp	r24, r1
     4a6:	9d 43       	sbci	r25, 0x3D	; 61
     4a8:	b8 f0       	brcs	.+46     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			copro_distance[3]/256 > 60 &&
			copro_distance[4]/256 < 50 &&
     4aa:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     4ae:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
			LEDShow('r', 4, 5);///set LEDs 4-5 to red
			turnLeft(); /// Nibo turns left
		}
			/// (Right)
		if (copro_distance[2]/256 > 170 &&
			copro_distance[3]/256 > 60 &&
     4b2:	81 15       	cp	r24, r1
     4b4:	92 43       	sbci	r25, 0x32	; 50
     4b6:	80 f4       	brcc	.+32     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			copro_distance[4]/256 < 50 &&
			copro_distance[0]/256 < 50)
     4b8:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     4bc:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			turnLeft(); /// Nibo turns left
		}
			/// (Right)
		if (copro_distance[2]/256 > 170 &&
			copro_distance[3]/256 > 60 &&
			copro_distance[4]/256 < 50 &&
     4c0:	81 15       	cp	r24, r1
     4c2:	92 43       	sbci	r25, 0x32	; 50
     4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			copro_distance[0]/256 < 50)
		{
			LEDShow('r', 4, 5); ///set LEDs 4-5 to red
     4c6:	45 e0       	ldi	r20, 0x05	; 5
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	82 e7       	ldi	r24, 0x72	; 114
     4d0:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			turnRight();/// Nibo turns right
     4d4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <turnRight>
		}
			/// (Ahead)
		if (copro_distance[2]/256 > 220 &&
     4d8:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     4dc:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     4e0:	81 15       	cp	r24, r1
     4e2:	9d 4d       	sbci	r25, 0xDD	; 221
     4e4:	e8 f0       	brcs	.+58     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			copro_distance[4]/256 < 50 &&
     4e6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     4ea:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		{
			LEDShow('r', 4, 5); ///set LEDs 4-5 to red
			turnRight();/// Nibo turns right
		}
			/// (Ahead)
		if (copro_distance[2]/256 > 220 &&
     4ee:	81 15       	cp	r24, r1
     4f0:	92 43       	sbci	r25, 0x32	; 50
     4f2:	b0 f4       	brcc	.+44     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			copro_distance[4]/256 < 50 &&
			copro_distance[0]/256 < 50)
     4f4:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     4f8:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			LEDShow('r', 4, 5); ///set LEDs 4-5 to red
			turnRight();/// Nibo turns right
		}
			/// (Ahead)
		if (copro_distance[2]/256 > 220 &&
			copro_distance[4]/256 < 50 &&
     4fc:	81 15       	cp	r24, r1
     4fe:	92 43       	sbci	r25, 0x32	; 50
     500:	78 f4       	brcc	.+30     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			copro_distance[0]/256 < 50)
		{
			LEDShow('r', 4, 5); ///set LEDs 4-5 to red
     502:	45 e0       	ldi	r20, 0x05	; 5
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	64 e0       	ldi	r22, 0x04	; 4
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	82 e7       	ldi	r24, 0x72	; 114
     50c:	0e 94 33 03 	call	0x666	; 0x666 <LEDShow>
			copro_setTargetRel(-54, 54, 20);/// Nibo turns on 180 degrees
     510:	44 e1       	ldi	r20, 0x14	; 20
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	66 e3       	ldi	r22, 0x36	; 54
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	8a ec       	ldi	r24, 0xCA	; 202
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	0e 94 96 10 	call	0x212c	; 0x212c <copro_setTargetRel>
		}
}
     520:	00 00       	nop
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <drive>:
 * @brief
 *
 * Nibo goes forward
 */
void drive()
{
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(10, 10); ///Set same speed for the two motors. The wheels spin forward
     534:	6a e0       	ldi	r22, 0x0A	; 10
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <copro_setSpeed>
}
     540:	00 00       	nop
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <turnLeft>:
 * @brief
 *
 * Nibo turns left
 */
void turnLeft()
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-27, 27, 15); ///rotate 90 degrees left with 15 ticks/s
     550:	4f e0       	ldi	r20, 0x0F	; 15
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	6b e1       	ldi	r22, 0x1B	; 27
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	85 ee       	ldi	r24, 0xE5	; 229
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	0e 94 96 10 	call	0x212c	; 0x212c <copro_setTargetRel>
	copro_resetOdometry(0, 0);//Reset odometry values to specified values (0)
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 bd 10 	call	0x217a	; 0x217a <copro_resetOdometry>
}
     56c:	00 00       	nop
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <turnHalfLeft>:
 * @brief
 *
 * Nibo turns half left
 */
void turnHalfLeft()
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-13, 13, 15); ///rotate 45 degrees left with 15 ticks/s
     57c:	4f e0       	ldi	r20, 0x0F	; 15
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	6d e0       	ldi	r22, 0x0D	; 13
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	83 ef       	ldi	r24, 0xF3	; 243
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	0e 94 96 10 	call	0x212c	; 0x212c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 bd 10 	call	0x217a	; 0x217a <copro_resetOdometry>
}
     598:	00 00       	nop
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <turnRight>:
 * @brief
 *
 * Nibo turns right
 */
void turnRight()
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(27, -27, 15); ///rotate 90 degrees right with 15 ticks/s
     5a8:	4f e0       	ldi	r20, 0x0F	; 15
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	65 ee       	ldi	r22, 0xE5	; 229
     5ae:	7f ef       	ldi	r23, 0xFF	; 255
     5b0:	8b e1       	ldi	r24, 0x1B	; 27
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 96 10 	call	0x212c	; 0x212c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 bd 10 	call	0x217a	; 0x217a <copro_resetOdometry>
}
     5c4:	00 00       	nop
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <turnHalfRight>:
 * @brief
 *
 * Nibo turns half right
 */
void turnHalfRight()
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(13, -13, 15); ///rotate 45 degrees right with 15 ticks/s
     5d4:	4f e0       	ldi	r20, 0x0F	; 15
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	63 ef       	ldi	r22, 0xF3	; 243
     5da:	7f ef       	ldi	r23, 0xFF	; 255
     5dc:	8d e0       	ldi	r24, 0x0D	; 13
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 96 10 	call	0x212c	; 0x212c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 bd 10 	call	0x217a	; 0x217a <copro_resetOdometry>
}
     5f0:	00 00       	nop
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <goBack>:
 *  @brief
 *
 * Nibo goes back
 */
void goBack()
{
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(-10, -10); ///Set same speed for the two motors. The wheels spin back
     600:	66 ef       	ldi	r22, 0xF6	; 246
     602:	7f ef       	ldi	r23, 0xFF	; 255
     604:	86 ef       	ldi	r24, 0xF6	; 246
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	0e 94 70 10 	call	0x20e0	; 0x20e0 <copro_setSpeed>
	copro_resetOdometry(0, 0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 bd 10 	call	0x217a	; 0x217a <copro_resetOdometry>
}
     618:	00 00       	nop
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <main>:

/* @brief
 *
 * Main Function
*/
int main() {
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62

		/// turn on the interrupts. Needed for the PWM
		sei();
     628:	78 94       	sei

		/// initialization of the robot (always necessary)
		bot_init();
     62a:	0e 94 0e 11 	call	0x221c	; 0x221c <bot_init>

		/// Initialization of the SPI interface
		spi_init();
     62e:	0e 94 39 09 	call	0x1272	; 0x1272 <spi_init>

		/// Initialization of the speaker
		sound_init();
     632:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <sound_init>

		/// Initialization of the LEDs
		leds_init();
     636:	0e 94 21 11 	call	0x2242	; 0x2242 <leds_init>

		/// Initialization of the pulse width modulation
		pwm_init();
     63a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <pwm_init>

		/// Initialization of display and graphics functions
		display_init();
     63e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <display_init>
		gfx_init();
     642:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <gfx_init>

		/// Switch on distance measurement
		copro_ir_startMeasure();
     646:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <copro_ir_startMeasure>

		/// Function for launching a program by a user
		start();
     64a:	0e 94 8b 06 	call	0xd16	; 0xd16 <start>

		/// Endless loop:
		while (1 == 1) {
			/// empty the display
			gfx_fill(0);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <gfx_fill>

			/// update coprocessor values
			copro_update();
     654:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <copro_update>
			/// function for navigation
			findDirection();
     658:	0e 94 6a 00 	call	0xd4	; 0xd4 <findDirection>

			/// wait 0,5s
			delay(500);
     65c:	84 ef       	ldi	r24, 0xF4	; 244
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
		}
     664:	f4 cf       	rjmp	.-24     	; 0x64e <main+0x2e>

00000666 <LEDShow>:
 *
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	27 97       	sbiw	r28, 0x07	; 7
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	7d 83       	std	Y+5, r23	; 0x05
     67e:	6c 83       	std	Y+4, r22	; 0x04
     680:	5f 83       	std	Y+7, r21	; 0x07
     682:	4e 83       	std	Y+6, r20	; 0x06
	for(int i=start; i<=end; i++){
     684:	8c 81       	ldd	r24, Y+4	; 0x04
     686:	9d 81       	ldd	r25, Y+5	; 0x05
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
     68c:	13 c0       	rjmp	.+38     	; 0x6b4 <LEDShow+0x4e>
		/// For all LEDs between start and end LEDs (including start end LEDs):
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///If the first parameter is "r", set LED number i to red
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	82 37       	cpi	r24, 0x72	; 114
     692:	31 f4       	brne	.+12     	; 0x6a0 <LEDShow+0x3a>
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	68 2f       	mov	r22, r24
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <LEDShow+0x44>
		else leds_set_status(LEDS_GREEN, i); ///If the first parameter is "g", set LED number i to green
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	68 2f       	mov	r22, r24
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
	for(int i=start; i<=end; i++){
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	29 81       	ldd	r18, Y+1	; 0x01
     6b6:	3a 81       	ldd	r19, Y+2	; 0x02
     6b8:	8e 81       	ldd	r24, Y+6	; 0x06
     6ba:	9f 81       	ldd	r25, Y+7	; 0x07
     6bc:	82 17       	cp	r24, r18
     6be:	93 07       	cpc	r25, r19
     6c0:	34 f7       	brge	.-52     	; 0x68e <LEDShow+0x28>
		/// For all LEDs between start and end LEDs (including start end LEDs):
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///If the first parameter is "r", set LED number i to red
		else leds_set_status(LEDS_GREEN, i); ///If the first parameter is "g", set LED number i to green
	}
}
     6c2:	00 00       	nop
     6c4:	27 96       	adiw	r28, 0x07	; 7
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <showNibo>:
 * @brief
 *
 * Function for showing Nibo on display
 */
void showNibo()
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	/// Nibo's picture
	gfx_move(53, 12); ///Sets the point from which to draw (53, 12)
     6de:	6c e0       	ldi	r22, 0x0C	; 12
     6e0:	85 e3       	ldi	r24, 0x35	; 53
     6e2:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_box(4, 6);    ///Draws the box. First argument is width=4, second is height=6
     6e6:	66 e0       	ldi	r22, 0x06	; 6
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <gfx_box>

	gfx_move(75, 12); ///Sets the point from which to draw (75, 12)
     6ee:	6c e0       	ldi	r22, 0x0C	; 12
     6f0:	8b e4       	ldi	r24, 0x4B	; 75
     6f2:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_box(4, 6);	  ///Draws the box. First argument is width=4, second is height=6
     6f6:	66 e0       	ldi	r22, 0x06	; 6
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	0e 94 30 0c 	call	0x1860	; 0x1860 <gfx_box>

	gfx_move(59, 14); ///Sets the point from which to draw (59, 14)
     6fe:	6e e0       	ldi	r22, 0x0E	; 14
     700:	8b e3       	ldi	r24, 0x3B	; 59
     702:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_box(14, 8);	  ///Draws the box. First argument is width=14, second is height=8
     706:	68 e0       	ldi	r22, 0x08	; 8
     708:	8e e0       	ldi	r24, 0x0E	; 14
     70a:	0e 94 30 0c 	call	0x1860	; 0x1860 <gfx_box>

	gfx_move(61, 22); ///Sets the point from which to draw (61, 22)
     70e:	66 e1       	ldi	r22, 0x16	; 22
     710:	8d e3       	ldi	r24, 0x3D	; 61
     712:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_box(10, 3);	  ///Draws the box. First argument is width=10, second is height=3
     716:	63 e0       	ldi	r22, 0x03	; 3
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	0e 94 30 0c 	call	0x1860	; 0x1860 <gfx_box>
}
     71e:	00 00       	nop
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <hindranceShow>:
 * Draws one triangle with an exclamation mark inside.
 *
 * @param x Abscissa starting point
 * @param y Ordinate starting point
 */
void hindranceShow(int x, int y){
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <hindranceShow+0x6>
     72c:	00 d0       	rcall	.+0      	; 0x72e <hindranceShow+0x8>
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	7c 83       	std	Y+4, r23	; 0x04
     738:	6b 83       	std	Y+3, r22	; 0x03
	gfx_move(x, y); ///Sets the point from which to draw (x - function parameter, y - function parameter)
     73a:	9b 81       	ldd	r25, Y+3	; 0x03
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	69 2f       	mov	r22, r25
     740:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_lineTo(x+7,y-17); ///Draws a line from x, y to x+7,y-17
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9f ee       	ldi	r25, 0xEF	; 239
     748:	98 0f       	add	r25, r24
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	89 5f       	subi	r24, 0xF9	; 249
     74e:	69 2f       	mov	r22, r25
     750:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <gfx_lineTo>
	gfx_lineTo(x-7,y-17);///Draws a line from  x+7,y-17 to x-7,y-17
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9f ee       	ldi	r25, 0xEF	; 239
     758:	98 0f       	add	r25, r24
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	87 50       	subi	r24, 0x07	; 7
     75e:	69 2f       	mov	r22, r25
     760:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <gfx_lineTo>
	gfx_lineTo(x, y); ///Draws a line from x-7,y-17 to start point x,y
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	69 2f       	mov	r22, r25
     76a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <gfx_lineTo>
	gfx_move(x, y-7);///Sets the point from which to draw (x, y-7)
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	99 ef       	ldi	r25, 0xF9	; 249
     772:	98 0f       	add	r25, r24
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	69 2f       	mov	r22, r25
     778:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_lineTo(x,y-13);///Draws a line from x,y-7 to start point x,y-13
     77c:	8b 81       	ldd	r24, Y+3	; 0x03
     77e:	93 ef       	ldi	r25, 0xF3	; 243
     780:	98 0f       	add	r25, r24
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	69 2f       	mov	r22, r25
     786:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <gfx_lineTo>
	gfx_move(x, y-15); ///Sets the point from which to draw (x, y-15)
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	91 ef       	ldi	r25, 0xF1	; 241
     78e:	98 0f       	add	r25, r24
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	69 2f       	mov	r22, r25
     794:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_hline(1); ///Draws a horizontal line from the current position to the right - makes one point
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <gfx_hline>

}
     79e:	00 00       	nop
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <tone>:
 * @brief Function from the Project "HelloSound" for creating sounds on the Nibo
 *
 * @author Daniel Wittekind
 *
 */
int tone(int frequency, int duration) {
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	c8 54       	subi	r28, 0x48	; 72
     7bc:	d1 09       	sbc	r29, r1
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	9e 01       	movw	r18, r28
     7ca:	2b 5b       	subi	r18, 0xBB	; 187
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	f9 01       	movw	r30, r18
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
     7d4:	ce 01       	movw	r24, r28
     7d6:	89 5b       	subi	r24, 0xB9	; 185
     7d8:	9f 4f       	sbci	r25, 0xFF	; 255
     7da:	fc 01       	movw	r30, r24
     7dc:	71 83       	std	Z+1, r23	; 0x01
     7de:	60 83       	st	Z, r22
	int interval = (50000 / frequency);
     7e0:	ce 01       	movw	r24, r28
     7e2:	8b 5b       	subi	r24, 0xBB	; 187
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	9c 01       	movw	r18, r24
     7ee:	99 0f       	add	r25, r25
     7f0:	44 0b       	sbc	r20, r20
     7f2:	55 0b       	sbc	r21, r21
     7f4:	80 e5       	ldi	r24, 0x50	; 80
     7f6:	93 ec       	ldi	r25, 0xC3	; 195
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	bc 01       	movw	r22, r24
     7fe:	cd 01       	movw	r24, r26
     800:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__divmodsi4>
     804:	da 01       	movw	r26, r20
     806:	c9 01       	movw	r24, r18
     808:	9c 83       	std	Y+4, r25	; 0x04
     80a:	8b 83       	std	Y+3, r24	; 0x03
	duration = duration * 100;
     80c:	ce 01       	movw	r24, r28
     80e:	89 5b       	subi	r24, 0xB9	; 185
     810:	9f 4f       	sbci	r25, 0xFF	; 255
     812:	9e 01       	movw	r18, r28
     814:	29 5b       	subi	r18, 0xB9	; 185
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	f9 01       	movw	r30, r18
     81a:	40 81       	ld	r20, Z
     81c:	51 81       	ldd	r21, Z+1	; 0x01
     81e:	64 e6       	ldi	r22, 0x64	; 100
     820:	64 9f       	mul	r22, r20
     822:	90 01       	movw	r18, r0
     824:	65 9f       	mul	r22, r21
     826:	30 0d       	add	r19, r0
     828:	11 24       	eor	r1, r1
     82a:	fc 01       	movw	r30, r24
     82c:	31 83       	std	Z+1, r19	; 0x01
     82e:	20 83       	st	Z, r18

	while (duration) {
     830:	5b c2       	rjmp	.+1206   	; 0xce8 <tone+0x53a>
		int i = interval;
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	9c 81       	ldd	r25, Y+4	; 0x04
     836:	9a 83       	std	Y+2, r25	; 0x02
     838:	89 83       	std	Y+1, r24	; 0x01
		clear_output_bit(IO_AUDIO);
     83a:	88 e3       	ldi	r24, 0x38	; 56
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	28 e3       	ldi	r18, 0x38	; 56
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	2f 7e       	andi	r18, 0xEF	; 239
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
		while (duration && i) {
     84c:	02 c1       	rjmp	.+516    	; 0xa52 <tone+0x2a4>
			duration--;
     84e:	ce 01       	movw	r24, r28
     850:	89 5b       	subi	r24, 0xB9	; 185
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	9e 01       	movw	r18, r28
     856:	29 5b       	subi	r18, 0xB9	; 185
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	f9 01       	movw	r30, r18
     85c:	20 81       	ld	r18, Z
     85e:	31 81       	ldd	r19, Z+1	; 0x01
     860:	21 50       	subi	r18, 0x01	; 1
     862:	31 09       	sbc	r19, r1
     864:	fc 01       	movw	r30, r24
     866:	31 83       	std	Z+1, r19	; 0x01
     868:	20 83       	st	Z, r18
			i--;
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e2       	ldi	r26, 0x20	; 32
     87a:	b1 e4       	ldi	r27, 0x41	; 65
     87c:	89 87       	std	Y+9, r24	; 0x09
     87e:	9a 87       	std	Y+10, r25	; 0x0a
     880:	ab 87       	std	Y+11, r26	; 0x0b
     882:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     884:	2b ea       	ldi	r18, 0xAB	; 171
     886:	3a ea       	ldi	r19, 0xAA	; 170
     888:	4a ea       	ldi	r20, 0xAA	; 170
     88a:	50 e4       	ldi	r21, 0x40	; 64
     88c:	69 85       	ldd	r22, Y+9	; 0x09
     88e:	7a 85       	ldd	r23, Y+10	; 0x0a
     890:	8b 85       	ldd	r24, Y+11	; 0x0b
     892:	9c 85       	ldd	r25, Y+12	; 0x0c
     894:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     898:	dc 01       	movw	r26, r24
     89a:	cb 01       	movw	r24, r22
     89c:	8d 87       	std	Y+13, r24	; 0x0d
     89e:	9e 87       	std	Y+14, r25	; 0x0e
     8a0:	af 87       	std	Y+15, r26	; 0x0f
     8a2:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e8       	ldi	r20, 0x80	; 128
     8aa:	50 e4       	ldi	r21, 0x40	; 64
     8ac:	69 85       	ldd	r22, Y+9	; 0x09
     8ae:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	89 8b       	std	Y+17, r24	; 0x11
     8be:	9a 8b       	std	Y+18, r25	; 0x12
     8c0:	ab 8b       	std	Y+19, r26	; 0x13
     8c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	5f e3       	ldi	r21, 0x3F	; 63
     8cc:	6d 85       	ldd	r22, Y+13	; 0x0d
     8ce:	7e 85       	ldd	r23, Y+14	; 0x0e
     8d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d2:	98 89       	ldd	r25, Y+16	; 0x10
     8d4:	0e 94 c7 11 	call	0x238e	; 0x238e <__cmpsf2>
     8d8:	88 23       	and	r24, r24
     8da:	1c f4       	brge	.+6      	; 0x8e2 <tone+0x134>
		__ticks = 1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	8d 8b       	std	Y+21, r24	; 0x15
     8e0:	b2 c0       	rjmp	.+356    	; 0xa46 <tone+0x298>
	else if (__tmp2 > 65535)
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	3f ef       	ldi	r19, 0xFF	; 255
     8e6:	4f e7       	ldi	r20, 0x7F	; 127
     8e8:	57 e4       	ldi	r21, 0x47	; 71
     8ea:	69 89       	ldd	r22, Y+17	; 0x11
     8ec:	7a 89       	ldd	r23, Y+18	; 0x12
     8ee:	8b 89       	ldd	r24, Y+19	; 0x13
     8f0:	9c 89       	ldd	r25, Y+20	; 0x14
     8f2:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <tone+0x14e>
     8fa:	7b c0       	rjmp	.+246    	; 0x9f2 <tone+0x244>
	{
		_delay_ms(__us / 1000.0);
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	4a e7       	ldi	r20, 0x7A	; 122
     902:	54 e4       	ldi	r21, 0x44	; 68
     904:	69 85       	ldd	r22, Y+9	; 0x09
     906:	7a 85       	ldd	r23, Y+10	; 0x0a
     908:	8b 85       	ldd	r24, Y+11	; 0x0b
     90a:	9c 85       	ldd	r25, Y+12	; 0x0c
     90c:	0e 94 cc 11 	call	0x2398	; 0x2398 <__divsf3>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	8e 8b       	std	Y+22, r24	; 0x16
     916:	9f 8b       	std	Y+23, r25	; 0x17
     918:	a8 8f       	std	Y+24, r26	; 0x18
     91a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	4a e7       	ldi	r20, 0x7A	; 122
     922:	55 e4       	ldi	r21, 0x45	; 69
     924:	6e 89       	ldd	r22, Y+22	; 0x16
     926:	7f 89       	ldd	r23, Y+23	; 0x17
     928:	88 8d       	ldd	r24, Y+24	; 0x18
     92a:	99 8d       	ldd	r25, Y+25	; 0x19
     92c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	8a 8f       	std	Y+26, r24	; 0x1a
     936:	9b 8f       	std	Y+27, r25	; 0x1b
     938:	ac 8f       	std	Y+28, r26	; 0x1c
     93a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e8       	ldi	r20, 0x80	; 128
     942:	5f e3       	ldi	r21, 0x3F	; 63
     944:	6a 8d       	ldd	r22, Y+26	; 0x1a
     946:	7b 8d       	ldd	r23, Y+27	; 0x1b
     948:	8c 8d       	ldd	r24, Y+28	; 0x1c
     94a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     94c:	0e 94 c7 11 	call	0x238e	; 0x238e <__cmpsf2>
     950:	88 23       	and	r24, r24
     952:	2c f4       	brge	.+10     	; 0x95e <tone+0x1b0>
		__ticks = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	9f 8f       	std	Y+31, r25	; 0x1f
     95a:	8e 8f       	std	Y+30, r24	; 0x1e
     95c:	3f c0       	rjmp	.+126    	; 0x9dc <tone+0x22e>
	else if (__tmp > 65535)
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	3f ef       	ldi	r19, 0xFF	; 255
     962:	4f e7       	ldi	r20, 0x7F	; 127
     964:	57 e4       	ldi	r21, 0x47	; 71
     966:	6a 8d       	ldd	r22, Y+26	; 0x1a
     968:	7b 8d       	ldd	r23, Y+27	; 0x1b
     96a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     96c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     96e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     972:	18 16       	cp	r1, r24
     974:	4c f5       	brge	.+82     	; 0x9c8 <tone+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	51 e4       	ldi	r21, 0x41	; 65
     97e:	6e 89       	ldd	r22, Y+22	; 0x16
     980:	7f 89       	ldd	r23, Y+23	; 0x17
     982:	88 8d       	ldd	r24, Y+24	; 0x18
     984:	99 8d       	ldd	r25, Y+25	; 0x19
     986:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	9f 8f       	std	Y+31, r25	; 0x1f
     99c:	8e 8f       	std	Y+30, r24	; 0x1e
     99e:	0f c0       	rjmp	.+30     	; 0x9be <tone+0x210>
     9a0:	80 e9       	ldi	r24, 0x90	; 144
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	99 a3       	std	Y+33, r25	; 0x21
     9a6:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9a8:	88 a1       	ldd	r24, Y+32	; 0x20
     9aa:	99 a1       	ldd	r25, Y+33	; 0x21
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <tone+0x1fe>
     9b0:	99 a3       	std	Y+33, r25	; 0x21
     9b2:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	9f 8f       	std	Y+31, r25	; 0x1f
     9bc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9be:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9c2:	89 2b       	or	r24, r25
     9c4:	69 f7       	brne	.-38     	; 0x9a0 <tone+0x1f2>
     9c6:	3f c0       	rjmp	.+126    	; 0xa46 <tone+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
     9ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
     9cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9d0:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	9f 8f       	std	Y+31, r25	; 0x1f
     9da:	8e 8f       	std	Y+30, r24	; 0x1e
     9dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9de:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9e0:	9b a3       	std	Y+35, r25	; 0x23
     9e2:	8a a3       	std	Y+34, r24	; 0x22
     9e4:	8a a1       	ldd	r24, Y+34	; 0x22
     9e6:	9b a1       	ldd	r25, Y+35	; 0x23
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <tone+0x23a>
     9ec:	9b a3       	std	Y+35, r25	; 0x23
     9ee:	8a a3       	std	Y+34, r24	; 0x22
     9f0:	2a c0       	rjmp	.+84     	; 0xa46 <tone+0x298>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4f e7       	ldi	r20, 0x7F	; 127
     9f8:	53 e4       	ldi	r21, 0x43	; 67
     9fa:	6d 85       	ldd	r22, Y+13	; 0x0d
     9fc:	7e 85       	ldd	r23, Y+14	; 0x0e
     9fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     a00:	98 89       	ldd	r25, Y+16	; 0x10
     a02:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     a06:	18 16       	cp	r1, r24
     a08:	ac f4       	brge	.+42     	; 0xa34 <tone+0x286>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a0a:	69 89       	ldd	r22, Y+17	; 0x11
     a0c:	7a 89       	ldd	r23, Y+18	; 0x12
     a0e:	8b 89       	ldd	r24, Y+19	; 0x13
     a10:	9c 89       	ldd	r25, Y+20	; 0x14
     a12:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     a16:	dc 01       	movw	r26, r24
     a18:	cb 01       	movw	r24, r22
     a1a:	9d a3       	std	Y+37, r25	; 0x25
     a1c:	8c a3       	std	Y+36, r24	; 0x24
     a1e:	8c a1       	ldd	r24, Y+36	; 0x24
     a20:	9d a1       	ldd	r25, Y+37	; 0x25
     a22:	9f a3       	std	Y+39, r25	; 0x27
     a24:	8e a3       	std	Y+38, r24	; 0x26
     a26:	8e a1       	ldd	r24, Y+38	; 0x26
     a28:	9f a1       	ldd	r25, Y+39	; 0x27
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <tone+0x27c>
     a2e:	9f a3       	std	Y+39, r25	; 0x27
     a30:	8e a3       	std	Y+38, r24	; 0x26
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <tone+0x2a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a34:	6d 85       	ldd	r22, Y+13	; 0x0d
     a36:	7e 85       	ldd	r23, Y+14	; 0x0e
     a38:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3a:	98 89       	ldd	r25, Y+16	; 0x10
     a3c:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	8d 8b       	std	Y+21, r24	; 0x15
     a46:	8d 89       	ldd	r24, Y+21	; 0x15
     a48:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a4a:	88 a5       	ldd	r24, Y+40	; 0x28
     a4c:	8a 95       	dec	r24
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <tone+0x29e>
     a50:	88 a7       	std	Y+40, r24	; 0x28
	duration = duration * 100;

	while (duration) {
		int i = interval;
		clear_output_bit(IO_AUDIO);
		while (duration && i) {
     a52:	ce 01       	movw	r24, r28
     a54:	89 5b       	subi	r24, 0xB9	; 185
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	fc 01       	movw	r30, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	89 2b       	or	r24, r25
     a60:	29 f0       	breq	.+10     	; 0xa6c <tone+0x2be>
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	89 2b       	or	r24, r25
     a68:	09 f0       	breq	.+2      	; 0xa6c <tone+0x2be>
     a6a:	f1 ce       	rjmp	.-542    	; 0x84e <tone+0xa0>
			duration--;
			i--;
			delay_us(10);
		}
		i = interval;
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
		set_output_bit(IO_AUDIO);
     a74:	88 e3       	ldi	r24, 0x38	; 56
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	28 e3       	ldi	r18, 0x38	; 56
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	20 61       	ori	r18, 0x10	; 16
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
		while (duration && i) {
     a86:	23 c1       	rjmp	.+582    	; 0xcce <tone+0x520>
			duration--;
     a88:	ce 01       	movw	r24, r28
     a8a:	89 5b       	subi	r24, 0xB9	; 185
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9e 01       	movw	r18, r28
     a90:	29 5b       	subi	r18, 0xB9	; 185
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	31 09       	sbc	r19, r1
     a9e:	fc 01       	movw	r30, r24
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	20 83       	st	Z, r18
			i--;
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	9a 83       	std	Y+2, r25	; 0x02
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	a0 e2       	ldi	r26, 0x20	; 32
     ab4:	b1 e4       	ldi	r27, 0x41	; 65
     ab6:	8d 83       	std	Y+5, r24	; 0x05
     ab8:	9e 83       	std	Y+6, r25	; 0x06
     aba:	af 83       	std	Y+7, r26	; 0x07
     abc:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     abe:	2b ea       	ldi	r18, 0xAB	; 171
     ac0:	3a ea       	ldi	r19, 0xAA	; 170
     ac2:	4a ea       	ldi	r20, 0xAA	; 170
     ac4:	50 e4       	ldi	r21, 0x40	; 64
     ac6:	6d 81       	ldd	r22, Y+5	; 0x05
     ac8:	7e 81       	ldd	r23, Y+6	; 0x06
     aca:	8f 81       	ldd	r24, Y+7	; 0x07
     acc:	98 85       	ldd	r25, Y+8	; 0x08
     ace:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	89 a7       	std	Y+41, r24	; 0x29
     ad8:	9a a7       	std	Y+42, r25	; 0x2a
     ada:	ab a7       	std	Y+43, r26	; 0x2b
     adc:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	50 e4       	ldi	r21, 0x40	; 64
     ae6:	6d 81       	ldd	r22, Y+5	; 0x05
     ae8:	7e 81       	ldd	r23, Y+6	; 0x06
     aea:	8f 81       	ldd	r24, Y+7	; 0x07
     aec:	98 85       	ldd	r25, Y+8	; 0x08
     aee:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8d a7       	std	Y+45, r24	; 0x2d
     af8:	9e a7       	std	Y+46, r25	; 0x2e
     afa:	af a7       	std	Y+47, r26	; 0x2f
     afc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e8       	ldi	r20, 0x80	; 128
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	69 a5       	ldd	r22, Y+41	; 0x29
     b08:	7a a5       	ldd	r23, Y+42	; 0x2a
     b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
     b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
     b0e:	0e 94 c7 11 	call	0x238e	; 0x238e <__cmpsf2>
     b12:	88 23       	and	r24, r24
     b14:	1c f4       	brge	.+6      	; 0xb1c <tone+0x36e>
		__ticks = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	89 ab       	std	Y+49, r24	; 0x31
     b1a:	c6 c0       	rjmp	.+396    	; 0xca8 <tone+0x4fa>
	else if (__tmp2 > 65535)
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	57 e4       	ldi	r21, 0x47	; 71
     b24:	6d a5       	ldd	r22, Y+45	; 0x2d
     b26:	7e a5       	ldd	r23, Y+46	; 0x2e
     b28:	8f a5       	ldd	r24, Y+47	; 0x2f
     b2a:	98 a9       	ldd	r25, Y+48	; 0x30
     b2c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     b30:	18 16       	cp	r1, r24
     b32:	0c f0       	brlt	.+2      	; 0xb36 <tone+0x388>
     b34:	7b c0       	rjmp	.+246    	; 0xc2c <tone+0x47e>
	{
		_delay_ms(__us / 1000.0);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	4a e7       	ldi	r20, 0x7A	; 122
     b3c:	54 e4       	ldi	r21, 0x44	; 68
     b3e:	6d 81       	ldd	r22, Y+5	; 0x05
     b40:	7e 81       	ldd	r23, Y+6	; 0x06
     b42:	8f 81       	ldd	r24, Y+7	; 0x07
     b44:	98 85       	ldd	r25, Y+8	; 0x08
     b46:	0e 94 cc 11 	call	0x2398	; 0x2398 <__divsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	8a ab       	std	Y+50, r24	; 0x32
     b50:	9b ab       	std	Y+51, r25	; 0x33
     b52:	ac ab       	std	Y+52, r26	; 0x34
     b54:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	4a e7       	ldi	r20, 0x7A	; 122
     b5c:	55 e4       	ldi	r21, 0x45	; 69
     b5e:	6a a9       	ldd	r22, Y+50	; 0x32
     b60:	7b a9       	ldd	r23, Y+51	; 0x33
     b62:	8c a9       	ldd	r24, Y+52	; 0x34
     b64:	9d a9       	ldd	r25, Y+53	; 0x35
     b66:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	8e ab       	std	Y+54, r24	; 0x36
     b70:	9f ab       	std	Y+55, r25	; 0x37
     b72:	a8 af       	std	Y+56, r26	; 0x38
     b74:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e8       	ldi	r20, 0x80	; 128
     b7c:	5f e3       	ldi	r21, 0x3F	; 63
     b7e:	6e a9       	ldd	r22, Y+54	; 0x36
     b80:	7f a9       	ldd	r23, Y+55	; 0x37
     b82:	88 ad       	ldd	r24, Y+56	; 0x38
     b84:	99 ad       	ldd	r25, Y+57	; 0x39
     b86:	0e 94 c7 11 	call	0x238e	; 0x238e <__cmpsf2>
     b8a:	88 23       	and	r24, r24
     b8c:	2c f4       	brge	.+10     	; 0xb98 <tone+0x3ea>
		__ticks = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9b af       	std	Y+59, r25	; 0x3b
     b94:	8a af       	std	Y+58, r24	; 0x3a
     b96:	3f c0       	rjmp	.+126    	; 0xc16 <tone+0x468>
	else if (__tmp > 65535)
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	57 e4       	ldi	r21, 0x47	; 71
     ba0:	6e a9       	ldd	r22, Y+54	; 0x36
     ba2:	7f a9       	ldd	r23, Y+55	; 0x37
     ba4:	88 ad       	ldd	r24, Y+56	; 0x38
     ba6:	99 ad       	ldd	r25, Y+57	; 0x39
     ba8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	4c f5       	brge	.+82     	; 0xc02 <tone+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e2       	ldi	r20, 0x20	; 32
     bb6:	51 e4       	ldi	r21, 0x41	; 65
     bb8:	6a a9       	ldd	r22, Y+50	; 0x32
     bba:	7b a9       	ldd	r23, Y+51	; 0x33
     bbc:	8c a9       	ldd	r24, Y+52	; 0x34
     bbe:	9d a9       	ldd	r25, Y+53	; 0x35
     bc0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	bc 01       	movw	r22, r24
     bca:	cd 01       	movw	r24, r26
     bcc:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	9b af       	std	Y+59, r25	; 0x3b
     bd6:	8a af       	std	Y+58, r24	; 0x3a
     bd8:	0f c0       	rjmp	.+30     	; 0xbf8 <tone+0x44a>
     bda:	80 e9       	ldi	r24, 0x90	; 144
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	9d af       	std	Y+61, r25	; 0x3d
     be0:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     be2:	8c ad       	ldd	r24, Y+60	; 0x3c
     be4:	9d ad       	ldd	r25, Y+61	; 0x3d
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <tone+0x438>
     bea:	9d af       	std	Y+61, r25	; 0x3d
     bec:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bee:	8a ad       	ldd	r24, Y+58	; 0x3a
     bf0:	9b ad       	ldd	r25, Y+59	; 0x3b
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	9b af       	std	Y+59, r25	; 0x3b
     bf6:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf8:	8a ad       	ldd	r24, Y+58	; 0x3a
     bfa:	9b ad       	ldd	r25, Y+59	; 0x3b
     bfc:	89 2b       	or	r24, r25
     bfe:	69 f7       	brne	.-38     	; 0xbda <tone+0x42c>
     c00:	53 c0       	rjmp	.+166    	; 0xca8 <tone+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c02:	6e a9       	ldd	r22, Y+54	; 0x36
     c04:	7f a9       	ldd	r23, Y+55	; 0x37
     c06:	88 ad       	ldd	r24, Y+56	; 0x38
     c08:	99 ad       	ldd	r25, Y+57	; 0x39
     c0a:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	9b af       	std	Y+59, r25	; 0x3b
     c14:	8a af       	std	Y+58, r24	; 0x3a
     c16:	8a ad       	ldd	r24, Y+58	; 0x3a
     c18:	9b ad       	ldd	r25, Y+59	; 0x3b
     c1a:	9f af       	std	Y+63, r25	; 0x3f
     c1c:	8e af       	std	Y+62, r24	; 0x3e
     c1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c20:	9f ad       	ldd	r25, Y+63	; 0x3f
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <tone+0x474>
     c26:	9f af       	std	Y+63, r25	; 0x3f
     c28:	8e af       	std	Y+62, r24	; 0x3e
     c2a:	3e c0       	rjmp	.+124    	; 0xca8 <tone+0x4fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4f e7       	ldi	r20, 0x7F	; 127
     c32:	53 e4       	ldi	r21, 0x43	; 67
     c34:	69 a5       	ldd	r22, Y+41	; 0x29
     c36:	7a a5       	ldd	r23, Y+42	; 0x2a
     c38:	8b a5       	ldd	r24, Y+43	; 0x2b
     c3a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c3c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__gesf2>
     c40:	18 16       	cp	r1, r24
     c42:	4c f5       	brge	.+82     	; 0xc96 <tone+0x4e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     c44:	8e 01       	movw	r16, r28
     c46:	00 5c       	subi	r16, 0xC0	; 192
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	6d a5       	ldd	r22, Y+45	; 0x2d
     c4c:	7e a5       	ldd	r23, Y+46	; 0x2e
     c4e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c50:	98 a9       	ldd	r25, Y+48	; 0x30
     c52:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	f8 01       	movw	r30, r16
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
     c60:	ce 01       	movw	r24, r28
     c62:	8e 5b       	subi	r24, 0xBE	; 190
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	9e 01       	movw	r18, r28
     c68:	20 5c       	subi	r18, 0xC0	; 192
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	31 81       	ldd	r19, Z+1	; 0x01
     c72:	fc 01       	movw	r30, r24
     c74:	31 83       	std	Z+1, r19	; 0x01
     c76:	20 83       	st	Z, r18
     c78:	ce 01       	movw	r24, r28
     c7a:	8e 5b       	subi	r24, 0xBE	; 190
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	fc 01       	movw	r30, r24
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <tone+0x4d6>
     c88:	9e 01       	movw	r18, r28
     c8a:	2e 5b       	subi	r18, 0xBE	; 190
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	f9 01       	movw	r30, r18
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	1c c0       	rjmp	.+56     	; 0xcce <tone+0x520>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c96:	69 a5       	ldd	r22, Y+41	; 0x29
     c98:	7a a5       	ldd	r23, Y+42	; 0x2a
     c9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c9e:	0e 94 3e 12 	call	0x247c	; 0x247c <__fixunssfsi>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	89 ab       	std	Y+49, r24	; 0x31
     ca8:	ce 01       	movw	r24, r28
     caa:	8c 5b       	subi	r24, 0xBC	; 188
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	29 a9       	ldd	r18, Y+49	; 0x31
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cb4:	ce 01       	movw	r24, r28
     cb6:	8c 5b       	subi	r24, 0xBC	; 188
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	28 2f       	mov	r18, r24
     cc0:	2a 95       	dec	r18
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <tone+0x512>
     cc4:	ce 01       	movw	r24, r28
     cc6:	8c 5b       	subi	r24, 0xBC	; 188
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
			i--;
			delay_us(10);
		}
		i = interval;
		set_output_bit(IO_AUDIO);
		while (duration && i) {
     cce:	ce 01       	movw	r24, r28
     cd0:	89 5b       	subi	r24, 0xB9	; 185
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	fc 01       	movw	r30, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	89 2b       	or	r24, r25
     cdc:	29 f0       	breq	.+10     	; 0xce8 <tone+0x53a>
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	89 2b       	or	r24, r25
     ce4:	09 f0       	breq	.+2      	; 0xce8 <tone+0x53a>
     ce6:	d0 ce       	rjmp	.-608    	; 0xa88 <tone+0x2da>
 */
int tone(int frequency, int duration) {
	int interval = (50000 / frequency);
	duration = duration * 100;

	while (duration) {
     ce8:	ce 01       	movw	r24, r28
     cea:	89 5b       	subi	r24, 0xB9	; 185
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	89 2b       	or	r24, r25
     cf6:	09 f0       	breq	.+2      	; 0xcfa <tone+0x54c>
     cf8:	9c cd       	rjmp	.-1224   	; 0x832 <tone+0x84>
			i--;
			delay_us(10);
		}
	}

	return 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
}
     cfe:	c8 5b       	subi	r28, 0xB8	; 184
     d00:	df 4f       	sbci	r29, 0xFF	; 255
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <start>:
 *
 * @author Arina Lavrova
 * @version 11.2019
 */

void start(){
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <start+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <start+0x8>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <start+0xa>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62

	/// Initialization of LEDs numbers
	int led1=2; /// led1 - start left LED
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9a 83       	std	Y+2, r25	; 0x02
     d2a:	89 83       	std	Y+1, r24	; 0x01
	int led2=7; /// led2 - start right LED
     d2c:	87 e0       	ldi	r24, 0x07	; 7
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	8b 83       	std	Y+3, r24	; 0x03

	leds_set_headlights(250); /// Turn on the two headlights.
     d34:	8a ef       	ldi	r24, 0xFA	; 250
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 57 11 	call	0x22ae	; 0x22ae <leds_set_headlights>

	/// Show user info
	gfx_move(4, 0);///Sets the point from which to write
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("To start the program,"); /// write the welcome-text to the display
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	gfx_move(4, 13);
     d4c:	6d e0       	ldi	r22, 0x0D	; 13
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("Press the S3 button");
     d54:	8a e1       	ldi	r24, 0x1A	; 26
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	gfx_move(50, 23);
     d5c:	67 e1       	ldi	r22, 0x17	; 23
     d5e:	82 e3       	ldi	r24, 0x32	; 50
     d60:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("----->");
     d64:	8e e2       	ldi	r24, 0x2E	; 46
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	gfx_move(4, 35);
     d6c:	63 e2       	ldi	r22, 0x23	; 35
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("To stop the program");
     d74:	85 e3       	ldi	r24, 0x35	; 53
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	gfx_move(4, 48);
     d7c:	60 e3       	ldi	r22, 0x30	; 48
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("Press the S2 button");
     d84:	89 e4       	ldi	r24, 0x49	; 73
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	gfx_move(50, 55);
     d8c:	67 e3       	ldi	r22, 0x37	; 55
     d8e:	82 e3       	ldi	r24, 0x32	; 50
     d90:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
	gfx_print_text("<-----");
     d94:	8d e5       	ldi	r24, 0x5D	; 93
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 8a 0b 	call	0x1714	; 0x1714 <gfx_print_text>
	deactivate_output_bit(IO_INPUT_1);
     d9c:	81 e3       	ldi	r24, 0x31	; 49
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	21 e3       	ldi	r18, 0x31	; 49
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	20 81       	ld	r18, Z
     da8:	2f 7e       	andi	r18, 0xEF	; 239
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
	while(get_input_bit(IO_INPUT_1)){ ///If S3 start-button not pressed, do nothing (only text on display)
     dae:	00 00       	nop
     db0:	80 e3       	ldi	r24, 0x30	; 48
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	80 71       	andi	r24, 0x10	; 16
     dbe:	99 27       	eor	r25, r25
     dc0:	89 2b       	or	r24, r25
     dc2:	b1 f7       	brne	.-20     	; 0xdb0 <start+0x9a>
	}

	if (!get_input_bit(IO_INPUT_1)) /// If S3 start button pressed
     dc4:	80 e3       	ldi	r24, 0x30	; 48
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	80 71       	andi	r24, 0x10	; 16
     dd2:	99 27       	eor	r25, r25
     dd4:	89 2b       	or	r24, r25
     dd6:	09 f0       	breq	.+2      	; 0xdda <start+0xc4>
     dd8:	58 c0       	rjmp	.+176    	; 0xe8a <start+0x174>
	{
		delay(800); /// wait 0,8s before start of the countdown
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
		for(int i=4; i>0; i--){ /// 4 steps before the program will be start
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	49 c0       	rjmp	.+146    	; 0xe7e <start+0x168>
			if(i>1){ /// For first 3 steps:
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	02 97       	sbiw	r24, 0x02	; 2
     df2:	34 f1       	brlt	.+76     	; 0xe40 <start+0x12a>
				leds_set_status(LEDS_RED, led1); /// Sets the left LED to red
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	68 2f       	mov	r22, r24
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				leds_set_status(LEDS_RED, led2); /// Sets the right LED to red
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	68 2f       	mov	r22, r24
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				cli();	/// Atomic state: so that the sounds are played correctly.
     e08:	f8 94       	cli
				tone(392, 100);
     e0a:	64 e6       	ldi	r22, 0x64	; 100
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	88 e8       	ldi	r24, 0x88	; 136
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 d7 03 	call	0x7ae	; 0x7ae <tone>
				sei(); /// End of Atomic state: interrupts are now possible again
     e16:	78 94       	sei
				leds_set_status(LEDS_OFF, led1); /// Switch off left LED
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	68 2f       	mov	r22, r24
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				leds_set_status(LEDS_OFF, led2);/// Switch off right LED
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	68 2f       	mov	r22, r24
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				led1++; ///change the number of left LED
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
				led2--; ///change the number of right LED
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	8b 83       	std	Y+3, r24	; 0x03
			}

			if(i==1){ /// For the last step:
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	91 f4       	brne	.+36     	; 0xe6c <start+0x156>
				leds_set_status(LEDS_GREEN, led1); /// Sets the left LED to green
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	68 2f       	mov	r22, r24
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				leds_set_status(LEDS_GREEN, led2); /// Sets the left LED to green
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	68 2f       	mov	r22, r24
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 29 11 	call	0x2252	; 0x2252 <leds_set_status>
				cli(); /// Atomic state: so that the sounds are played correctly.
     e5c:	f8 94       	cli
				tone(800, 100);
     e5e:	64 e6       	ldi	r22, 0x64	; 100
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 d7 03 	call	0x7ae	; 0x7ae <tone>
				sei(); /// End of Atomic state: interrupts are now possible again
     e6a:	78 94       	sei
			}
			delay(500); /// wait 0,5s
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
	}

	if (!get_input_bit(IO_INPUT_1)) /// If S3 start button pressed
	{
		delay(800); /// wait 0,8s before start of the countdown
		for(int i=4; i>0; i--){ /// 4 steps before the program will be start
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	9e 81       	ldd	r25, Y+6	; 0x06
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	18 16       	cp	r1, r24
     e84:	19 06       	cpc	r1, r25
     e86:	0c f4       	brge	.+2      	; 0xe8a <start+0x174>
     e88:	b1 cf       	rjmp	.-158    	; 0xdec <start+0xd6>
				sei(); /// End of Atomic state: interrupts are now possible again
			}
			delay(500); /// wait 0,5s
		}
	}
	leds_set_headlights(0); /// In the end switch off headlight
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 57 11 	call	0x22ae	; 0x22ae <leds_set_headlights>
}
     e92:	00 00       	nop
     e94:	26 96       	adiw	r28, 0x06	; 6
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <display_write>:
     ea6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eaa:	38 2f       	mov	r19, r24
     eac:	31 70       	andi	r19, 0x01	; 1
     eae:	29 2f       	mov	r18, r25
     eb0:	2e 7f       	andi	r18, 0xFE	; 254
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	93 27       	eor	r25, r19
     eb6:	92 2b       	or	r25, r18
     eb8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ebc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ec0:	9d 7f       	andi	r25, 0xFD	; 253
     ec2:	31 11       	cpse	r19, r1
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <display_write+0x24>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <display_write+0x26>
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	92 2b       	or	r25, r18
     ece:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ed2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ed6:	97 7f       	andi	r25, 0xF7	; 247
     ed8:	81 fd       	sbrc	r24, 1
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <display_write+0x3a>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <display_write+0x3c>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	89 2b       	or	r24, r25
     ee4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ee8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eec:	8f 7e       	andi	r24, 0xEF	; 239
     eee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	8a bb       	out	0x1a, r24	; 26
     ef6:	6b bb       	out	0x1b, r22	; 27
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	8a 95       	dec	r24
     efc:	f1 f7       	brne	.-4      	; 0xefa <display_write+0x54>
     efe:	00 00       	nop
     f00:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	8a 95       	dec	r24
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <display_write+0x66>
     f10:	00 00       	nop
     f12:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	8a 95       	dec	r24
     f20:	f1 f7       	brne	.-4      	; 0xf1e <display_write+0x78>
     f22:	00 00       	nop
     f24:	1b ba       	out	0x1b, r1	; 27
     f26:	1a ba       	out	0x1a, r1	; 26
     f28:	08 95       	ret

00000f2a <display_read>:
     f2a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f2e:	38 2f       	mov	r19, r24
     f30:	31 70       	andi	r19, 0x01	; 1
     f32:	29 2f       	mov	r18, r25
     f34:	2e 7f       	andi	r18, 0xFE	; 254
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	93 27       	eor	r25, r19
     f3a:	92 2b       	or	r25, r18
     f3c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f40:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f44:	9d 7f       	andi	r25, 0xFD	; 253
     f46:	31 11       	cpse	r19, r1
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <display_read+0x24>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <display_read+0x26>
     f4e:	22 e0       	ldi	r18, 0x02	; 2
     f50:	92 2b       	or	r25, r18
     f52:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f56:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f5a:	97 7f       	andi	r25, 0xF7	; 247
     f5c:	81 fd       	sbrc	r24, 1
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <display_read+0x3a>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <display_read+0x3c>
     f64:	88 e0       	ldi	r24, 0x08	; 8
     f66:	89 2b       	or	r24, r25
     f68:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f6c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f70:	80 61       	ori	r24, 0x10	; 16
     f72:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f76:	1a ba       	out	0x1a, r1	; 26
     f78:	85 e0       	ldi	r24, 0x05	; 5
     f7a:	8a 95       	dec	r24
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <display_read+0x50>
     f7e:	00 00       	nop
     f80:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f84:	84 60       	ori	r24, 0x04	; 4
     f86:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f8a:	95 e1       	ldi	r25, 0x15	; 21
     f8c:	9a 95       	dec	r25
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <display_read+0x62>
     f90:	00 00       	nop
     f92:	89 b3       	in	r24, 0x19	; 25
     f94:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f98:	9b 7f       	andi	r25, 0xFB	; 251
     f9a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f9e:	95 e0       	ldi	r25, 0x05	; 5
     fa0:	9a 95       	dec	r25
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <display_read+0x76>
     fa4:	00 00       	nop
     fa6:	08 95       	ret

00000fa8 <display_wait>:
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <display_type>
     fb2:	91 11       	cpse	r25, r1
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <display_wait+0x12>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <display_wait+0x34>
     fba:	c8 2f       	mov	r28, r24
     fbc:	c1 70       	andi	r28, 0x01	; 1
     fbe:	00 e0       	ldi	r16, 0x00	; 0
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	8c 2f       	mov	r24, r28
     fc4:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
     fc8:	0f 5f       	subi	r16, 0xFF	; 255
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	87 ff       	sbrs	r24, 7
     fce:	05 c0       	rjmp	.+10     	; 0xfda <display_wait+0x32>
     fd0:	0f 3f       	cpi	r16, 0xFF	; 255
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	18 07       	cpc	r17, r24
     fd6:	a9 f7       	brne	.-22     	; 0xfc2 <display_wait+0x1a>
     fd8:	ee cf       	rjmp	.-36     	; 0xfb6 <display_wait+0xe>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	08 95       	ret

00000fe4 <display_init>:
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     fea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fee:	88 60       	ori	r24, 0x08	; 8
     ff0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     ff4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     ffe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1008:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1012:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    101c:	b8 9a       	sbi	0x17, 0	; 23
    101e:	1a ba       	out	0x1a, r1	; 26
    1020:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    102a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    102e:	8f 7e       	andi	r24, 0xEF	; 239
    1030:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1034:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1038:	8b 7f       	andi	r24, 0xFB	; 251
    103a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    103e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1042:	8e 7f       	andi	r24, 0xFE	; 254
    1044:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1048:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    104c:	8d 7f       	andi	r24, 0xFD	; 253
    104e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1052:	c0 98       	cbi	0x18, 0	; 24
    1054:	97 9b       	sbis	0x12, 7	; 18
    1056:	09 c0       	rjmp	.+18     	; 0x106a <display_init+0x86>
    1058:	97 98       	cbi	0x12, 7	; 18
    105a:	8f e9       	ldi	r24, 0x9F	; 159
    105c:	9f e0       	ldi	r25, 0x0F	; 15
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <display_init+0x7a>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <display_init+0x80>
    1064:	00 00       	nop
    1066:	97 9a       	sbi	0x12, 7	; 18
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <display_init+0x92>
    106a:	8f e9       	ldi	r24, 0x9F	; 159
    106c:	9f e0       	ldi	r25, 0x0F	; 15
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <display_init+0x8a>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <display_init+0x90>
    1074:	00 00       	nop
    1076:	c0 9a       	sbi	0x18, 0	; 24
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    107e:	88 23       	and	r24, r24
    1080:	51 f0       	breq	.+20     	; 0x1096 <display_init+0xb2>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1088:	88 23       	and	r24, r24
    108a:	11 f0       	breq	.+4      	; 0x1090 <display_init+0xac>
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <display_init+0xae>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
    1096:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
    109a:	8f 3f       	cpi	r24, 0xFF	; 255
    109c:	11 f4       	brne	.+4      	; 0x10a2 <display_init+0xbe>
    109e:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <display_type>
    10a2:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
    10a6:	08 95       	ret

000010a8 <pwm_init>:
    10a8:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <pwm_timer_sub+0x1>
    10ac:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <pwm_timer_sub>
    10b0:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <pwm_timer_ms+0x1>
    10b4:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <pwm_timer_ms>
    10b8:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <pwm_timer_sec>
    10bc:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <pwm_timer_sec+0x1>
    10c0:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <pwm_timer_sec+0x2>
    10c4:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <pwm_timer_sec+0x3>
    10c8:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <pwm_channel_A+0x1>
    10cc:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <pwm_channel_A>
    10d0:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <pwm_channel_B+0x1>
    10d4:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <pwm_channel_B>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    10e0:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    10e4:	c5 98       	cbi	0x18, 5	; 24
    10e6:	c6 98       	cbi	0x18, 6	; 24
    10e8:	bd 9a       	sbi	0x17, 5	; 23
    10ea:	be 9a       	sbi	0x17, 6	; 23
    10ec:	bf 9a       	sbi	0x17, 7	; 23
    10ee:	c7 9a       	sbi	0x18, 7	; 24
    10f0:	1d bc       	out	0x2d, r1	; 45
    10f2:	1c bc       	out	0x2c, r1	; 44
    10f4:	8a ea       	ldi	r24, 0xAA	; 170
    10f6:	8f bd       	out	0x2f, r24	; 47
    10f8:	82 e1       	ldi	r24, 0x12	; 18
    10fa:	8e bd       	out	0x2e, r24	; 46
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	94 e0       	ldi	r25, 0x04	; 4
    1100:	97 bd       	out	0x27, r25	; 39
    1102:	86 bd       	out	0x26, r24	; 38
    1104:	87 b7       	in	r24, 0x37	; 55
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	87 bf       	out	0x37, r24	; 55
    110a:	08 95       	ret

0000110c <__vector_14>:
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pwm_timer_sub>
    1128:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pwm_timer_sub+0x1>
    112c:	9c 01       	movw	r18, r24
    112e:	28 5e       	subi	r18, 0xE8	; 232
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	28 3e       	cpi	r18, 0xE8	; 232
    1134:	43 e0       	ldi	r20, 0x03	; 3
    1136:	34 07       	cpc	r19, r20
    1138:	28 f4       	brcc	.+10     	; 0x1144 <__vector_14+0x38>
    113a:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <pwm_timer_sub+0x1>
    113e:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <pwm_timer_sub>
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <__vector_14+0x56>
    1144:	80 5d       	subi	r24, 0xD0	; 208
    1146:	93 40       	sbci	r25, 0x03	; 3
    1148:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <pwm_timer_sub+0x1>
    114c:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <pwm_timer_sub>
    1150:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1154:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    115e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    1162:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1166:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    116a:	9c 01       	movw	r18, r24
    116c:	2f 5f       	subi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	28 3e       	cpi	r18, 0xE8	; 232
    1172:	43 e0       	ldi	r20, 0x03	; 3
    1174:	34 07       	cpc	r19, r20
    1176:	28 f4       	brcc	.+10     	; 0x1182 <__vector_14+0x76>
    1178:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <pwm_timer_ms+0x1>
    117c:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <pwm_timer_ms>
    1180:	19 c0       	rjmp	.+50     	; 0x11b4 <__vector_14+0xa8>
    1182:	87 5e       	subi	r24, 0xE7	; 231
    1184:	93 40       	sbci	r25, 0x03	; 3
    1186:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    118a:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    118e:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <pwm_timer_sec>
    1192:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <pwm_timer_sec+0x1>
    1196:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <pwm_timer_sec+0x2>
    119a:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <pwm_timer_sec+0x3>
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	a1 1d       	adc	r26, r1
    11a2:	b1 1d       	adc	r27, r1
    11a4:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <pwm_timer_sec>
    11a8:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <pwm_timer_sec+0x1>
    11ac:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <pwm_timer_sec+0x2>
    11b0:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <pwm_timer_sec+0x3>
    11b4:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    11b8:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    11bc:	8f 3f       	cpi	r24, 0xFF	; 255
    11be:	23 e0       	ldi	r18, 0x03	; 3
    11c0:	92 07       	cpc	r25, r18
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <__vector_14+0xbc>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	9b bd       	out	0x2b, r25	; 43
    11ca:	8a bd       	out	0x2a, r24	; 42
    11cc:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    11d0:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    11d4:	8f 3f       	cpi	r24, 0xFF	; 255
    11d6:	43 e0       	ldi	r20, 0x03	; 3
    11d8:	94 07       	cpc	r25, r20
    11da:	10 f0       	brcs	.+4      	; 0x11e0 <__vector_14+0xd4>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	99 bd       	out	0x29, r25	; 41
    11e2:	88 bd       	out	0x28, r24	; 40
    11e4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    11e8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    11ec:	8f 3f       	cpi	r24, 0xFF	; 255
    11ee:	23 e0       	ldi	r18, 0x03	; 3
    11f0:	92 07       	cpc	r25, r18
    11f2:	10 f0       	brcs	.+4      	; 0x11f8 <__vector_14+0xec>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    11fc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <delay>:
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	41 f0       	breq	.+16     	; 0x122c <delay+0x14>
    121c:	ef e9       	ldi	r30, 0x9F	; 159
    121e:	ff e0       	ldi	r31, 0x0F	; 15
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <delay+0x8>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <delay+0xe>
    1226:	00 00       	nop
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f6 cf       	rjmp	.-20     	; 0x1218 <delay>
    122c:	08 95       	ret

0000122e <spi_tx>:
    122e:	8f b9       	out	0x0f, r24	; 15
    1230:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <spi_tx_chk>
    1234:	89 27       	eor	r24, r25
    1236:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <spi_tx_chk>
    123a:	08 95       	ret

0000123c <spi_restart_transmission>:
    123c:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <spi_pos>
    1240:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <spi_tx_size>
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	98 0f       	add	r25, r24
    1248:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <spi_size>
    124c:	96 e9       	ldi	r25, 0x96	; 150
    124e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <spi_tx_chk>
    1252:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    1256:	f8 94       	cli
    1258:	b0 99       	sbic	0x16, 0	; 22
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <spi_restart_transmission+0x26>
    125c:	78 94       	sei
    125e:	00 00       	nop
    1260:	fa cf       	rjmp	.-12     	; 0x1256 <spi_restart_transmission+0x1a>
    1262:	90 ec       	ldi	r25, 0xC0	; 192
    1264:	9d b9       	out	0x0d, r25	; 13
    1266:	0e 94 17 09 	call	0x122e	; 0x122e <spi_tx>
    126a:	77 9a       	sbi	0x0e, 7	; 14
    126c:	78 94       	sei
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret

00001272 <spi_init>:
    1272:	b8 98       	cbi	0x17, 0	; 23
    1274:	c0 98       	cbi	0x18, 0	; 24
    1276:	bb 9a       	sbi	0x17, 3	; 23
    1278:	c3 9a       	sbi	0x18, 3	; 24
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0c 94 1e 09 	jmp	0x123c	; 0x123c <spi_restart_transmission>

00001280 <__vector_17>:
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	0b b6       	in	r0, 0x3b	; 59
    128c:	0f 92       	push	r0
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	8f b1       	in	r24, 0x0f	; 15
    12a8:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <spi_rx_chk>
    12ac:	98 27       	eor	r25, r24
    12ae:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    12b2:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <spi_pos>
    12b6:	e1 11       	cpse	r30, r1
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <__vector_17+0x66>
    12ba:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <spi_rx_size>
    12be:	8c 31       	cpi	r24, 0x1C	; 28
    12c0:	30 f0       	brcs	.+12     	; 0x12ce <__vector_17+0x4e>
    12c2:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <spi_tx_size>
    12c6:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <__vector_17+0x60>
    12ce:	48 2f       	mov	r20, r24
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <spi_size>
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	42 17       	cp	r20, r18
    12da:	53 07       	cpc	r21, r19
    12dc:	fc f0       	brlt	.+62     	; 0x131c <__vector_17+0x9c>
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <spi_size>
    12e4:	1b c0       	rjmp	.+54     	; 0x131c <__vector_17+0x9c>
    12e6:	2e 2f       	mov	r18, r30
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <spi_rx_size>
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	42 17       	cp	r20, r18
    12f2:	53 07       	cpc	r21, r19
    12f4:	2c f0       	brlt	.+10     	; 0x1300 <__vector_17+0x80>
    12f6:	d9 01       	movw	r26, r18
    12f8:	ab 51       	subi	r26, 0x1B	; 27
    12fa:	bc 4f       	sbci	r27, 0xFC	; 252
    12fc:	8c 93       	st	X, r24
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <__vector_17+0x9c>
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	31 09       	sbc	r19, r1
    1304:	42 17       	cp	r20, r18
    1306:	53 07       	cpc	r21, r19
    1308:	49 f4       	brne	.+18     	; 0x131c <__vector_17+0x9c>
    130a:	99 23       	and	r25, r25
    130c:	39 f0       	breq	.+14     	; 0x131c <__vector_17+0x9c>
    130e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <spi_err_cnt>
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <spi_err_cnt>
    1318:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    131c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <spi_tx_size>
    1320:	e8 17       	cp	r30, r24
    1322:	28 f4       	brcc	.+10     	; 0x132e <__vector_17+0xae>
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	ea 53       	subi	r30, 0x3A	; 58
    1328:	fc 4f       	sbci	r31, 0xFC	; 252
    132a:	80 81       	ld	r24, Z
    132c:	0a c0       	rjmp	.+20     	; 0x1342 <__vector_17+0xc2>
    132e:	e8 13       	cpse	r30, r24
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <__vector_17+0xb8>
    1332:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <spi_tx_chk>
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <__vector_17+0xc2>
    1338:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <spi_size>
    133c:	e8 17       	cp	r30, r24
    133e:	48 f4       	brcc	.+18     	; 0x1352 <__vector_17+0xd2>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	0e 94 17 09 	call	0x122e	; 0x122e <spi_tx>
    1346:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <spi_pos>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <spi_pos>
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <__vector_17+0xf4>
    1352:	b8 98       	cbi	0x17, 0	; 23
    1354:	c0 98       	cbi	0x18, 0	; 24
    1356:	1d b8       	out	0x0d, r1	; 13
    1358:	b8 98       	cbi	0x17, 0	; 23
    135a:	c0 98       	cbi	0x18, 0	; 24
    135c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <spi_frame_cnt>
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <spi_frame_cnt>
    1366:	78 94       	sei
    1368:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <spi_rx_size>
    136c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <spi_finished_callback>
    1370:	0e 94 1e 09 	call	0x123c	; 0x123c <spi_restart_transmission>
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0b be       	out	0x3b, r0	; 59
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <gfx_store_disp_tile>:
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	c8 2f       	mov	r28, r24
    13a0:	d8 eb       	ldi	r29, 0xB8	; 184
    13a2:	d6 0f       	add	r29, r22
    13a4:	88 30       	cpi	r24, 0x08	; 8
    13a6:	00 f5       	brcc	.+64     	; 0x13e8 <gfx_store_disp_tile+0x4e>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    13ae:	6d 2f       	mov	r22, r29
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    13bc:	6c 2f       	mov	r22, r28
    13be:	66 0f       	add	r22, r22
    13c0:	66 0f       	add	r22, r22
    13c2:	66 0f       	add	r22, r22
    13c4:	60 5c       	subi	r22, 0xC0	; 192
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    13cc:	c8 e0       	ldi	r28, 0x08	; 8
    13ce:	d4 e0       	ldi	r29, 0x04	; 4
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    13d6:	69 91       	ld	r22, Y+
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	c0 31       	cpi	r28, 0x10	; 16
    13e2:	d8 07       	cpc	r29, r24
    13e4:	a9 f7       	brne	.-22     	; 0x13d0 <gfx_store_disp_tile+0x36>
    13e6:	20 c0       	rjmp	.+64     	; 0x1428 <gfx_store_disp_tile+0x8e>
    13e8:	c8 50       	subi	r28, 0x08	; 8
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    13f0:	6d 2f       	mov	r22, r29
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    13fe:	cc 0f       	add	r28, r28
    1400:	cc 0f       	add	r28, r28
    1402:	cc 0f       	add	r28, r28
    1404:	60 e4       	ldi	r22, 0x40	; 64
    1406:	6c 0f       	add	r22, r28
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    140e:	c8 e0       	ldi	r28, 0x08	; 8
    1410:	d4 e0       	ldi	r29, 0x04	; 4
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1418:	69 91       	ld	r22, Y+
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	c0 31       	cpi	r28, 0x10	; 16
    1424:	d8 07       	cpc	r29, r24
    1426:	a9 f7       	brne	.-22     	; 0x1412 <gfx_store_disp_tile+0x78>
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <gfx_get_x>:
    142e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1432:	08 95       	ret

00001434 <gfx_get_y>:
    1434:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1438:	08 95       	ret

0000143a <gfx_draw_mode>:
    143a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    143e:	08 95       	ret

00001440 <gfx_move>:
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	d8 2f       	mov	r29, r24
    1446:	c6 2f       	mov	r28, r22
    1448:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    144c:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <gfx_y>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    145c:	c6 95       	lsr	r28
    145e:	c6 95       	lsr	r28
    1460:	c6 95       	lsr	r28
    1462:	c8 54       	subi	r28, 0x48	; 72
    1464:	6c 2f       	mov	r22, r28
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    146c:	6c 2f       	mov	r22, r28
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1480:	60 e4       	ldi	r22, 0x40	; 64
    1482:	d1 34       	cpi	r29, 0x41	; 65
    1484:	28 f0       	brcs	.+10     	; 0x1490 <gfx_move+0x50>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    148c:	6d 2f       	mov	r22, r29
    148e:	05 c0       	rjmp	.+10     	; 0x149a <gfx_move+0x5a>
    1490:	6d 0f       	add	r22, r29
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1498:	60 e4       	ldi	r22, 0x40	; 64
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	0c 94 53 07 	jmp	0xea6	; 0xea6 <display_write>

000014a4 <gfx_fill>:
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	18 2f       	mov	r17, r24
    14ac:	c8 eb       	ldi	r28, 0xB8	; 184
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14ba:	6c 2f       	mov	r22, r28
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    14c2:	6c 2f       	mov	r22, r28
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    14ca:	d0 e4       	ldi	r29, 0x40	; 64
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14d8:	61 2f       	mov	r22, r17
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    14e0:	61 2f       	mov	r22, r17
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    14e8:	d1 50       	subi	r29, 0x01	; 1
    14ea:	81 f7       	brne	.-32     	; 0x14cc <gfx_fill+0x28>
    14ec:	cf 5f       	subi	r28, 0xFF	; 255
    14ee:	c0 3c       	cpi	r28, 0xC0	; 192
    14f0:	f1 f6       	brne	.-68     	; 0x14ae <gfx_fill+0xa>
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    14fe:	68 eb       	ldi	r22, 0xB8	; 184
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1506:	68 eb       	ldi	r22, 0xB8	; 184
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0c 94 53 07 	jmp	0xea6	; 0xea6 <display_write>

00001514 <gfx_display_write2>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	d8 2f       	mov	r29, r24
    151e:	c6 2f       	mov	r28, r22
    1520:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1524:	87 fd       	sbrc	r24, 7
    1526:	37 c0       	rjmp	.+110    	; 0x1596 <gfx_display_write2+0x82>
    1528:	11 e0       	ldi	r17, 0x01	; 1
    152a:	80 34       	cpi	r24, 0x40	; 64
    152c:	08 f4       	brcc	.+2      	; 0x1530 <gfx_display_write2+0x1c>
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	81 2f       	mov	r24, r17
    1532:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1536:	02 e0       	ldi	r16, 0x02	; 2
    1538:	01 0f       	add	r16, r17
    153a:	80 2f       	mov	r24, r16
    153c:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1540:	80 2f       	mov	r24, r16
    1542:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1546:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <gfx_dm>
    154a:	92 ff       	sbrs	r25, 2
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <gfx_display_write2+0x3e>
    154e:	d0 95       	com	r29
    1550:	9b 7f       	andi	r25, 0xFB	; 251
    1552:	dc 23       	and	r29, r28
    1554:	91 11       	cpse	r25, r1
    1556:	02 c0       	rjmp	.+4      	; 0x155c <gfx_display_write2+0x48>
    1558:	c8 2f       	mov	r28, r24
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <gfx_display_write2+0x50>
    155c:	91 30       	cpi	r25, 0x01	; 1
    155e:	21 f4       	brne	.+8      	; 0x1568 <gfx_display_write2+0x54>
    1560:	c0 95       	com	r28
    1562:	c8 23       	and	r28, r24
    1564:	cd 2b       	or	r28, r29
    1566:	02 c0       	rjmp	.+4      	; 0x156c <gfx_display_write2+0x58>
    1568:	c8 2f       	mov	r28, r24
    156a:	cd 27       	eor	r28, r29
    156c:	81 2f       	mov	r24, r17
    156e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1572:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <gfx_x>
    1576:	60 64       	ori	r22, 0x40	; 64
    1578:	81 2f       	mov	r24, r17
    157a:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    157e:	81 2f       	mov	r24, r17
    1580:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1584:	6c 2f       	mov	r22, r28
    1586:	80 2f       	mov	r24, r16
    1588:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    158c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <gfx_char_width>:
    15a0:	90 ee       	ldi	r25, 0xE0	; 224
    15a2:	98 0f       	add	r25, r24
    15a4:	90 36       	cpi	r25, 0x60	; 96
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <gfx_char_width+0xa>
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	80 52       	subi	r24, 0x20	; 32
    15ac:	96 e0       	ldi	r25, 0x06	; 6
    15ae:	89 9f       	mul	r24, r25
    15b0:	f0 01       	movw	r30, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	ec 59       	subi	r30, 0x9C	; 156
    15b6:	fe 4f       	sbci	r31, 0xFE	; 254
    15b8:	90 81       	ld	r25, Z
    15ba:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    15be:	81 11       	cpse	r24, r1
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <gfx_char_width+0x24>
    15c2:	9f e1       	ldi	r25, 0x1F	; 31
    15c4:	25 e0       	ldi	r18, 0x05	; 5
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 fd       	sbrc	r25, 0
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	96 95       	lsr	r25
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	d9 f7       	brne	.-10     	; 0x15c8 <gfx_char_width+0x28>
    15d2:	08 95       	ret

000015d4 <gfx_print_char_base>:
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	c6 2f       	mov	r28, r22
    15f0:	90 ee       	ldi	r25, 0xE0	; 224
    15f2:	98 0f       	add	r25, r24
    15f4:	90 36       	cpi	r25, 0x60	; 96
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <gfx_print_char_base+0x26>
    15f8:	80 e8       	ldi	r24, 0x80	; 128
    15fa:	80 52       	subi	r24, 0x20	; 32
    15fc:	26 e0       	ldi	r18, 0x06	; 6
    15fe:	82 9f       	mul	r24, r18
    1600:	c0 01       	movw	r24, r0
    1602:	11 24       	eor	r1, r1
    1604:	fc 01       	movw	r30, r24
    1606:	eb 59       	subi	r30, 0x9B	; 155
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	7f 01       	movw	r14, r30
    160c:	fc 01       	movw	r30, r24
    160e:	ec 59       	subi	r30, 0x9C	; 156
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	90 80       	ld	r9, Z
    1614:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    1618:	81 11       	cpse	r24, r1
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <gfx_print_char_base+0x4c>
    161c:	9f e1       	ldi	r25, 0x1F	; 31
    161e:	99 2e       	mov	r9, r25
    1620:	ac 2e       	mov	r10, r28
    1622:	0c 2e       	mov	r0, r28
    1624:	00 0c       	add	r0, r0
    1626:	bb 08       	sbc	r11, r11
    1628:	6f ef       	ldi	r22, 0xFF	; 255
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	6b 01       	movw	r12, r22
    162e:	0c 2e       	mov	r0, r28
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <gfx_print_char_base+0x60>
    1632:	cc 0c       	add	r12, r12
    1634:	0a 94       	dec	r0
    1636:	ea f7       	brpl	.-6      	; 0x1632 <gfx_print_char_base+0x5e>
    1638:	8c 2c       	mov	r8, r12
    163a:	00 27       	eor	r16, r16
    163c:	11 27       	eor	r17, r17
    163e:	0a 19       	sub	r16, r10
    1640:	1b 09       	sbc	r17, r11
    1642:	00 2e       	mov	r0, r16
    1644:	02 c0       	rjmp	.+4      	; 0x164a <gfx_print_char_base+0x76>
    1646:	75 95       	asr	r23
    1648:	67 95       	ror	r22
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <gfx_print_char_base+0x72>
    164e:	d6 2f       	mov	r29, r22
    1650:	85 e0       	ldi	r24, 0x05	; 5
    1652:	78 2e       	mov	r7, r24
    1654:	90 fe       	sbrs	r9, 0
    1656:	15 c0       	rjmp	.+42     	; 0x1682 <gfx_print_char_base+0xae>
    1658:	f7 01       	movw	r30, r14
    165a:	80 81       	ld	r24, Z
    165c:	c7 fd       	sbrc	r28, 7
    165e:	07 c0       	rjmp	.+14     	; 0x166e <gfx_print_char_base+0x9a>
    1660:	68 2d       	mov	r22, r8
    1662:	0a 2c       	mov	r0, r10
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <gfx_print_char_base+0x94>
    1666:	88 0f       	add	r24, r24
    1668:	0a 94       	dec	r0
    166a:	ea f7       	brpl	.-6      	; 0x1666 <gfx_print_char_base+0x92>
    166c:	08 c0       	rjmp	.+16     	; 0x167e <gfx_print_char_base+0xaa>
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	00 2e       	mov	r0, r16
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <gfx_print_char_base+0xa4>
    1674:	95 95       	asr	r25
    1676:	87 95       	ror	r24
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <gfx_print_char_base+0xa0>
    167c:	6d 2f       	mov	r22, r29
    167e:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_display_write2>
    1682:	96 94       	lsr	r9
    1684:	ff ef       	ldi	r31, 0xFF	; 255
    1686:	ef 1a       	sub	r14, r31
    1688:	ff 0a       	sbc	r15, r31
    168a:	7a 94       	dec	r7
    168c:	71 10       	cpse	r7, r1
    168e:	e2 cf       	rjmp	.-60     	; 0x1654 <gfx_print_char_base+0x80>
    1690:	c7 fd       	sbrc	r28, 7
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <gfx_print_char_base+0xc4>
    1694:	6c 2d       	mov	r22, r12
    1696:	07 c0       	rjmp	.+14     	; 0x16a6 <gfx_print_char_base+0xd2>
    1698:	6f ef       	ldi	r22, 0xFF	; 255
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <gfx_print_char_base+0xce>
    169e:	75 95       	asr	r23
    16a0:	67 95       	ror	r22
    16a2:	0a 95       	dec	r16
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <gfx_print_char_base+0xca>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <gfx_display_write2>

000016c6 <gfx_print_char>:
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	d8 2f       	mov	r29, r24
    16ce:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <gfx_x>
    16d2:	c0 91 10 04 	lds	r28, 0x0410	; 0x800410 <gfx_y>
    16d6:	c7 70       	andi	r28, 0x07	; 7
    16d8:	6c 2f       	mov	r22, r28
    16da:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <gfx_print_char_base>
    16de:	cc 23       	and	r28, r28
    16e0:	a9 f0       	breq	.+42     	; 0x170c <gfx_print_char+0x46>
    16e2:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    16e6:	68 5f       	subi	r22, 0xF8	; 248
    16e8:	81 2f       	mov	r24, r17
    16ea:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    16ee:	68 ef       	ldi	r22, 0xF8	; 248
    16f0:	6c 0f       	add	r22, r28
    16f2:	8d 2f       	mov	r24, r29
    16f4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <gfx_print_char_base>
    16f8:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    16fc:	68 50       	subi	r22, 0x08	; 8
    16fe:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <gfx_move>
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	08 95       	ret

00001714 <gfx_print_text>:
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	89 91       	ld	r24, Y+
    171c:	88 23       	and	r24, r24
    171e:	19 f0       	breq	.+6      	; 0x1726 <gfx_print_text+0x12>
    1720:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <gfx_print_char>
    1724:	fa cf       	rjmp	.-12     	; 0x171a <gfx_print_text+0x6>
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <gfx_text_width>:
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	8c 01       	movw	r16, r24
    1734:	c0 e0       	ldi	r28, 0x00	; 0
    1736:	f8 01       	movw	r30, r16
    1738:	81 91       	ld	r24, Z+
    173a:	8f 01       	movw	r16, r30
    173c:	88 23       	and	r24, r24
    173e:	31 f0       	breq	.+12     	; 0x174c <gfx_text_width+0x20>
    1740:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <gfx_char_width>
    1744:	8c 0f       	add	r24, r28
    1746:	c1 e0       	ldi	r28, 0x01	; 1
    1748:	c8 0f       	add	r28, r24
    174a:	f5 cf       	rjmp	.-22     	; 0x1736 <gfx_text_width+0xa>
    174c:	8c 2f       	mov	r24, r28
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <gfx_print_text_P>:
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
    175c:	ce 01       	movw	r24, r28
    175e:	fe 01       	movw	r30, r28
    1760:	24 91       	lpm	r18, Z
    1762:	22 23       	and	r18, r18
    1764:	31 f0       	breq	.+12     	; 0x1772 <gfx_print_text_P+0x1c>
    1766:	21 96       	adiw	r28, 0x01	; 1
    1768:	fc 01       	movw	r30, r24
    176a:	84 91       	lpm	r24, Z
    176c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <gfx_print_char>
    1770:	f5 cf       	rjmp	.-22     	; 0x175c <gfx_print_text_P+0x6>
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <gfx_text_width_P>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	8c 01       	movw	r16, r24
    1780:	c0 e0       	ldi	r28, 0x00	; 0
    1782:	c8 01       	movw	r24, r16
    1784:	f8 01       	movw	r30, r16
    1786:	24 91       	lpm	r18, Z
    1788:	22 23       	and	r18, r18
    178a:	51 f0       	breq	.+20     	; 0x17a0 <gfx_text_width_P+0x28>
    178c:	0f 5f       	subi	r16, 0xFF	; 255
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	fc 01       	movw	r30, r24
    1792:	84 91       	lpm	r24, Z
    1794:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <gfx_char_width>
    1798:	8c 0f       	add	r24, r28
    179a:	c1 e0       	ldi	r28, 0x01	; 1
    179c:	c8 0f       	add	r28, r24
    179e:	f1 cf       	rjmp	.-30     	; 0x1782 <gfx_text_width_P+0xa>
    17a0:	8c 2f       	mov	r24, r28
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <gfx_init>:
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17b0:	6f e3       	ldi	r22, 0x3F	; 63
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17be:	60 ec       	ldi	r22, 0xC0	; 192
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17cc:	60 e4       	ldi	r22, 0x40	; 64
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17da:	68 eb       	ldi	r22, 0xB8	; 184
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17e8:	6f e3       	ldi	r22, 0x3F	; 63
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    17f6:	60 ec       	ldi	r22, 0xC0	; 192
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1804:	60 e4       	ldi	r22, 0x40	; 64
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1812:	68 eb       	ldi	r22, 0xB8	; 184
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <gfx_fill>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    1826:	08 95       	ret

00001828 <gfx_set_proportional>:
    1828:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <gfx_proportional>
    182c:	08 95       	ret

0000182e <gfx_get_proportional>:
    182e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    1832:	08 95       	ret

00001834 <gfx_hline>:
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    183c:	97 70       	andi	r25, 0x07	; 7
    183e:	c1 e0       	ldi	r28, 0x01	; 1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <gfx_hline+0x10>
    1842:	cc 0f       	add	r28, r28
    1844:	9a 95       	dec	r25
    1846:	ea f7       	brpl	.-6      	; 0x1842 <gfx_hline+0xe>
    1848:	d8 2f       	mov	r29, r24
    184a:	dd 23       	and	r29, r29
    184c:	31 f0       	breq	.+12     	; 0x185a <gfx_hline+0x26>
    184e:	6c 2f       	mov	r22, r28
    1850:	8c 2f       	mov	r24, r28
    1852:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_display_write2>
    1856:	d1 50       	subi	r29, 0x01	; 1
    1858:	f8 cf       	rjmp	.-16     	; 0x184a <gfx_hline+0x16>
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <gfx_box>:
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	b8 2e       	mov	r11, r24
    1876:	c6 2f       	mov	r28, r22
    1878:	e0 90 07 04 	lds	r14, 0x0407	; 0x800407 <gfx_x>
    187c:	10 91 10 04 	lds	r17, 0x0410	; 0x800410 <gfx_y>
    1880:	81 2f       	mov	r24, r17
    1882:	87 70       	andi	r24, 0x07	; 7
    1884:	df ef       	ldi	r29, 0xFF	; 255
    1886:	01 c0       	rjmp	.+2      	; 0x188a <gfx_box+0x2a>
    1888:	dd 0f       	add	r29, r29
    188a:	8a 95       	dec	r24
    188c:	ea f7       	brpl	.-6      	; 0x1888 <gfx_box+0x28>
    188e:	88 e0       	ldi	r24, 0x08	; 8
    1890:	a8 2e       	mov	r10, r24
    1892:	cc 24       	eor	r12, r12
    1894:	ca 94       	dec	r12
    1896:	d1 2c       	mov	r13, r1
    1898:	cc 23       	and	r28, r28
    189a:	21 f1       	breq	.+72     	; 0x18e4 <gfx_box+0x84>
    189c:	81 2f       	mov	r24, r17
    189e:	87 70       	andi	r24, 0x07	; 7
    18a0:	0a 2d       	mov	r16, r10
    18a2:	08 1b       	sub	r16, r24
    18a4:	c0 17       	cp	r28, r16
    18a6:	48 f4       	brcc	.+18     	; 0x18ba <gfx_box+0x5a>
    18a8:	80 2f       	mov	r24, r16
    18aa:	8c 1b       	sub	r24, r28
    18ac:	96 01       	movw	r18, r12
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <gfx_box+0x54>
    18b0:	35 95       	asr	r19
    18b2:	27 95       	ror	r18
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <gfx_box+0x50>
    18b8:	d2 23       	and	r29, r18
    18ba:	fb 2c       	mov	r15, r11
    18bc:	ff 20       	and	r15, r15
    18be:	31 f0       	breq	.+12     	; 0x18cc <gfx_box+0x6c>
    18c0:	6d 2f       	mov	r22, r29
    18c2:	8d 2f       	mov	r24, r29
    18c4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_display_write2>
    18c8:	fa 94       	dec	r15
    18ca:	f8 cf       	rjmp	.-16     	; 0x18bc <gfx_box+0x5c>
    18cc:	8c 2f       	mov	r24, r28
    18ce:	0c 17       	cp	r16, r28
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <gfx_box+0x74>
    18d2:	80 2f       	mov	r24, r16
    18d4:	c8 1b       	sub	r28, r24
    18d6:	18 0f       	add	r17, r24
    18d8:	61 2f       	mov	r22, r17
    18da:	8e 2d       	mov	r24, r14
    18dc:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    18e0:	df ef       	ldi	r29, 0xFF	; 255
    18e2:	da cf       	rjmp	.-76     	; 0x1898 <gfx_box+0x38>
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	08 95       	ret

000018fa <gfx_vline>:
    18fa:	68 2f       	mov	r22, r24
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <gfx_box>

00001902 <gfx_draw_xbm>:
    1902:	2f 92       	push	r2
    1904:	3f 92       	push	r3
    1906:	4f 92       	push	r4
    1908:	5f 92       	push	r5
    190a:	6f 92       	push	r6
    190c:	7f 92       	push	r7
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	48 2e       	mov	r4, r24
    1928:	d6 2f       	mov	r29, r22
    192a:	5a 01       	movw	r10, r20
    192c:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    1930:	80 90 10 04 	lds	r8, 0x0410	; 0x800410 <gfx_y>
    1934:	88 2d       	mov	r24, r8
    1936:	87 70       	andi	r24, 0x07	; 7
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	99 2e       	mov	r9, r25
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <gfx_draw_xbm+0x3e>
    193e:	99 0c       	add	r9, r9
    1940:	8a 95       	dec	r24
    1942:	ea f7       	brpl	.-6      	; 0x193e <gfx_draw_xbm+0x3c>
    1944:	24 2d       	mov	r18, r4
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	c9 01       	movw	r24, r18
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	97 fd       	sbrc	r25, 7
    194e:	07 96       	adiw	r24, 0x07	; 7
    1950:	23 e0       	ldi	r18, 0x03	; 3
    1952:	95 95       	asr	r25
    1954:	87 95       	ror	r24
    1956:	2a 95       	dec	r18
    1958:	e1 f7       	brne	.-8      	; 0x1952 <gfx_draw_xbm+0x50>
    195a:	c1 e0       	ldi	r28, 0x01	; 1
    195c:	c8 0f       	add	r28, r24
    195e:	ec 2e       	mov	r14, r28
    1960:	f1 2c       	mov	r15, r1
    1962:	67 01       	movw	r12, r14
    1964:	33 e0       	ldi	r19, 0x03	; 3
    1966:	cc 0c       	add	r12, r12
    1968:	dd 1c       	adc	r13, r13
    196a:	3a 95       	dec	r19
    196c:	e1 f7       	brne	.-8      	; 0x1966 <gfx_draw_xbm+0x64>
    196e:	51 2c       	mov	r5, r1
    1970:	48 e0       	ldi	r20, 0x08	; 8
    1972:	24 2e       	mov	r2, r20
    1974:	dd 23       	and	r29, r29
    1976:	09 f4       	brne	.+2      	; 0x197a <gfx_draw_xbm+0x78>
    1978:	56 c0       	rjmp	.+172    	; 0x1a26 <gfx_draw_xbm+0x124>
    197a:	88 2d       	mov	r24, r8
    197c:	87 70       	andi	r24, 0x07	; 7
    197e:	72 2c       	mov	r7, r2
    1980:	78 1a       	sub	r7, r24
    1982:	d7 15       	cp	r29, r7
    1984:	50 f4       	brcc	.+20     	; 0x199a <gfx_draw_xbm+0x98>
    1986:	87 2d       	mov	r24, r7
    1988:	8d 1b       	sub	r24, r29
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <gfx_draw_xbm+0x92>
    1990:	35 95       	asr	r19
    1992:	27 95       	ror	r18
    1994:	8a 95       	dec	r24
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <gfx_draw_xbm+0x8e>
    1998:	92 22       	and	r9, r18
    199a:	05 2d       	mov	r16, r5
    199c:	07 0d       	add	r16, r7
    199e:	c0 9f       	mul	r28, r16
    19a0:	80 01       	movw	r16, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	61 2c       	mov	r6, r1
    19a6:	64 14       	cp	r6, r4
    19a8:	81 f1       	breq	.+96     	; 0x1a0a <gfx_draw_xbm+0x108>
    19aa:	86 2d       	mov	r24, r6
    19ac:	87 70       	andi	r24, 0x07	; 7
    19ae:	59 f0       	breq	.+22     	; 0x19c6 <gfx_draw_xbm+0xc4>
    19b0:	e8 2f       	mov	r30, r24
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	e8 5f       	subi	r30, 0xF8	; 248
    19b6:	fb 4f       	sbci	r31, 0xFB	; 251
    19b8:	80 81       	ld	r24, Z
    19ba:	69 2d       	mov	r22, r9
    19bc:	89 21       	and	r24, r9
    19be:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_display_write2>
    19c2:	63 94       	inc	r6
    19c4:	f0 cf       	rjmp	.-32     	; 0x19a6 <gfx_draw_xbm+0xa4>
    19c6:	96 2d       	mov	r25, r6
    19c8:	96 95       	lsr	r25
    19ca:	96 95       	lsr	r25
    19cc:	96 95       	lsr	r25
    19ce:	f8 01       	movw	r30, r16
    19d0:	e9 0f       	add	r30, r25
    19d2:	f1 1d       	adc	r31, r1
    19d4:	ec 19       	sub	r30, r12
    19d6:	fd 09       	sbc	r31, r13
    19d8:	ea 0d       	add	r30, r10
    19da:	fb 1d       	adc	r31, r11
    19dc:	28 e0       	ldi	r18, 0x08	; 8
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 81       	ld	r20, Z
    19e2:	a8 e0       	ldi	r26, 0x08	; 8
    19e4:	b4 e0       	ldi	r27, 0x04	; 4
    19e6:	9c 91       	ld	r25, X
    19e8:	96 95       	lsr	r25
    19ea:	40 fd       	sbrc	r20, 0
    19ec:	90 68       	ori	r25, 0x80	; 128
    19ee:	9c 93       	st	X, r25
    19f0:	46 95       	lsr	r20
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	60 e1       	ldi	r22, 0x10	; 16
    19f6:	74 e0       	ldi	r23, 0x04	; 4
    19f8:	6a 17       	cp	r22, r26
    19fa:	7b 07       	cpc	r23, r27
    19fc:	a1 f7       	brne	.-24     	; 0x19e6 <gfx_draw_xbm+0xe4>
    19fe:	ee 0d       	add	r30, r14
    1a00:	ff 1d       	adc	r31, r15
    1a02:	21 50       	subi	r18, 0x01	; 1
    1a04:	31 09       	sbc	r19, r1
    1a06:	61 f7       	brne	.-40     	; 0x19e0 <gfx_draw_xbm+0xde>
    1a08:	d3 cf       	rjmp	.-90     	; 0x19b0 <gfx_draw_xbm+0xae>
    1a0a:	8d 2f       	mov	r24, r29
    1a0c:	7d 16       	cp	r7, r29
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <gfx_draw_xbm+0x110>
    1a10:	87 2d       	mov	r24, r7
    1a12:	d8 1b       	sub	r29, r24
    1a14:	88 0e       	add	r8, r24
    1a16:	58 0e       	add	r5, r24
    1a18:	68 2d       	mov	r22, r8
    1a1a:	83 2d       	mov	r24, r3
    1a1c:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1a20:	99 24       	eor	r9, r9
    1a22:	9a 94       	dec	r9
    1a24:	a7 cf       	rjmp	.-178    	; 0x1974 <gfx_draw_xbm+0x72>
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	7f 90       	pop	r7
    1a40:	6f 90       	pop	r6
    1a42:	5f 90       	pop	r5
    1a44:	4f 90       	pop	r4
    1a46:	3f 90       	pop	r3
    1a48:	2f 90       	pop	r2
    1a4a:	08 95       	ret

00001a4c <gfx_draw_xbm_P>:
    1a4c:	2f 92       	push	r2
    1a4e:	3f 92       	push	r3
    1a50:	4f 92       	push	r4
    1a52:	5f 92       	push	r5
    1a54:	6f 92       	push	r6
    1a56:	7f 92       	push	r7
    1a58:	8f 92       	push	r8
    1a5a:	9f 92       	push	r9
    1a5c:	af 92       	push	r10
    1a5e:	bf 92       	push	r11
    1a60:	cf 92       	push	r12
    1a62:	df 92       	push	r13
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	48 2e       	mov	r4, r24
    1a72:	d6 2f       	mov	r29, r22
    1a74:	4a 01       	movw	r8, r20
    1a76:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    1a7a:	00 91 10 04 	lds	r16, 0x0410	; 0x800410 <gfx_y>
    1a7e:	80 2f       	mov	r24, r16
    1a80:	87 70       	andi	r24, 0x07	; 7
    1a82:	1f ef       	ldi	r17, 0xFF	; 255
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <gfx_draw_xbm_P+0x3c>
    1a86:	11 0f       	add	r17, r17
    1a88:	8a 95       	dec	r24
    1a8a:	ea f7       	brpl	.-6      	; 0x1a86 <gfx_draw_xbm_P+0x3a>
    1a8c:	24 2d       	mov	r18, r4
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	c9 01       	movw	r24, r18
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	97 fd       	sbrc	r25, 7
    1a96:	07 96       	adiw	r24, 0x07	; 7
    1a98:	23 e0       	ldi	r18, 0x03	; 3
    1a9a:	95 95       	asr	r25
    1a9c:	87 95       	ror	r24
    1a9e:	2a 95       	dec	r18
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <gfx_draw_xbm_P+0x4e>
    1aa2:	c1 e0       	ldi	r28, 0x01	; 1
    1aa4:	c8 0f       	add	r28, r24
    1aa6:	cc 2e       	mov	r12, r28
    1aa8:	d1 2c       	mov	r13, r1
    1aaa:	56 01       	movw	r10, r12
    1aac:	33 e0       	ldi	r19, 0x03	; 3
    1aae:	aa 0c       	add	r10, r10
    1ab0:	bb 1c       	adc	r11, r11
    1ab2:	3a 95       	dec	r19
    1ab4:	e1 f7       	brne	.-8      	; 0x1aae <gfx_draw_xbm_P+0x62>
    1ab6:	51 2c       	mov	r5, r1
    1ab8:	48 e0       	ldi	r20, 0x08	; 8
    1aba:	24 2e       	mov	r2, r20
    1abc:	dd 23       	and	r29, r29
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <gfx_draw_xbm_P+0x76>
    1ac0:	55 c0       	rjmp	.+170    	; 0x1b6c <gfx_draw_xbm_P+0x120>
    1ac2:	80 2f       	mov	r24, r16
    1ac4:	87 70       	andi	r24, 0x07	; 7
    1ac6:	72 2c       	mov	r7, r2
    1ac8:	78 1a       	sub	r7, r24
    1aca:	d7 15       	cp	r29, r7
    1acc:	50 f4       	brcc	.+20     	; 0x1ae2 <gfx_draw_xbm_P+0x96>
    1ace:	87 2d       	mov	r24, r7
    1ad0:	8d 1b       	sub	r24, r29
    1ad2:	2f ef       	ldi	r18, 0xFF	; 255
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <gfx_draw_xbm_P+0x90>
    1ad8:	35 95       	asr	r19
    1ada:	27 95       	ror	r18
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <gfx_draw_xbm_P+0x8c>
    1ae0:	12 23       	and	r17, r18
    1ae2:	e5 2c       	mov	r14, r5
    1ae4:	e7 0c       	add	r14, r7
    1ae6:	ce 9d       	mul	r28, r14
    1ae8:	70 01       	movw	r14, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	61 2c       	mov	r6, r1
    1aee:	64 14       	cp	r6, r4
    1af0:	81 f1       	breq	.+96     	; 0x1b52 <gfx_draw_xbm_P+0x106>
    1af2:	86 2d       	mov	r24, r6
    1af4:	87 70       	andi	r24, 0x07	; 7
    1af6:	59 f0       	breq	.+22     	; 0x1b0e <gfx_draw_xbm_P+0xc2>
    1af8:	e8 2f       	mov	r30, r24
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	e8 5f       	subi	r30, 0xF8	; 248
    1afe:	fb 4f       	sbci	r31, 0xFB	; 251
    1b00:	80 81       	ld	r24, Z
    1b02:	61 2f       	mov	r22, r17
    1b04:	81 23       	and	r24, r17
    1b06:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_display_write2>
    1b0a:	63 94       	inc	r6
    1b0c:	f0 cf       	rjmp	.-32     	; 0x1aee <gfx_draw_xbm_P+0xa2>
    1b0e:	96 2d       	mov	r25, r6
    1b10:	96 95       	lsr	r25
    1b12:	96 95       	lsr	r25
    1b14:	96 95       	lsr	r25
    1b16:	f7 01       	movw	r30, r14
    1b18:	e9 0f       	add	r30, r25
    1b1a:	f1 1d       	adc	r31, r1
    1b1c:	ea 19       	sub	r30, r10
    1b1e:	fb 09       	sbc	r31, r11
    1b20:	e8 0d       	add	r30, r8
    1b22:	f9 1d       	adc	r31, r9
    1b24:	28 e0       	ldi	r18, 0x08	; 8
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	44 91       	lpm	r20, Z
    1b2a:	a8 e0       	ldi	r26, 0x08	; 8
    1b2c:	b4 e0       	ldi	r27, 0x04	; 4
    1b2e:	9c 91       	ld	r25, X
    1b30:	96 95       	lsr	r25
    1b32:	40 fd       	sbrc	r20, 0
    1b34:	90 68       	ori	r25, 0x80	; 128
    1b36:	9c 93       	st	X, r25
    1b38:	46 95       	lsr	r20
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	60 e1       	ldi	r22, 0x10	; 16
    1b3e:	74 e0       	ldi	r23, 0x04	; 4
    1b40:	6a 17       	cp	r22, r26
    1b42:	7b 07       	cpc	r23, r27
    1b44:	a1 f7       	brne	.-24     	; 0x1b2e <gfx_draw_xbm_P+0xe2>
    1b46:	ec 0d       	add	r30, r12
    1b48:	fd 1d       	adc	r31, r13
    1b4a:	21 50       	subi	r18, 0x01	; 1
    1b4c:	31 09       	sbc	r19, r1
    1b4e:	61 f7       	brne	.-40     	; 0x1b28 <gfx_draw_xbm_P+0xdc>
    1b50:	d3 cf       	rjmp	.-90     	; 0x1af8 <gfx_draw_xbm_P+0xac>
    1b52:	8d 2f       	mov	r24, r29
    1b54:	7d 16       	cp	r7, r29
    1b56:	08 f4       	brcc	.+2      	; 0x1b5a <gfx_draw_xbm_P+0x10e>
    1b58:	87 2d       	mov	r24, r7
    1b5a:	d8 1b       	sub	r29, r24
    1b5c:	08 0f       	add	r16, r24
    1b5e:	58 0e       	add	r5, r24
    1b60:	60 2f       	mov	r22, r16
    1b62:	83 2d       	mov	r24, r3
    1b64:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1b68:	1f ef       	ldi	r17, 0xFF	; 255
    1b6a:	a8 cf       	rjmp	.-176    	; 0x1abc <gfx_draw_xbm_P+0x70>
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	9f 90       	pop	r9
    1b82:	8f 90       	pop	r8
    1b84:	7f 90       	pop	r7
    1b86:	6f 90       	pop	r6
    1b88:	5f 90       	pop	r5
    1b8a:	4f 90       	pop	r4
    1b8c:	3f 90       	pop	r3
    1b8e:	2f 90       	pop	r2
    1b90:	08 95       	ret

00001b92 <gfx_pixel>:
    1b92:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    1b96:	97 70       	andi	r25, 0x07	; 7
    1b98:	21 e0       	ldi	r18, 0x01	; 1
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <gfx_pixel+0xe>
    1b9e:	22 0f       	add	r18, r18
    1ba0:	9a 95       	dec	r25
    1ba2:	ea f7       	brpl	.-6      	; 0x1b9e <gfx_pixel+0xc>
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <gfx_pixel+0x1a>
    1ba8:	62 2f       	mov	r22, r18
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <gfx_pixel+0x1c>
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	82 2f       	mov	r24, r18
    1bb0:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <gfx_display_write2>

00001bb4 <gfx_lineTo>:
    1bb4:	bf 92       	push	r11
    1bb6:	cf 92       	push	r12
    1bb8:	df 92       	push	r13
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	18 2f       	mov	r17, r24
    1bc8:	06 2f       	mov	r16, r22
    1bca:	d0 91 07 04 	lds	r29, 0x0407	; 0x800407 <gfx_x>
    1bce:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1bd2:	d1 13       	cpse	r29, r17
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <gfx_lineTo+0x40>
    1bd6:	86 17       	cp	r24, r22
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <gfx_lineTo+0x2e>
    1bda:	96 2f       	mov	r25, r22
    1bdc:	98 1b       	sub	r25, r24
    1bde:	89 2f       	mov	r24, r25
    1be0:	06 c0       	rjmp	.+12     	; 0x1bee <gfx_lineTo+0x3a>
    1be2:	c8 2f       	mov	r28, r24
    1be4:	c6 1b       	sub	r28, r22
    1be6:	81 2f       	mov	r24, r17
    1be8:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1bec:	8c 2f       	mov	r24, r28
    1bee:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <gfx_vline>
    1bf2:	5a c0       	rjmp	.+180    	; 0x1ca8 <gfx_lineTo+0xf4>
    1bf4:	f8 2e       	mov	r15, r24
    1bf6:	68 13       	cpse	r22, r24
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <gfx_lineTo+0x60>
    1bfa:	d1 17       	cp	r29, r17
    1bfc:	18 f4       	brcc	.+6      	; 0x1c04 <gfx_lineTo+0x50>
    1bfe:	81 2f       	mov	r24, r17
    1c00:	8d 1b       	sub	r24, r29
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <gfx_lineTo+0x5a>
    1c04:	d1 1b       	sub	r29, r17
    1c06:	81 2f       	mov	r24, r17
    1c08:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1c0c:	8d 2f       	mov	r24, r29
    1c0e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <gfx_hline>
    1c12:	4a c0       	rjmp	.+148    	; 0x1ca8 <gfx_lineTo+0xf4>
    1c14:	1d 17       	cp	r17, r29
    1c16:	28 f4       	brcc	.+10     	; 0x1c22 <gfx_lineTo+0x6e>
    1c18:	dd 2e       	mov	r13, r29
    1c1a:	d1 1a       	sub	r13, r17
    1c1c:	cc 24       	eor	r12, r12
    1c1e:	ca 94       	dec	r12
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <gfx_lineTo+0x80>
    1c22:	d1 17       	cp	r29, r17
    1c24:	28 f4       	brcc	.+10     	; 0x1c30 <gfx_lineTo+0x7c>
    1c26:	d1 2e       	mov	r13, r17
    1c28:	dd 1a       	sub	r13, r29
    1c2a:	cc 24       	eor	r12, r12
    1c2c:	c3 94       	inc	r12
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <gfx_lineTo+0x80>
    1c30:	c1 2c       	mov	r12, r1
    1c32:	d1 2c       	mov	r13, r1
    1c34:	08 17       	cp	r16, r24
    1c36:	28 f4       	brcc	.+10     	; 0x1c42 <gfx_lineTo+0x8e>
    1c38:	c8 2f       	mov	r28, r24
    1c3a:	c0 1b       	sub	r28, r16
    1c3c:	bb 24       	eor	r11, r11
    1c3e:	ba 94       	dec	r11
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <gfx_lineTo+0xa0>
    1c42:	80 17       	cp	r24, r16
    1c44:	28 f4       	brcc	.+10     	; 0x1c50 <gfx_lineTo+0x9c>
    1c46:	c0 2f       	mov	r28, r16
    1c48:	c8 1b       	sub	r28, r24
    1c4a:	bb 24       	eor	r11, r11
    1c4c:	b3 94       	inc	r11
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <gfx_lineTo+0xa0>
    1c50:	b1 2c       	mov	r11, r1
    1c52:	c0 e0       	ldi	r28, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <gfx_pixel>
    1c5a:	cd 15       	cp	r28, r13
    1c5c:	98 f4       	brcc	.+38     	; 0x1c84 <gfx_lineTo+0xd0>
    1c5e:	ed 2c       	mov	r14, r13
    1c60:	e6 94       	lsr	r14
    1c62:	e1 94       	neg	r14
    1c64:	ec 0e       	add	r14, r28
    1c66:	dc 0d       	add	r29, r12
    1c68:	1e 14       	cp	r1, r14
    1c6a:	14 f4       	brge	.+4      	; 0x1c70 <gfx_lineTo+0xbc>
    1c6c:	ed 18       	sub	r14, r13
    1c6e:	fb 0c       	add	r15, r11
    1c70:	6f 2d       	mov	r22, r15
    1c72:	8d 2f       	mov	r24, r29
    1c74:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <gfx_pixel>
    1c7e:	1d 13       	cpse	r17, r29
    1c80:	f1 cf       	rjmp	.-30     	; 0x1c64 <gfx_lineTo+0xb0>
    1c82:	12 c0       	rjmp	.+36     	; 0x1ca8 <gfx_lineTo+0xf4>
    1c84:	ec 2e       	mov	r14, r28
    1c86:	e6 94       	lsr	r14
    1c88:	e1 94       	neg	r14
    1c8a:	ed 0c       	add	r14, r13
    1c8c:	fb 0c       	add	r15, r11
    1c8e:	1e 14       	cp	r1, r14
    1c90:	14 f4       	brge	.+4      	; 0x1c96 <gfx_lineTo+0xe2>
    1c92:	ec 1a       	sub	r14, r28
    1c94:	dc 0d       	add	r29, r12
    1c96:	6f 2d       	mov	r22, r15
    1c98:	8d 2f       	mov	r24, r29
    1c9a:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <gfx_pixel>
    1ca4:	0f 11       	cpse	r16, r15
    1ca6:	f1 cf       	rjmp	.-30     	; 0x1c8a <gfx_lineTo+0xd6>
    1ca8:	60 2f       	mov	r22, r16
    1caa:	81 2f       	mov	r24, r17
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	bf 90       	pop	r11
    1cbe:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <gfx_move>

00001cc2 <gfx_term_clear>:
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <gfx_fill>
    1cc8:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <gfx_term_row>
    1ccc:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1cd0:	08 95       	ret

00001cd2 <gfx_term_goto>:
    1cd2:	86 31       	cpi	r24, 0x16	; 22
    1cd4:	30 f4       	brcc	.+12     	; 0x1ce2 <gfx_term_goto+0x10>
    1cd6:	68 30       	cpi	r22, 0x08	; 8
    1cd8:	20 f4       	brcc	.+8      	; 0x1ce2 <gfx_term_goto+0x10>
    1cda:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <gfx_term_row>
    1cde:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1ce2:	08 95       	ret

00001ce4 <gfx_term_scroll>:
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	c9 eb       	ldi	r28, 0xB9	; 185
    1cf6:	20 e1       	ldi	r18, 0x10	; 16
    1cf8:	c2 2e       	mov	r12, r18
    1cfa:	24 e0       	ldi	r18, 0x04	; 4
    1cfc:	d2 2e       	mov	r13, r18
    1cfe:	10 e0       	ldi	r17, 0x00	; 0
    1d00:	d0 e0       	ldi	r29, 0x00	; 0
    1d02:	07 e4       	ldi	r16, 0x47	; 71
    1d04:	0c 0f       	add	r16, r28
    1d06:	d8 30       	cpi	r29, 0x08	; 8
    1d08:	50 f5       	brcc	.+84     	; 0x1d5e <gfx_term_scroll+0x7a>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1d10:	6c 2f       	mov	r22, r28
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1d1e:	60 e4       	ldi	r22, 0x40	; 64
    1d20:	61 0f       	add	r22, r17
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1d2e:	98 e0       	ldi	r25, 0x08	; 8
    1d30:	e9 2e       	mov	r14, r25
    1d32:	94 e0       	ldi	r25, 0x04	; 4
    1d34:	f9 2e       	mov	r15, r25
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	81 93       	st	Z+, r24
    1d40:	7f 01       	movw	r14, r30
    1d42:	f0 e1       	ldi	r31, 0x10	; 16
    1d44:	ef 16       	cp	r14, r31
    1d46:	f4 e0       	ldi	r31, 0x04	; 4
    1d48:	ff 06       	cpc	r15, r31
    1d4a:	a9 f7       	brne	.-22     	; 0x1d36 <gfx_term_scroll+0x52>
    1d4c:	60 2f       	mov	r22, r16
    1d4e:	8d 2f       	mov	r24, r29
    1d50:	0e 94 cd 09 	call	0x139a	; 0x139a <gfx_store_disp_tile>
    1d54:	df 5f       	subi	r29, 0xFF	; 255
    1d56:	18 5f       	subi	r17, 0xF8	; 248
    1d58:	d0 31       	cpi	r29, 0x10	; 16
    1d5a:	a9 f6       	brne	.-86     	; 0x1d06 <gfx_term_scroll+0x22>
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <gfx_term_scroll+0xb8>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1d64:	6c 2f       	mov	r22, r28
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <display_wait>
    1d72:	61 2f       	mov	r22, r17
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	0e 94 53 07 	call	0xea6	; 0xea6 <display_write>
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1d80:	88 e0       	ldi	r24, 0x08	; 8
    1d82:	e8 2e       	mov	r14, r24
    1d84:	84 e0       	ldi	r24, 0x04	; 4
    1d86:	f8 2e       	mov	r15, r24
    1d88:	83 e0       	ldi	r24, 0x03	; 3
    1d8a:	0e 94 95 07 	call	0xf2a	; 0xf2a <display_read>
    1d8e:	f7 01       	movw	r30, r14
    1d90:	81 93       	st	Z+, r24
    1d92:	7f 01       	movw	r14, r30
    1d94:	ce 16       	cp	r12, r30
    1d96:	df 06       	cpc	r13, r31
    1d98:	b9 f7       	brne	.-18     	; 0x1d88 <gfx_term_scroll+0xa4>
    1d9a:	d8 cf       	rjmp	.-80     	; 0x1d4c <gfx_term_scroll+0x68>
    1d9c:	cf 5f       	subi	r28, 0xFF	; 255
    1d9e:	c0 3c       	cpi	r28, 0xC0	; 192
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <gfx_term_scroll+0xc0>
    1da2:	ad cf       	rjmp	.-166    	; 0x1cfe <gfx_term_scroll+0x1a>
    1da4:	e8 e0       	ldi	r30, 0x08	; 8
    1da6:	f4 e0       	ldi	r31, 0x04	; 4
    1da8:	80 e1       	ldi	r24, 0x10	; 16
    1daa:	94 e0       	ldi	r25, 0x04	; 4
    1dac:	11 92       	st	Z+, r1
    1dae:	8e 17       	cp	r24, r30
    1db0:	9f 07       	cpc	r25, r31
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <gfx_term_scroll+0xc8>
    1db4:	c0 e0       	ldi	r28, 0x00	; 0
    1db6:	67 e0       	ldi	r22, 0x07	; 7
    1db8:	8c 2f       	mov	r24, r28
    1dba:	0e 94 cd 09 	call	0x139a	; 0x139a <gfx_store_disp_tile>
    1dbe:	cf 5f       	subi	r28, 0xFF	; 255
    1dc0:	c0 31       	cpi	r28, 0x10	; 16
    1dc2:	c9 f7       	brne	.-14     	; 0x1db6 <gfx_term_scroll+0xd2>
    1dc4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1dc8:	88 23       	and	r24, r24
    1dca:	19 f0       	breq	.+6      	; 0x1dd2 <gfx_term_scroll+0xee>
    1dcc:	81 50       	subi	r24, 0x01	; 1
    1dce:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	08 95       	ret

00001de4 <gfx_term_print>:
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <gfx_proportional>
    1dee:	8c 01       	movw	r16, r24
    1df0:	f8 01       	movw	r30, r16
    1df2:	c1 91       	ld	r28, Z+
    1df4:	8f 01       	movw	r16, r30
    1df6:	cc 23       	and	r28, r28
    1df8:	b9 f1       	breq	.+110    	; 0x1e68 <gfx_term_print+0x84>
    1dfa:	ca 30       	cpi	r28, 0x0A	; 10
    1dfc:	69 f4       	brne	.+26     	; 0x1e18 <gfx_term_print+0x34>
    1dfe:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1e02:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	81 f7       	brne	.-32     	; 0x1df0 <gfx_term_print+0xc>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <gfx_term_scroll>
    1e16:	ec cf       	rjmp	.-40     	; 0x1df0 <gfx_term_print+0xc>
    1e18:	cd 30       	cpi	r28, 0x0D	; 13
    1e1a:	51 f3       	breq	.-44     	; 0x1df0 <gfx_term_print+0xc>
    1e1c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1e20:	85 31       	cpi	r24, 0x15	; 21
    1e22:	60 f0       	brcs	.+24     	; 0x1e3c <gfx_term_print+0x58>
    1e24:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1e28:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1e32:	88 30       	cpi	r24, 0x08	; 8
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <gfx_term_print+0x58>
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <gfx_term_scroll>
    1e3c:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <gfx_term_row>
    1e40:	66 0f       	add	r22, r22
    1e42:	66 0f       	add	r22, r22
    1e44:	66 0f       	add	r22, r22
    1e46:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	99 0f       	add	r25, r25
    1e4e:	89 0f       	add	r24, r25
    1e50:	88 0f       	add	r24, r24
    1e52:	0e 94 20 0a 	call	0x1440	; 0x1440 <gfx_move>
    1e56:	8c 2f       	mov	r24, r28
    1e58:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <gfx_print_char>
    1e5c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1e66:	c4 cf       	rjmp	.-120    	; 0x1df0 <gfx_term_print+0xc>
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	08 95       	ret

00001e70 <wait_copro>:
    1e70:	78 94       	sei
    1e72:	20 e1       	ldi	r18, 0x10	; 16
    1e74:	37 e2       	ldi	r19, 0x27	; 39
    1e76:	97 e0       	ldi	r25, 0x07	; 7
    1e78:	89 9f       	mul	r24, r25
    1e7a:	f0 01       	movw	r30, r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	e8 5e       	subi	r30, 0xE8	; 232
    1e80:	fb 4f       	sbci	r31, 0xFB	; 251
    1e82:	21 50       	subi	r18, 0x01	; 1
    1e84:	31 09       	sbc	r19, r1
    1e86:	19 f0       	breq	.+6      	; 0x1e8e <wait_copro+0x1e>
    1e88:	80 81       	ld	r24, Z
    1e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8c:	d1 f7       	brne	.-12     	; 0x1e82 <wait_copro+0x12>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	23 2b       	or	r18, r19
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <wait_copro+0x26>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	08 95       	ret

00001e98 <spi_finished_callback>:
    1e98:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <copro_seq>
    1e9c:	9f 5f       	subi	r25, 0xFF	; 255
    1e9e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <copro_seq>
    1ea2:	8b 31       	cpi	r24, 0x1B	; 27
    1ea4:	41 f4       	brne	.+16     	; 0x1eb6 <spi_finished_callback+0x1e>
    1ea6:	e6 ee       	ldi	r30, 0xE6	; 230
    1ea8:	f3 e0       	ldi	r31, 0x03	; 3
    1eaa:	af e4       	ldi	r26, 0x4F	; 79
    1eac:	b4 e0       	ldi	r27, 0x04	; 4
    1eae:	01 90       	ld	r0, Z+
    1eb0:	0d 92       	st	X+, r0
    1eb2:	8a 95       	dec	r24
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <spi_finished_callback+0x16>
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <spi_tx_buf+0xe>
    1ebc:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <spi_tx_buf+0x7>
    1ec0:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <spi_tx_buf>
    1ec4:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <copro_commands>
    1ec8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eca:	69 f0       	breq	.+26     	; 0x1ee6 <spi_finished_callback+0x4e>
    1ecc:	97 e0       	ldi	r25, 0x07	; 7
    1ece:	e8 e1       	ldi	r30, 0x18	; 24
    1ed0:	f4 e0       	ldi	r31, 0x04	; 4
    1ed2:	a6 ec       	ldi	r26, 0xC6	; 198
    1ed4:	b3 e0       	ldi	r27, 0x03	; 3
    1ed6:	01 90       	ld	r0, Z+
    1ed8:	0d 92       	st	X+, r0
    1eda:	9a 95       	dec	r25
    1edc:	e1 f7       	brne	.-8      	; 0x1ed6 <spi_finished_callback+0x3e>
    1ede:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1ee2:	87 e0       	ldi	r24, 0x07	; 7
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <spi_finished_callback+0x50>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <copro_commands+0x7>
    1eec:	9f 3f       	cpi	r25, 0xFF	; 255
    1eee:	79 f0       	breq	.+30     	; 0x1f0e <spi_finished_callback+0x76>
    1ef0:	a8 2f       	mov	r26, r24
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	aa 53       	subi	r26, 0x3A	; 58
    1ef6:	bc 4f       	sbci	r27, 0xFC	; 252
    1ef8:	97 e0       	ldi	r25, 0x07	; 7
    1efa:	ef e1       	ldi	r30, 0x1F	; 31
    1efc:	f4 e0       	ldi	r31, 0x04	; 4
    1efe:	01 90       	ld	r0, Z+
    1f00:	0d 92       	st	X+, r0
    1f02:	9a 95       	dec	r25
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <spi_finished_callback+0x66>
    1f06:	9f ef       	ldi	r25, 0xFF	; 255
    1f08:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <copro_commands+0x7>
    1f0c:	89 5f       	subi	r24, 0xF9	; 249
    1f0e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <copro_commands+0xe>
    1f12:	9f 3f       	cpi	r25, 0xFF	; 255
    1f14:	79 f0       	breq	.+30     	; 0x1f34 <spi_finished_callback+0x9c>
    1f16:	a8 2f       	mov	r26, r24
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	aa 53       	subi	r26, 0x3A	; 58
    1f1c:	bc 4f       	sbci	r27, 0xFC	; 252
    1f1e:	87 e0       	ldi	r24, 0x07	; 7
    1f20:	e6 e2       	ldi	r30, 0x26	; 38
    1f22:	f4 e0       	ldi	r31, 0x04	; 4
    1f24:	01 90       	ld	r0, Z+
    1f26:	0d 92       	st	X+, r0
    1f28:	8a 95       	dec	r24
    1f2a:	e1 f7       	brne	.-8      	; 0x1f24 <spi_finished_callback+0x8c>
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <copro_commands+0xe>
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <spi_finished_callback+0xa4>
    1f34:	81 11       	cpse	r24, r1
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <spi_finished_callback+0xa4>
    1f38:	87 e0       	ldi	r24, 0x07	; 7
    1f3a:	08 95       	ret
    1f3c:	85 e1       	ldi	r24, 0x15	; 21
    1f3e:	08 95       	ret

00001f40 <_copro_check_busy>:
    1f40:	27 e0       	ldi	r18, 0x07	; 7
    1f42:	82 9f       	mul	r24, r18
    1f44:	c0 01       	movw	r24, r0
    1f46:	11 24       	eor	r1, r1
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e8 5e       	subi	r30, 0xE8	; 232
    1f4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 81       	ld	r25, Z
    1f52:	9f 3f       	cpi	r25, 0xFF	; 255
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <_copro_check_busy+0x18>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	08 95       	ret

00001f5a <copro_update>:
    1f5a:	f8 94       	cli
    1f5c:	a1 e3       	ldi	r26, 0x31	; 49
    1f5e:	b4 e0       	ldi	r27, 0x04	; 4
    1f60:	ef e4       	ldi	r30, 0x4F	; 79
    1f62:	f4 e0       	ldi	r31, 0x04	; 4
    1f64:	81 81       	ldd	r24, Z+1	; 0x01
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	98 2f       	mov	r25, r24
    1f6a:	88 27       	eor	r24, r24
    1f6c:	20 81       	ld	r18, Z
    1f6e:	82 0f       	add	r24, r18
    1f70:	91 1d       	adc	r25, r1
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	9c 93       	st	X, r25
    1f76:	8e 93       	st	-X, r24
    1f78:	83 81       	ldd	r24, Z+3	; 0x03
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	88 27       	eor	r24, r24
    1f80:	22 81       	ldd	r18, Z+2	; 0x02
    1f82:	82 0f       	add	r24, r18
    1f84:	91 1d       	adc	r25, r1
    1f86:	13 96       	adiw	r26, 0x03	; 3
    1f88:	9c 93       	st	X, r25
    1f8a:	8e 93       	st	-X, r24
    1f8c:	12 97       	sbiw	r26, 0x02	; 2
    1f8e:	85 81       	ldd	r24, Z+5	; 0x05
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	98 2f       	mov	r25, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	24 81       	ldd	r18, Z+4	; 0x04
    1f98:	82 0f       	add	r24, r18
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	15 96       	adiw	r26, 0x05	; 5
    1f9e:	9c 93       	st	X, r25
    1fa0:	8e 93       	st	-X, r24
    1fa2:	14 97       	sbiw	r26, 0x04	; 4
    1fa4:	87 81       	ldd	r24, Z+7	; 0x07
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 2f       	mov	r25, r24
    1faa:	88 27       	eor	r24, r24
    1fac:	26 81       	ldd	r18, Z+6	; 0x06
    1fae:	82 0f       	add	r24, r18
    1fb0:	91 1d       	adc	r25, r1
    1fb2:	17 96       	adiw	r26, 0x07	; 7
    1fb4:	9c 93       	st	X, r25
    1fb6:	8e 93       	st	-X, r24
    1fb8:	16 97       	sbiw	r26, 0x06	; 6
    1fba:	81 85       	ldd	r24, Z+9	; 0x09
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	88 27       	eor	r24, r24
    1fc2:	20 85       	ldd	r18, Z+8	; 0x08
    1fc4:	82 0f       	add	r24, r18
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	19 96       	adiw	r26, 0x09	; 9
    1fca:	9c 93       	st	X, r25
    1fcc:	8e 93       	st	-X, r24
    1fce:	18 97       	sbiw	r26, 0x08	; 8
    1fd0:	78 94       	sei
    1fd2:	f8 94       	cli
    1fd4:	22 85       	ldd	r18, Z+10	; 0x0a
    1fd6:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1fda:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    1fde:	ac 01       	movw	r20, r24
    1fe0:	42 0f       	add	r20, r18
    1fe2:	51 1d       	adc	r21, r1
    1fe4:	93 85       	ldd	r25, Z+11	; 0x0b
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	98 2f       	mov	r25, r24
    1fec:	88 27       	eor	r24, r24
    1fee:	84 0f       	add	r24, r20
    1ff0:	95 1f       	adc	r25, r21
    1ff2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    1ff6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    1ffa:	24 85       	ldd	r18, Z+12	; 0x0c
    1ffc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <copro_ticks_offset_r>
    2000:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    2004:	ac 01       	movw	r20, r24
    2006:	42 0f       	add	r20, r18
    2008:	51 1d       	adc	r21, r1
    200a:	95 85       	ldd	r25, Z+13	; 0x0d
    200c:	89 2f       	mov	r24, r25
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	98 2f       	mov	r25, r24
    2012:	88 27       	eor	r24, r24
    2014:	84 0f       	add	r24, r20
    2016:	95 1f       	adc	r25, r21
    2018:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <copro_ticks_r+0x1>
    201c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <copro_ticks_r>
    2020:	87 85       	ldd	r24, Z+15	; 0x0f
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	98 2f       	mov	r25, r24
    2026:	88 27       	eor	r24, r24
    2028:	26 85       	ldd	r18, Z+14	; 0x0e
    202a:	82 0f       	add	r24, r18
    202c:	91 1d       	adc	r25, r1
    202e:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <copro_speed_l+0x1>
    2032:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <copro_speed_l>
    2036:	81 89       	ldd	r24, Z+17	; 0x11
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 2f       	mov	r25, r24
    203c:	88 27       	eor	r24, r24
    203e:	20 89       	ldd	r18, Z+16	; 0x10
    2040:	82 0f       	add	r24, r18
    2042:	91 1d       	adc	r25, r1
    2044:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <copro_speed_r+0x1>
    2048:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <copro_speed_r>
    204c:	83 89       	ldd	r24, Z+19	; 0x13
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	98 2f       	mov	r25, r24
    2052:	88 27       	eor	r24, r24
    2054:	22 89       	ldd	r18, Z+18	; 0x12
    2056:	82 0f       	add	r24, r18
    2058:	91 1d       	adc	r25, r1
    205a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <copro_current_l+0x1>
    205e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <copro_current_l>
    2062:	85 89       	ldd	r24, Z+21	; 0x15
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	98 2f       	mov	r25, r24
    2068:	88 27       	eor	r24, r24
    206a:	24 89       	ldd	r18, Z+20	; 0x14
    206c:	82 0f       	add	r24, r18
    206e:	91 1d       	adc	r25, r1
    2070:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <copro_current_r+0x1>
    2074:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <copro_current_r>
    2078:	78 94       	sei
    207a:	f8 94       	cli
    207c:	80 8d       	ldd	r24, Z+24	; 0x18
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	98 2f       	mov	r25, r24
    2082:	88 27       	eor	r24, r24
    2084:	27 89       	ldd	r18, Z+23	; 0x17
    2086:	82 0f       	add	r24, r18
    2088:	91 1d       	adc	r25, r1
    208a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <copro_rc5_cmd+0x1>
    208e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <copro_rc5_cmd>
    2092:	82 8d       	ldd	r24, Z+26	; 0x1a
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	98 2f       	mov	r25, r24
    2098:	88 27       	eor	r24, r24
    209a:	21 8d       	ldd	r18, Z+25	; 0x19
    209c:	82 0f       	add	r24, r18
    209e:	91 1d       	adc	r25, r1
    20a0:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <copro_target_distance+0x1>
    20a4:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <copro_target_distance>
    20a8:	78 94       	sei
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	08 95       	ret

000020ae <copro_stop>:
    20ae:	f8 94       	cli
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    20b6:	78 94       	sei
    20b8:	08 95       	ret

000020ba <copro_stopImmediate>:
    20ba:	f8 94       	cli
    20bc:	8a e0       	ldi	r24, 0x0A	; 10
    20be:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    20c2:	78 94       	sei
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	08 95       	ret

000020c8 <copro_setPWM>:
    20c8:	f8 94       	cli
    20ca:	e8 e1       	ldi	r30, 0x18	; 24
    20cc:	f4 e0       	ldi	r31, 0x04	; 4
    20ce:	25 e0       	ldi	r18, 0x05	; 5
    20d0:	20 83       	st	Z, r18
    20d2:	81 83       	std	Z+1, r24	; 0x01
    20d4:	92 83       	std	Z+2, r25	; 0x02
    20d6:	63 83       	std	Z+3, r22	; 0x03
    20d8:	74 83       	std	Z+4, r23	; 0x04
    20da:	78 94       	sei
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	08 95       	ret

000020e0 <copro_setSpeed>:
    20e0:	f8 94       	cli
    20e2:	e8 e1       	ldi	r30, 0x18	; 24
    20e4:	f4 e0       	ldi	r31, 0x04	; 4
    20e6:	22 e0       	ldi	r18, 0x02	; 2
    20e8:	20 83       	st	Z, r18
    20ea:	81 83       	std	Z+1, r24	; 0x01
    20ec:	92 83       	std	Z+2, r25	; 0x02
    20ee:	63 83       	std	Z+3, r22	; 0x03
    20f0:	74 83       	std	Z+4, r23	; 0x04
    20f2:	78 94       	sei
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	08 95       	ret

000020f8 <copro_setTargetAbs>:
    20f8:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <copro_ticks_offset_l>
    20fc:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    2100:	82 1b       	sub	r24, r18
    2102:	93 0b       	sbc	r25, r19
    2104:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <copro_ticks_offset_r>
    2108:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    210c:	62 1b       	sub	r22, r18
    210e:	73 0b       	sbc	r23, r19
    2110:	f8 94       	cli
    2112:	e8 e1       	ldi	r30, 0x18	; 24
    2114:	f4 e0       	ldi	r31, 0x04	; 4
    2116:	23 e0       	ldi	r18, 0x03	; 3
    2118:	20 83       	st	Z, r18
    211a:	81 83       	std	Z+1, r24	; 0x01
    211c:	92 83       	std	Z+2, r25	; 0x02
    211e:	63 83       	std	Z+3, r22	; 0x03
    2120:	74 83       	std	Z+4, r23	; 0x04
    2122:	45 83       	std	Z+5, r20	; 0x05
    2124:	56 83       	std	Z+6, r21	; 0x06
    2126:	78 94       	sei
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	08 95       	ret

0000212c <copro_setTargetRel>:
    212c:	f8 94       	cli
    212e:	e8 e1       	ldi	r30, 0x18	; 24
    2130:	f4 e0       	ldi	r31, 0x04	; 4
    2132:	24 e0       	ldi	r18, 0x04	; 4
    2134:	20 83       	st	Z, r18
    2136:	81 83       	std	Z+1, r24	; 0x01
    2138:	92 83       	std	Z+2, r25	; 0x02
    213a:	63 83       	std	Z+3, r22	; 0x03
    213c:	74 83       	std	Z+4, r23	; 0x04
    213e:	45 83       	std	Z+5, r20	; 0x05
    2140:	56 83       	std	Z+6, r21	; 0x06
    2142:	78 94       	sei
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	08 95       	ret

00002148 <copro_setSpeedParameters>:
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	18 2f       	mov	r17, r24
    2150:	d6 2f       	mov	r29, r22
    2152:	c4 2f       	mov	r28, r20
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <wait_copro>
    215a:	f8 94       	cli
    215c:	e8 e1       	ldi	r30, 0x18	; 24
    215e:	f4 e0       	ldi	r31, 0x04	; 4
    2160:	86 e0       	ldi	r24, 0x06	; 6
    2162:	86 87       	std	Z+14, r24	; 0x0e
    2164:	17 87       	std	Z+15, r17	; 0x0f
    2166:	d0 8b       	std	Z+16, r29	; 0x10
    2168:	c1 8b       	std	Z+17, r28	; 0x11
    216a:	78 94       	sei
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	08 95       	ret

00002176 <copro_setPositionParameters>:
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	08 95       	ret

0000217a <copro_resetOdometry>:
    217a:	f8 94       	cli
    217c:	ef e4       	ldi	r30, 0x4F	; 79
    217e:	f4 e0       	ldi	r31, 0x04	; 4
    2180:	25 85       	ldd	r18, Z+13	; 0x0d
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	32 2f       	mov	r19, r18
    2186:	22 27       	eor	r18, r18
    2188:	44 85       	ldd	r20, Z+12	; 0x0c
    218a:	24 0f       	add	r18, r20
    218c:	31 1d       	adc	r19, r1
    218e:	43 85       	ldd	r20, Z+11	; 0x0b
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	54 2f       	mov	r21, r20
    2194:	44 27       	eor	r20, r20
    2196:	e2 85       	ldd	r30, Z+10	; 0x0a
    2198:	4e 0f       	add	r20, r30
    219a:	51 1d       	adc	r21, r1
    219c:	fc 01       	movw	r30, r24
    219e:	e4 1b       	sub	r30, r20
    21a0:	f5 0b       	sbc	r31, r21
    21a2:	f0 93 15 04 	sts	0x0415, r31	; 0x800415 <copro_ticks_offset_l+0x1>
    21a6:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <copro_ticks_offset_l>
    21aa:	ab 01       	movw	r20, r22
    21ac:	42 1b       	sub	r20, r18
    21ae:	53 0b       	sbc	r21, r19
    21b0:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <copro_ticks_offset_r+0x1>
    21b4:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <copro_ticks_offset_r>
    21b8:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    21bc:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    21c0:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <copro_ticks_r+0x1>
    21c4:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <copro_ticks_r>
    21c8:	78 94       	sei
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	08 95       	ret

000021ce <copro_ir_stop>:
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <wait_copro>
    21d4:	f8 94       	cli
    21d6:	88 e0       	ldi	r24, 0x08	; 8
    21d8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    21dc:	78 94       	sei
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	08 95       	ret

000021e2 <copro_ir_startMeasure>:
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <wait_copro>
    21e8:	f8 94       	cli
    21ea:	87 e0       	ldi	r24, 0x07	; 7
    21ec:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    21f0:	78 94       	sei
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	08 95       	ret

000021f6 <copro_transmitRC5>:
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	d8 2f       	mov	r29, r24
    21fc:	c9 2f       	mov	r28, r25
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <wait_copro>
    2204:	f8 94       	cli
    2206:	e8 e1       	ldi	r30, 0x18	; 24
    2208:	f4 e0       	ldi	r31, 0x04	; 4
    220a:	89 e0       	ldi	r24, 0x09	; 9
    220c:	87 83       	std	Z+7, r24	; 0x07
    220e:	d0 87       	std	Z+8, r29	; 0x08
    2210:	c1 87       	std	Z+9, r28	; 0x09
    2212:	78 94       	sei
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <bot_init>:
    221c:	8f 9a       	sbi	0x11, 7	; 17
    221e:	97 98       	cbi	0x12, 7	; 18
    2220:	8a e0       	ldi	r24, 0x0A	; 10
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 0c 09 	call	0x1218	; 0x1218 <delay>
    2228:	97 9a       	sbi	0x12, 7	; 18
    222a:	84 e6       	ldi	r24, 0x64	; 100
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <delay>

00002232 <bot_update>:
    2232:	87 e0       	ldi	r24, 0x07	; 7
    2234:	0e 94 a4 11 	call	0x2348	; 0x2348 <adc_read>
    2238:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <bot_supply+0x1>
    223c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <bot_supply>
    2240:	08 95       	ret

00002242 <leds_init>:
    2242:	bf 9a       	sbi	0x17, 7	; 23
    2244:	c7 9a       	sbi	0x18, 7	; 24
    2246:	bd 9a       	sbi	0x17, 5	; 23
    2248:	be 9a       	sbi	0x17, 6	; 23
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	82 b9       	out	0x02, r24	; 2
    224e:	84 bb       	out	0x14, r24	; 20
    2250:	08 95       	ret

00002252 <leds_set_status>:
    2252:	95 b3       	in	r25, 0x15	; 21
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	06 2e       	mov	r0, r22
    225a:	01 c0       	rjmp	.+2      	; 0x225e <leds_set_status+0xc>
    225c:	22 0f       	add	r18, r18
    225e:	0a 94       	dec	r0
    2260:	ea f7       	brpl	.-6      	; 0x225c <leds_set_status+0xa>
    2262:	80 ff       	sbrs	r24, 0
    2264:	02 c0       	rjmp	.+4      	; 0x226a <leds_set_status+0x18>
    2266:	29 2b       	or	r18, r25
    2268:	02 c0       	rjmp	.+4      	; 0x226e <leds_set_status+0x1c>
    226a:	20 95       	com	r18
    226c:	29 23       	and	r18, r25
    226e:	25 bb       	out	0x15, r18	; 21
    2270:	23 b1       	in	r18, 0x03	; 3
    2272:	81 ff       	sbrs	r24, 1
    2274:	08 c0       	rjmp	.+16     	; 0x2286 <leds_set_status+0x34>
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	01 c0       	rjmp	.+2      	; 0x227e <leds_set_status+0x2c>
    227c:	88 0f       	add	r24, r24
    227e:	6a 95       	dec	r22
    2280:	ea f7       	brpl	.-6      	; 0x227c <leds_set_status+0x2a>
    2282:	82 2b       	or	r24, r18
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <leds_set_status+0x44>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	01 c0       	rjmp	.+2      	; 0x228e <leds_set_status+0x3c>
    228c:	88 0f       	add	r24, r24
    228e:	6a 95       	dec	r22
    2290:	ea f7       	brpl	.-6      	; 0x228c <leds_set_status+0x3a>
    2292:	80 95       	com	r24
    2294:	82 23       	and	r24, r18
    2296:	83 b9       	out	0x03, r24	; 3
    2298:	08 95       	ret

0000229a <leds_set_status_intensity>:
    229a:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    229e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    22a2:	08 95       	ret

000022a4 <leds_get_status_intensity>:
    22a4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    22a8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    22ac:	08 95       	ret

000022ae <leds_set_headlights>:
    22ae:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <pwm_channel_A+0x1>
    22b2:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <pwm_channel_A>
    22b6:	08 95       	ret

000022b8 <leds_get_headlights>:
    22b8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    22bc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    22c0:	08 95       	ret

000022c2 <leds_set_displaylight>:
    22c2:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <pwm_channel_B+0x1>
    22c6:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <pwm_channel_B>
    22ca:	08 95       	ret

000022cc <leds_get_displaylight>:
    22cc:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    22d0:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    22d4:	08 95       	ret

000022d6 <sound_init>:
    22d6:	bc 9a       	sbi	0x17, 4	; 23
    22d8:	08 95       	ret

000022da <sound_tone>:
    22da:	61 15       	cp	r22, r1
    22dc:	71 05       	cpc	r23, r1
    22de:	09 f1       	breq	.+66     	; 0x2322 <sound_tone+0x48>
    22e0:	c4 98       	cbi	0x18, 4	; 24
    22e2:	9b 01       	movw	r18, r22
    22e4:	28 1b       	sub	r18, r24
    22e6:	39 0b       	sbc	r19, r25
    22e8:	62 17       	cp	r22, r18
    22ea:	73 07       	cpc	r23, r19
    22ec:	49 f0       	breq	.+18     	; 0x2300 <sound_tone+0x26>
    22ee:	61 50       	subi	r22, 0x01	; 1
    22f0:	71 09       	sbc	r23, r1
    22f2:	45 e3       	ldi	r20, 0x35	; 53
    22f4:	4a 95       	dec	r20
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <sound_tone+0x1a>
    22f8:	00 00       	nop
    22fa:	61 15       	cp	r22, r1
    22fc:	71 05       	cpc	r23, r1
    22fe:	a1 f7       	brne	.-24     	; 0x22e8 <sound_tone+0xe>
    2300:	c4 9a       	sbi	0x18, 4	; 24
    2302:	9b 01       	movw	r18, r22
    2304:	28 1b       	sub	r18, r24
    2306:	39 0b       	sbc	r19, r25
    2308:	61 15       	cp	r22, r1
    230a:	71 05       	cpc	r23, r1
    230c:	31 f3       	breq	.-52     	; 0x22da <sound_tone>
    230e:	62 17       	cp	r22, r18
    2310:	73 07       	cpc	r23, r19
    2312:	19 f3       	breq	.-58     	; 0x22da <sound_tone>
    2314:	61 50       	subi	r22, 0x01	; 1
    2316:	71 09       	sbc	r23, r1
    2318:	45 e3       	ldi	r20, 0x35	; 53
    231a:	4a 95       	dec	r20
    231c:	f1 f7       	brne	.-4      	; 0x231a <sound_tone+0x40>
    231e:	00 00       	nop
    2320:	f3 cf       	rjmp	.-26     	; 0x2308 <sound_tone+0x2e>
    2322:	08 95       	ret

00002324 <adc_init>:
    2324:	e1 e6       	ldi	r30, 0x61	; 97
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	90 81       	ld	r25, Z
    232a:	21 e0       	ldi	r18, 0x01	; 1
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <adc_init+0xe>
    2330:	22 0f       	add	r18, r18
    2332:	8a 95       	dec	r24
    2334:	ea f7       	brpl	.-6      	; 0x2330 <adc_init+0xc>
    2336:	20 95       	com	r18
    2338:	92 23       	and	r25, r18
    233a:	90 83       	st	Z, r25
    233c:	e2 e6       	ldi	r30, 0x62	; 98
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	28 23       	and	r18, r24
    2344:	20 83       	st	Z, r18
    2346:	08 95       	ret

00002348 <adc_read>:
    2348:	90 e4       	ldi	r25, 0x40	; 64
    234a:	97 b9       	out	0x07, r25	; 7
    234c:	97 b1       	in	r25, 0x07	; 7
    234e:	87 70       	andi	r24, 0x07	; 7
    2350:	98 2b       	or	r25, r24
    2352:	97 b9       	out	0x07, r25	; 7
    2354:	87 ec       	ldi	r24, 0xC7	; 199
    2356:	86 b9       	out	0x06, r24	; 6
    2358:	36 9b       	sbis	0x06, 6	; 6
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <adc_read+0x18>
    235c:	00 00       	nop
    235e:	fc cf       	rjmp	.-8      	; 0x2358 <adc_read+0x10>
    2360:	24 b1       	in	r18, 0x04	; 4
    2362:	85 b1       	in	r24, 0x05	; 5
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	98 2f       	mov	r25, r24
    2368:	88 27       	eor	r24, r24
    236a:	82 0f       	add	r24, r18
    236c:	91 1d       	adc	r25, r1
    236e:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <adc_random_seed>
    2372:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <adc_random_seed+0x1>
    2376:	28 0f       	add	r18, r24
    2378:	39 1f       	adc	r19, r25
    237a:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <adc_random_seed+0x1>
    237e:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <adc_random_seed>
    2382:	08 95       	ret

00002384 <adc_get_random_seed>:
    2384:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <adc_random_seed>
    2388:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <adc_random_seed+0x1>
    238c:	08 95       	ret

0000238e <__cmpsf2>:
    238e:	0e 94 6d 12 	call	0x24da	; 0x24da <__fp_cmp>
    2392:	08 f4       	brcc	.+2      	; 0x2396 <__cmpsf2+0x8>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	08 95       	ret

00002398 <__divsf3>:
    2398:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__divsf3x>
    239c:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__fp_round>
    23a0:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscB>
    23a4:	58 f0       	brcs	.+22     	; 0x23bc <__divsf3+0x24>
    23a6:	0e 94 9a 12 	call	0x2534	; 0x2534 <__fp_pscA>
    23aa:	40 f0       	brcs	.+16     	; 0x23bc <__divsf3+0x24>
    23ac:	29 f4       	brne	.+10     	; 0x23b8 <__divsf3+0x20>
    23ae:	5f 3f       	cpi	r21, 0xFF	; 255
    23b0:	29 f0       	breq	.+10     	; 0x23bc <__divsf3+0x24>
    23b2:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>
    23b6:	51 11       	cpse	r21, r1
    23b8:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__fp_szero>
    23bc:	0c 94 97 12 	jmp	0x252e	; 0x252e <__fp_nan>

000023c0 <__divsf3x>:
    23c0:	0e 94 b9 12 	call	0x2572	; 0x2572 <__fp_split3>
    23c4:	68 f3       	brcs	.-38     	; 0x23a0 <__divsf3+0x8>

000023c6 <__divsf3_pse>:
    23c6:	99 23       	and	r25, r25
    23c8:	b1 f3       	breq	.-20     	; 0x23b6 <__divsf3+0x1e>
    23ca:	55 23       	and	r21, r21
    23cc:	91 f3       	breq	.-28     	; 0x23b2 <__divsf3+0x1a>
    23ce:	95 1b       	sub	r25, r21
    23d0:	55 0b       	sbc	r21, r21
    23d2:	bb 27       	eor	r27, r27
    23d4:	aa 27       	eor	r26, r26
    23d6:	62 17       	cp	r22, r18
    23d8:	73 07       	cpc	r23, r19
    23da:	84 07       	cpc	r24, r20
    23dc:	38 f0       	brcs	.+14     	; 0x23ec <__divsf3_pse+0x26>
    23de:	9f 5f       	subi	r25, 0xFF	; 255
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	22 0f       	add	r18, r18
    23e4:	33 1f       	adc	r19, r19
    23e6:	44 1f       	adc	r20, r20
    23e8:	aa 1f       	adc	r26, r26
    23ea:	a9 f3       	breq	.-22     	; 0x23d6 <__divsf3_pse+0x10>
    23ec:	35 d0       	rcall	.+106    	; 0x2458 <__divsf3_pse+0x92>
    23ee:	0e 2e       	mov	r0, r30
    23f0:	3a f0       	brmi	.+14     	; 0x2400 <__divsf3_pse+0x3a>
    23f2:	e0 e8       	ldi	r30, 0x80	; 128
    23f4:	32 d0       	rcall	.+100    	; 0x245a <__divsf3_pse+0x94>
    23f6:	91 50       	subi	r25, 0x01	; 1
    23f8:	50 40       	sbci	r21, 0x00	; 0
    23fa:	e6 95       	lsr	r30
    23fc:	00 1c       	adc	r0, r0
    23fe:	ca f7       	brpl	.-14     	; 0x23f2 <__divsf3_pse+0x2c>
    2400:	2b d0       	rcall	.+86     	; 0x2458 <__divsf3_pse+0x92>
    2402:	fe 2f       	mov	r31, r30
    2404:	29 d0       	rcall	.+82     	; 0x2458 <__divsf3_pse+0x92>
    2406:	66 0f       	add	r22, r22
    2408:	77 1f       	adc	r23, r23
    240a:	88 1f       	adc	r24, r24
    240c:	bb 1f       	adc	r27, r27
    240e:	26 17       	cp	r18, r22
    2410:	37 07       	cpc	r19, r23
    2412:	48 07       	cpc	r20, r24
    2414:	ab 07       	cpc	r26, r27
    2416:	b0 e8       	ldi	r27, 0x80	; 128
    2418:	09 f0       	breq	.+2      	; 0x241c <__divsf3_pse+0x56>
    241a:	bb 0b       	sbc	r27, r27
    241c:	80 2d       	mov	r24, r0
    241e:	bf 01       	movw	r22, r30
    2420:	ff 27       	eor	r31, r31
    2422:	93 58       	subi	r25, 0x83	; 131
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	3a f0       	brmi	.+14     	; 0x2436 <__divsf3_pse+0x70>
    2428:	9e 3f       	cpi	r25, 0xFE	; 254
    242a:	51 05       	cpc	r21, r1
    242c:	78 f0       	brcs	.+30     	; 0x244c <__divsf3_pse+0x86>
    242e:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>
    2432:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__fp_szero>
    2436:	5f 3f       	cpi	r21, 0xFF	; 255
    2438:	e4 f3       	brlt	.-8      	; 0x2432 <__divsf3_pse+0x6c>
    243a:	98 3e       	cpi	r25, 0xE8	; 232
    243c:	d4 f3       	brlt	.-12     	; 0x2432 <__divsf3_pse+0x6c>
    243e:	86 95       	lsr	r24
    2440:	77 95       	ror	r23
    2442:	67 95       	ror	r22
    2444:	b7 95       	ror	r27
    2446:	f7 95       	ror	r31
    2448:	9f 5f       	subi	r25, 0xFF	; 255
    244a:	c9 f7       	brne	.-14     	; 0x243e <__divsf3_pse+0x78>
    244c:	88 0f       	add	r24, r24
    244e:	91 1d       	adc	r25, r1
    2450:	96 95       	lsr	r25
    2452:	87 95       	ror	r24
    2454:	97 f9       	bld	r25, 7
    2456:	08 95       	ret
    2458:	e1 e0       	ldi	r30, 0x01	; 1
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	88 1f       	adc	r24, r24
    2460:	bb 1f       	adc	r27, r27
    2462:	62 17       	cp	r22, r18
    2464:	73 07       	cpc	r23, r19
    2466:	84 07       	cpc	r24, r20
    2468:	ba 07       	cpc	r27, r26
    246a:	20 f0       	brcs	.+8      	; 0x2474 <__divsf3_pse+0xae>
    246c:	62 1b       	sub	r22, r18
    246e:	73 0b       	sbc	r23, r19
    2470:	84 0b       	sbc	r24, r20
    2472:	ba 0b       	sbc	r27, r26
    2474:	ee 1f       	adc	r30, r30
    2476:	88 f7       	brcc	.-30     	; 0x245a <__divsf3_pse+0x94>
    2478:	e0 95       	com	r30
    247a:	08 95       	ret

0000247c <__fixunssfsi>:
    247c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__fp_splitA>
    2480:	88 f0       	brcs	.+34     	; 0x24a4 <__fixunssfsi+0x28>
    2482:	9f 57       	subi	r25, 0x7F	; 127
    2484:	98 f0       	brcs	.+38     	; 0x24ac <__fixunssfsi+0x30>
    2486:	b9 2f       	mov	r27, r25
    2488:	99 27       	eor	r25, r25
    248a:	b7 51       	subi	r27, 0x17	; 23
    248c:	b0 f0       	brcs	.+44     	; 0x24ba <__fixunssfsi+0x3e>
    248e:	e1 f0       	breq	.+56     	; 0x24c8 <__fixunssfsi+0x4c>
    2490:	66 0f       	add	r22, r22
    2492:	77 1f       	adc	r23, r23
    2494:	88 1f       	adc	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	1a f0       	brmi	.+6      	; 0x24a0 <__fixunssfsi+0x24>
    249a:	ba 95       	dec	r27
    249c:	c9 f7       	brne	.-14     	; 0x2490 <__fixunssfsi+0x14>
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <__fixunssfsi+0x4c>
    24a0:	b1 30       	cpi	r27, 0x01	; 1
    24a2:	91 f0       	breq	.+36     	; 0x24c8 <__fixunssfsi+0x4c>
    24a4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fp_zero>
    24a8:	b1 e0       	ldi	r27, 0x01	; 1
    24aa:	08 95       	ret
    24ac:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_zero>
    24b0:	67 2f       	mov	r22, r23
    24b2:	78 2f       	mov	r23, r24
    24b4:	88 27       	eor	r24, r24
    24b6:	b8 5f       	subi	r27, 0xF8	; 248
    24b8:	39 f0       	breq	.+14     	; 0x24c8 <__fixunssfsi+0x4c>
    24ba:	b9 3f       	cpi	r27, 0xF9	; 249
    24bc:	cc f3       	brlt	.-14     	; 0x24b0 <__fixunssfsi+0x34>
    24be:	86 95       	lsr	r24
    24c0:	77 95       	ror	r23
    24c2:	67 95       	ror	r22
    24c4:	b3 95       	inc	r27
    24c6:	d9 f7       	brne	.-10     	; 0x24be <__fixunssfsi+0x42>
    24c8:	3e f4       	brtc	.+14     	; 0x24d8 <__fixunssfsi+0x5c>
    24ca:	90 95       	com	r25
    24cc:	80 95       	com	r24
    24ce:	70 95       	com	r23
    24d0:	61 95       	neg	r22
    24d2:	7f 4f       	sbci	r23, 0xFF	; 255
    24d4:	8f 4f       	sbci	r24, 0xFF	; 255
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	08 95       	ret

000024da <__fp_cmp>:
    24da:	99 0f       	add	r25, r25
    24dc:	00 08       	sbc	r0, r0
    24de:	55 0f       	add	r21, r21
    24e0:	aa 0b       	sbc	r26, r26
    24e2:	e0 e8       	ldi	r30, 0x80	; 128
    24e4:	fe ef       	ldi	r31, 0xFE	; 254
    24e6:	16 16       	cp	r1, r22
    24e8:	17 06       	cpc	r1, r23
    24ea:	e8 07       	cpc	r30, r24
    24ec:	f9 07       	cpc	r31, r25
    24ee:	c0 f0       	brcs	.+48     	; 0x2520 <__fp_cmp+0x46>
    24f0:	12 16       	cp	r1, r18
    24f2:	13 06       	cpc	r1, r19
    24f4:	e4 07       	cpc	r30, r20
    24f6:	f5 07       	cpc	r31, r21
    24f8:	98 f0       	brcs	.+38     	; 0x2520 <__fp_cmp+0x46>
    24fa:	62 1b       	sub	r22, r18
    24fc:	73 0b       	sbc	r23, r19
    24fe:	84 0b       	sbc	r24, r20
    2500:	95 0b       	sbc	r25, r21
    2502:	39 f4       	brne	.+14     	; 0x2512 <__fp_cmp+0x38>
    2504:	0a 26       	eor	r0, r26
    2506:	61 f0       	breq	.+24     	; 0x2520 <__fp_cmp+0x46>
    2508:	23 2b       	or	r18, r19
    250a:	24 2b       	or	r18, r20
    250c:	25 2b       	or	r18, r21
    250e:	21 f4       	brne	.+8      	; 0x2518 <__fp_cmp+0x3e>
    2510:	08 95       	ret
    2512:	0a 26       	eor	r0, r26
    2514:	09 f4       	brne	.+2      	; 0x2518 <__fp_cmp+0x3e>
    2516:	a1 40       	sbci	r26, 0x01	; 1
    2518:	a6 95       	lsr	r26
    251a:	8f ef       	ldi	r24, 0xFF	; 255
    251c:	81 1d       	adc	r24, r1
    251e:	81 1d       	adc	r24, r1
    2520:	08 95       	ret

00002522 <__fp_inf>:
    2522:	97 f9       	bld	r25, 7
    2524:	9f 67       	ori	r25, 0x7F	; 127
    2526:	80 e8       	ldi	r24, 0x80	; 128
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	08 95       	ret

0000252e <__fp_nan>:
    252e:	9f ef       	ldi	r25, 0xFF	; 255
    2530:	80 ec       	ldi	r24, 0xC0	; 192
    2532:	08 95       	ret

00002534 <__fp_pscA>:
    2534:	00 24       	eor	r0, r0
    2536:	0a 94       	dec	r0
    2538:	16 16       	cp	r1, r22
    253a:	17 06       	cpc	r1, r23
    253c:	18 06       	cpc	r1, r24
    253e:	09 06       	cpc	r0, r25
    2540:	08 95       	ret

00002542 <__fp_pscB>:
    2542:	00 24       	eor	r0, r0
    2544:	0a 94       	dec	r0
    2546:	12 16       	cp	r1, r18
    2548:	13 06       	cpc	r1, r19
    254a:	14 06       	cpc	r1, r20
    254c:	05 06       	cpc	r0, r21
    254e:	08 95       	ret

00002550 <__fp_round>:
    2550:	09 2e       	mov	r0, r25
    2552:	03 94       	inc	r0
    2554:	00 0c       	add	r0, r0
    2556:	11 f4       	brne	.+4      	; 0x255c <__fp_round+0xc>
    2558:	88 23       	and	r24, r24
    255a:	52 f0       	brmi	.+20     	; 0x2570 <__fp_round+0x20>
    255c:	bb 0f       	add	r27, r27
    255e:	40 f4       	brcc	.+16     	; 0x2570 <__fp_round+0x20>
    2560:	bf 2b       	or	r27, r31
    2562:	11 f4       	brne	.+4      	; 0x2568 <__fp_round+0x18>
    2564:	60 ff       	sbrs	r22, 0
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <__fp_round+0x20>
    2568:	6f 5f       	subi	r22, 0xFF	; 255
    256a:	7f 4f       	sbci	r23, 0xFF	; 255
    256c:	8f 4f       	sbci	r24, 0xFF	; 255
    256e:	9f 4f       	sbci	r25, 0xFF	; 255
    2570:	08 95       	ret

00002572 <__fp_split3>:
    2572:	57 fd       	sbrc	r21, 7
    2574:	90 58       	subi	r25, 0x80	; 128
    2576:	44 0f       	add	r20, r20
    2578:	55 1f       	adc	r21, r21
    257a:	59 f0       	breq	.+22     	; 0x2592 <__fp_splitA+0x10>
    257c:	5f 3f       	cpi	r21, 0xFF	; 255
    257e:	71 f0       	breq	.+28     	; 0x259c <__fp_splitA+0x1a>
    2580:	47 95       	ror	r20

00002582 <__fp_splitA>:
    2582:	88 0f       	add	r24, r24
    2584:	97 fb       	bst	r25, 7
    2586:	99 1f       	adc	r25, r25
    2588:	61 f0       	breq	.+24     	; 0x25a2 <__fp_splitA+0x20>
    258a:	9f 3f       	cpi	r25, 0xFF	; 255
    258c:	79 f0       	breq	.+30     	; 0x25ac <__fp_splitA+0x2a>
    258e:	87 95       	ror	r24
    2590:	08 95       	ret
    2592:	12 16       	cp	r1, r18
    2594:	13 06       	cpc	r1, r19
    2596:	14 06       	cpc	r1, r20
    2598:	55 1f       	adc	r21, r21
    259a:	f2 cf       	rjmp	.-28     	; 0x2580 <__fp_split3+0xe>
    259c:	46 95       	lsr	r20
    259e:	f1 df       	rcall	.-30     	; 0x2582 <__fp_splitA>
    25a0:	08 c0       	rjmp	.+16     	; 0x25b2 <__fp_splitA+0x30>
    25a2:	16 16       	cp	r1, r22
    25a4:	17 06       	cpc	r1, r23
    25a6:	18 06       	cpc	r1, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	f1 cf       	rjmp	.-30     	; 0x258e <__fp_splitA+0xc>
    25ac:	86 95       	lsr	r24
    25ae:	71 05       	cpc	r23, r1
    25b0:	61 05       	cpc	r22, r1
    25b2:	08 94       	sec
    25b4:	08 95       	ret

000025b6 <__fp_zero>:
    25b6:	e8 94       	clt

000025b8 <__fp_szero>:
    25b8:	bb 27       	eor	r27, r27
    25ba:	66 27       	eor	r22, r22
    25bc:	77 27       	eor	r23, r23
    25be:	cb 01       	movw	r24, r22
    25c0:	97 f9       	bld	r25, 7
    25c2:	08 95       	ret

000025c4 <__gesf2>:
    25c4:	0e 94 6d 12 	call	0x24da	; 0x24da <__fp_cmp>
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <__gesf2+0x8>
    25ca:	8f ef       	ldi	r24, 0xFF	; 255
    25cc:	08 95       	ret

000025ce <__mulsf3>:
    25ce:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__mulsf3x>
    25d2:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__fp_round>
    25d6:	0e 94 9a 12 	call	0x2534	; 0x2534 <__fp_pscA>
    25da:	38 f0       	brcs	.+14     	; 0x25ea <__mulsf3+0x1c>
    25dc:	0e 94 a1 12 	call	0x2542	; 0x2542 <__fp_pscB>
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <__mulsf3+0x1c>
    25e2:	95 23       	and	r25, r21
    25e4:	11 f0       	breq	.+4      	; 0x25ea <__mulsf3+0x1c>
    25e6:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>
    25ea:	0c 94 97 12 	jmp	0x252e	; 0x252e <__fp_nan>
    25ee:	11 24       	eor	r1, r1
    25f0:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__fp_szero>

000025f4 <__mulsf3x>:
    25f4:	0e 94 b9 12 	call	0x2572	; 0x2572 <__fp_split3>
    25f8:	70 f3       	brcs	.-36     	; 0x25d6 <__mulsf3+0x8>

000025fa <__mulsf3_pse>:
    25fa:	95 9f       	mul	r25, r21
    25fc:	c1 f3       	breq	.-16     	; 0x25ee <__mulsf3+0x20>
    25fe:	95 0f       	add	r25, r21
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	55 1f       	adc	r21, r21
    2604:	62 9f       	mul	r22, r18
    2606:	f0 01       	movw	r30, r0
    2608:	72 9f       	mul	r23, r18
    260a:	bb 27       	eor	r27, r27
    260c:	f0 0d       	add	r31, r0
    260e:	b1 1d       	adc	r27, r1
    2610:	63 9f       	mul	r22, r19
    2612:	aa 27       	eor	r26, r26
    2614:	f0 0d       	add	r31, r0
    2616:	b1 1d       	adc	r27, r1
    2618:	aa 1f       	adc	r26, r26
    261a:	64 9f       	mul	r22, r20
    261c:	66 27       	eor	r22, r22
    261e:	b0 0d       	add	r27, r0
    2620:	a1 1d       	adc	r26, r1
    2622:	66 1f       	adc	r22, r22
    2624:	82 9f       	mul	r24, r18
    2626:	22 27       	eor	r18, r18
    2628:	b0 0d       	add	r27, r0
    262a:	a1 1d       	adc	r26, r1
    262c:	62 1f       	adc	r22, r18
    262e:	73 9f       	mul	r23, r19
    2630:	b0 0d       	add	r27, r0
    2632:	a1 1d       	adc	r26, r1
    2634:	62 1f       	adc	r22, r18
    2636:	83 9f       	mul	r24, r19
    2638:	a0 0d       	add	r26, r0
    263a:	61 1d       	adc	r22, r1
    263c:	22 1f       	adc	r18, r18
    263e:	74 9f       	mul	r23, r20
    2640:	33 27       	eor	r19, r19
    2642:	a0 0d       	add	r26, r0
    2644:	61 1d       	adc	r22, r1
    2646:	23 1f       	adc	r18, r19
    2648:	84 9f       	mul	r24, r20
    264a:	60 0d       	add	r22, r0
    264c:	21 1d       	adc	r18, r1
    264e:	82 2f       	mov	r24, r18
    2650:	76 2f       	mov	r23, r22
    2652:	6a 2f       	mov	r22, r26
    2654:	11 24       	eor	r1, r1
    2656:	9f 57       	subi	r25, 0x7F	; 127
    2658:	50 40       	sbci	r21, 0x00	; 0
    265a:	9a f0       	brmi	.+38     	; 0x2682 <__mulsf3_pse+0x88>
    265c:	f1 f0       	breq	.+60     	; 0x269a <__mulsf3_pse+0xa0>
    265e:	88 23       	and	r24, r24
    2660:	4a f0       	brmi	.+18     	; 0x2674 <__mulsf3_pse+0x7a>
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	bb 1f       	adc	r27, r27
    2668:	66 1f       	adc	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	88 1f       	adc	r24, r24
    266e:	91 50       	subi	r25, 0x01	; 1
    2670:	50 40       	sbci	r21, 0x00	; 0
    2672:	a9 f7       	brne	.-22     	; 0x265e <__mulsf3_pse+0x64>
    2674:	9e 3f       	cpi	r25, 0xFE	; 254
    2676:	51 05       	cpc	r21, r1
    2678:	80 f0       	brcs	.+32     	; 0x269a <__mulsf3_pse+0xa0>
    267a:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__fp_inf>
    267e:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__fp_szero>
    2682:	5f 3f       	cpi	r21, 0xFF	; 255
    2684:	e4 f3       	brlt	.-8      	; 0x267e <__mulsf3_pse+0x84>
    2686:	98 3e       	cpi	r25, 0xE8	; 232
    2688:	d4 f3       	brlt	.-12     	; 0x267e <__mulsf3_pse+0x84>
    268a:	86 95       	lsr	r24
    268c:	77 95       	ror	r23
    268e:	67 95       	ror	r22
    2690:	b7 95       	ror	r27
    2692:	f7 95       	ror	r31
    2694:	e7 95       	ror	r30
    2696:	9f 5f       	subi	r25, 0xFF	; 255
    2698:	c1 f7       	brne	.-16     	; 0x268a <__mulsf3_pse+0x90>
    269a:	fe 2b       	or	r31, r30
    269c:	88 0f       	add	r24, r24
    269e:	91 1d       	adc	r25, r1
    26a0:	96 95       	lsr	r25
    26a2:	87 95       	ror	r24
    26a4:	97 f9       	bld	r25, 7
    26a6:	08 95       	ret

000026a8 <__divmodsi4>:
    26a8:	05 2e       	mov	r0, r21
    26aa:	97 fb       	bst	r25, 7
    26ac:	1e f4       	brtc	.+6      	; 0x26b4 <__divmodsi4+0xc>
    26ae:	00 94       	com	r0
    26b0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__negsi2>
    26b4:	57 fd       	sbrc	r21, 7
    26b6:	07 d0       	rcall	.+14     	; 0x26c6 <__divmodsi4_neg2>
    26b8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__udivmodsi4>
    26bc:	07 fc       	sbrc	r0, 7
    26be:	03 d0       	rcall	.+6      	; 0x26c6 <__divmodsi4_neg2>
    26c0:	4e f4       	brtc	.+18     	; 0x26d4 <__divmodsi4_exit>
    26c2:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__negsi2>

000026c6 <__divmodsi4_neg2>:
    26c6:	50 95       	com	r21
    26c8:	40 95       	com	r20
    26ca:	30 95       	com	r19
    26cc:	21 95       	neg	r18
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	4f 4f       	sbci	r20, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255

000026d4 <__divmodsi4_exit>:
    26d4:	08 95       	ret

000026d6 <__negsi2>:
    26d6:	90 95       	com	r25
    26d8:	80 95       	com	r24
    26da:	70 95       	com	r23
    26dc:	61 95       	neg	r22
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	08 95       	ret

000026e6 <__udivmodsi4>:
    26e6:	a1 e2       	ldi	r26, 0x21	; 33
    26e8:	1a 2e       	mov	r1, r26
    26ea:	aa 1b       	sub	r26, r26
    26ec:	bb 1b       	sub	r27, r27
    26ee:	fd 01       	movw	r30, r26
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <__udivmodsi4_ep>

000026f2 <__udivmodsi4_loop>:
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	ee 1f       	adc	r30, r30
    26f8:	ff 1f       	adc	r31, r31
    26fa:	a2 17       	cp	r26, r18
    26fc:	b3 07       	cpc	r27, r19
    26fe:	e4 07       	cpc	r30, r20
    2700:	f5 07       	cpc	r31, r21
    2702:	20 f0       	brcs	.+8      	; 0x270c <__udivmodsi4_ep>
    2704:	a2 1b       	sub	r26, r18
    2706:	b3 0b       	sbc	r27, r19
    2708:	e4 0b       	sbc	r30, r20
    270a:	f5 0b       	sbc	r31, r21

0000270c <__udivmodsi4_ep>:
    270c:	66 1f       	adc	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	1a 94       	dec	r1
    2716:	69 f7       	brne	.-38     	; 0x26f2 <__udivmodsi4_loop>
    2718:	60 95       	com	r22
    271a:	70 95       	com	r23
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	9b 01       	movw	r18, r22
    2722:	ac 01       	movw	r20, r24
    2724:	bd 01       	movw	r22, r26
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret

0000272a <do_rand>:
    272a:	8f 92       	push	r8
    272c:	9f 92       	push	r9
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	ec 01       	movw	r28, r24
    2740:	68 81       	ld	r22, Y
    2742:	79 81       	ldd	r23, Y+1	; 0x01
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	61 15       	cp	r22, r1
    274a:	71 05       	cpc	r23, r1
    274c:	81 05       	cpc	r24, r1
    274e:	91 05       	cpc	r25, r1
    2750:	21 f4       	brne	.+8      	; 0x275a <do_rand+0x30>
    2752:	64 e2       	ldi	r22, 0x24	; 36
    2754:	79 ed       	ldi	r23, 0xD9	; 217
    2756:	8b e5       	ldi	r24, 0x5B	; 91
    2758:	97 e0       	ldi	r25, 0x07	; 7
    275a:	2d e1       	ldi	r18, 0x1D	; 29
    275c:	33 ef       	ldi	r19, 0xF3	; 243
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__divmodsi4>
    2766:	49 01       	movw	r8, r18
    2768:	5a 01       	movw	r10, r20
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	a7 ea       	ldi	r26, 0xA7	; 167
    2770:	b1 e4       	ldi	r27, 0x41	; 65
    2772:	0e 94 ef 13 	call	0x27de	; 0x27de <__muluhisi3>
    2776:	6b 01       	movw	r12, r22
    2778:	7c 01       	movw	r14, r24
    277a:	ac ee       	ldi	r26, 0xEC	; 236
    277c:	b4 ef       	ldi	r27, 0xF4	; 244
    277e:	a5 01       	movw	r20, r10
    2780:	94 01       	movw	r18, r8
    2782:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__mulohisi3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8c 0d       	add	r24, r12
    278c:	9d 1d       	adc	r25, r13
    278e:	ae 1d       	adc	r26, r14
    2790:	bf 1d       	adc	r27, r15
    2792:	b7 ff       	sbrs	r27, 7
    2794:	03 c0       	rjmp	.+6      	; 0x279c <do_rand+0x72>
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	a1 09       	sbc	r26, r1
    279a:	b0 48       	sbci	r27, 0x80	; 128
    279c:	88 83       	st	Y, r24
    279e:	99 83       	std	Y+1, r25	; 0x01
    27a0:	aa 83       	std	Y+2, r26	; 0x02
    27a2:	bb 83       	std	Y+3, r27	; 0x03
    27a4:	9f 77       	andi	r25, 0x7F	; 127
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	bf 90       	pop	r11
    27b4:	af 90       	pop	r10
    27b6:	9f 90       	pop	r9
    27b8:	8f 90       	pop	r8
    27ba:	08 95       	ret

000027bc <rand_r>:
    27bc:	0c 94 95 13 	jmp	0x272a	; 0x272a <do_rand>

000027c0 <rand>:
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0c 94 95 13 	jmp	0x272a	; 0x272a <do_rand>

000027c8 <srand>:
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    27d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    27d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    27d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    27dc:	08 95       	ret

000027de <__muluhisi3>:
    27de:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    27e2:	a5 9f       	mul	r26, r21
    27e4:	90 0d       	add	r25, r0
    27e6:	b4 9f       	mul	r27, r20
    27e8:	90 0d       	add	r25, r0
    27ea:	a4 9f       	mul	r26, r20
    27ec:	80 0d       	add	r24, r0
    27ee:	91 1d       	adc	r25, r1
    27f0:	11 24       	eor	r1, r1
    27f2:	08 95       	ret

000027f4 <__mulshisi3>:
    27f4:	b7 ff       	sbrs	r27, 7
    27f6:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__muluhisi3>

000027fa <__mulohisi3>:
    27fa:	0e 94 ef 13 	call	0x27de	; 0x27de <__muluhisi3>
    27fe:	82 1b       	sub	r24, r18
    2800:	93 0b       	sbc	r25, r19
    2802:	08 95       	ret

00002804 <__umulhisi3>:
    2804:	a2 9f       	mul	r26, r18
    2806:	b0 01       	movw	r22, r0
    2808:	b3 9f       	mul	r27, r19
    280a:	c0 01       	movw	r24, r0
    280c:	a3 9f       	mul	r26, r19
    280e:	70 0d       	add	r23, r0
    2810:	81 1d       	adc	r24, r1
    2812:	11 24       	eor	r1, r1
    2814:	91 1d       	adc	r25, r1
    2816:	b2 9f       	mul	r27, r18
    2818:	70 0d       	add	r23, r0
    281a:	81 1d       	adc	r24, r1
    281c:	11 24       	eor	r1, r1
    281e:	91 1d       	adc	r25, r1
    2820:	08 95       	ret

00002822 <_exit>:
    2822:	f8 94       	cli

00002824 <__stop_program>:
    2824:	ff cf       	rjmp	.-2      	; 0x2824 <__stop_program>
