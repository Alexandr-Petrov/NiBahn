
Project_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  0000269a  0000272e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000269a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  008003a4  008003a4  000029d2  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  000029d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013be  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000616e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006180  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000693c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000706e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_17>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	32 2e       	mov	r3, r18
      8e:	31 31       	cpi	r19, 0x11	; 17
	...

00000091 <bot_lib_revision>:
	...

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	ea e9       	ldi	r30, 0x9A	; 154
      a6:	f6 e2       	ldi	r31, 0x26	; 38
      a8:	00 e0       	ldi	r16, 0x00	; 0
      aa:	0b bf       	out	0x3b, r16	; 59
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
      ae:	07 90       	elpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a4 3a       	cpi	r26, 0xA4	; 164
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
      b8:	24 e0       	ldi	r18, 0x04	; 4
      ba:	a4 ea       	ldi	r26, 0xA4	; 164
      bc:	b3 e0       	ldi	r27, 0x03	; 3
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a3 37       	cpi	r26, 0x73	; 115
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 b4 02 	call	0x568	; 0x568 <main>
      cc:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <findDirection>:
 ============================================================================
 */

#include "main.h"
void findDirection()
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <findDirection+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	int r;
	drive(); 	//Nibo goes forward
      de:	0e 94 3a 02 	call	0x474	; 0x474 <drive>
	showNibo(); //Shows Nibo on display
      e2:	0e 94 0f 03 	call	0x61e	; 0x61e <showNibo>
	static int timer=0; //variable for counter: how long the Nibo
						//rode from beginning to end of the tunnel

	//Tunnel
	// Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      e6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
      ea:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
      ee:	81 15       	cp	r24, r1
      f0:	95 4b       	sbci	r25, 0xB5	; 181
      f2:	a0 f0       	brcs	.+40     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 200 &&
      f4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
      f8:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
	static int timer=0; //variable for counter: how long the Nibo
						//rode from beginning to end of the tunnel

	//Tunnel
	// Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      fc:	81 15       	cp	r24, r1
      fe:	99 4c       	sbci	r25, 0xC9	; 201
     100:	68 f0       	brcs	.+26     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 200 &&
		copro_distance[4]/256 > 180)
     102:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     106:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
						//rode from beginning to end of the tunnel

	//Tunnel
	// Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
		copro_distance[2]/256 > 200 &&
     10a:	81 15       	cp	r24, r1
     10c:	95 4b       	sbci	r25, 0xB5	; 181
     10e:	30 f0       	brcs	.+12     	; 0x11c <findDirection+0x48>
		copro_distance[4]/256 > 180)
		{
			flag=1; // Set flag to 1
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
     118:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
			//goBack(); Nibo goes back
		}
	//Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     11c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     120:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     124:	8f 3f       	cpi	r24, 0xFF	; 255
     126:	91 05       	cpc	r25, r1
     128:	81 f1       	breq	.+96     	; 0x18a <findDirection+0xb6>
     12a:	78 f1       	brcs	.+94     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
     12c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     130:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		{
			flag=1; // Set flag to 1
			//goBack(); Nibo goes back
		}
	//Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     134:	81 15       	cp	r24, r1
     136:	93 43       	sbci	r25, 0x33	; 51
     138:	40 f1       	brcs	.+80     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
			{
				timer++; //counter increases
     13a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     13e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     148:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				// if Nibo reached the end of the tunnel and the counter is not equal -2,
				// Nibo goes back
				if(flag==1 && timer!=-2)
     14c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     150:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	11 f5       	brne	.+68     	; 0x19c <findDirection+0xc8>
     158:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     15c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     160:	02 96       	adiw	r24, 0x02	; 2
     162:	e1 f0       	breq	.+56     	; 0x19c <findDirection+0xc8>
				{
					goBack(); //Nibo goes back
     164:	0e 94 a0 02 	call	0x540	; 0x540 <goBack>
					LEDShow('r', 0, 1); // Sets LEDs 0-1 to red
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e7       	ldi	r24, 0x72	; 114
     172:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
					timer--; //counter decreases
     176:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     17a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     184:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>
			{
				timer++; //counter increases

				// if Nibo reached the end of the tunnel and the counter is not equal -2,
				// Nibo goes back
				if(flag==1 && timer!=-2)
     188:	09 c0       	rjmp	.+18     	; 0x19c <findDirection+0xc8>
				}
			}
	//if Nibo left the tunnel
	else
	{
		leds_set_status(LEDS_OFF, 0); // Switch off right back LED
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <leds_set_status>
		leds_set_status(LEDS_OFF, 1); // Switch off left back LED
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 63 10 	call	0x20c6	; 0x20c6 <leds_set_status>
     19a:	01 c0       	rjmp	.+2      	; 0x19e <findDirection+0xca>
			{
				timer++; //counter increases

				// if Nibo reached the end of the tunnel and the counter is not equal -2,
				// Nibo goes back
				if(flag==1 && timer!=-2)
     19c:	00 00       	nop
	{
		leds_set_status(LEDS_OFF, 0); // Switch off right back LED
		leds_set_status(LEDS_OFF, 1); // Switch off left back LED
	}
	// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     19e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     1a2:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     1a6:	81 15       	cp	r24, r1
     1a8:	93 43       	sbci	r25, 0x33	; 51
     1aa:	40 f1       	brcs	.+80     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
     1ac:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     1b0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
	{
		leds_set_status(LEDS_OFF, 0); // Switch off right back LED
		leds_set_status(LEDS_OFF, 1); // Switch off left back LED
	}
	// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     1b4:	81 15       	cp	r24, r1
     1b6:	92 43       	sbci	r25, 0x32	; 50
     1b8:	08 f5       	brcc	.+66     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
		flag==1)
     1ba:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     1be:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		leds_set_status(LEDS_OFF, 0); // Switch off right back LED
		leds_set_status(LEDS_OFF, 1); // Switch off left back LED
	}
	// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
		copro_distance[4]/256 < 50 &&
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	d9 f4       	brne	.+54     	; 0x1fc <findDirection+0x128>
		flag==1)
		{
			copro_setTargetRel(-27, 27, 15); //Sets target position for wheels. Nibo turns left
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	6b e1       	ldi	r22, 0x1B	; 27
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	85 ee       	ldi	r24, 0xE5	; 229
     1d0:	9f ef       	ldi	r25, 0xFF	; 255
     1d2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
			LEDShow('g', 0, 1); // Sets LEDs 0-1 to green
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	87 e6       	ldi	r24, 0x67	; 103
     1e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			delay(1000); // wait 1 second, Nibo turns
     1e4:	88 ee       	ldi	r24, 0xE8	; 232
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	0e 94 46 08 	call	0x108c	; 0x108c <delay>
			flag=0; // Set flag to 0
     1ec:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     1f0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; // Reset counter
     1f4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     1f8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>

		}
	// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     1fc:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     200:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     204:	81 15       	cp	r24, r1
     206:	93 43       	sbci	r25, 0x33	; 51
     208:	40 f1       	brcs	.+80     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
     20a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     20e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			flag=0; // Set flag to 0
			timer=0; // Reset counter

		}
	// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     212:	81 15       	cp	r24, r1
     214:	92 43       	sbci	r25, 0x32	; 50
     216:	08 f5       	brcc	.+66     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
		flag==1)
     218:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     21c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0; // Reset counter

		}
	// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
		copro_distance[0]/256 < 50 &&
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	d9 f4       	brne	.+54     	; 0x25a <findDirection+0x186>
		flag==1)
		{
			copro_setTargetRel(27, -27, 15);//Sets target position for wheels. Nibo turns right
     224:	4f e0       	ldi	r20, 0x0F	; 15
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	65 ee       	ldi	r22, 0xE5	; 229
     22a:	7f ef       	ldi	r23, 0xFF	; 255
     22c:	8b e1       	ldi	r24, 0x1B	; 27
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
			LEDShow('g', 0, 1); // Sets LEDs 0-1 to green
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	87 e6       	ldi	r24, 0x67	; 103
     23e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			delay(1000); // wait 1 second, Nibo turns
     242:	88 ee       	ldi	r24, 0xE8	; 232
     244:	93 e0       	ldi	r25, 0x03	; 3
     246:	0e 94 46 08 	call	0x108c	; 0x108c <delay>
			flag=0; //  Set flag to 0
     24a:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     24e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; // reset counter
     252:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     256:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
	// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     25a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     25e:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     262:	81 15       	cp	r24, r1
     264:	92 43       	sbci	r25, 0x32	; 50
     266:	08 f0       	brcs	.+2      	; 0x26a <findDirection+0x196>
     268:	41 c0       	rjmp	.+130    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
     26a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     26e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			delay(1000); // wait 1 second, Nibo turns
			flag=0; //  Set flag to 0
			timer=0; // reset counter
		}
	// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     272:	81 15       	cp	r24, r1
     274:	92 43       	sbci	r25, 0x32	; 50
     276:	d0 f5       	brcc	.+116    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
		flag==1)
     278:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     27c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			flag=0; //  Set flag to 0
			timer=0; // reset counter
		}
	// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
		copro_distance[0]/256 < 50 &&
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f5       	brne	.+104    	; 0x2ec <findDirection+0x218>
		flag==1)
		{
			r = rand() % 2; //generate a number between 0 and 1
     284:	0e 94 1a 13 	call	0x2634	; 0x2634 <rand>
     288:	81 70       	andi	r24, 0x01	; 1
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	99 23       	and	r25, r25
     28e:	24 f4       	brge	.+8      	; 0x298 <findDirection+0x1c4>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	8e 6f       	ori	r24, 0xFE	; 254
     294:	9f 6f       	ori	r25, 0xFF	; 255
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
			if(r==0){
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	89 2b       	or	r24, r25
     2a2:	49 f4       	brne	.+18     	; 0x2b6 <findDirection+0x1e2>
				copro_setTargetRel(-27, 27, 15);//Sets target position for wheels. Nibo turns left
     2a4:	4f e0       	ldi	r20, 0x0F	; 15
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	6b e1       	ldi	r22, 0x1B	; 27
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	85 ee       	ldi	r24, 0xE5	; 229
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
     2b0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <findDirection+0x1f2>
			}
			else{
				copro_setTargetRel(27, -27, 15); //Sets target position for wheels. Nibo turns right
     2b6:	4f e0       	ldi	r20, 0x0F	; 15
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	65 ee       	ldi	r22, 0xE5	; 229
     2bc:	7f ef       	ldi	r23, 0xFF	; 255
     2be:	8b e1       	ldi	r24, 0x1B	; 27
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
			}
			LEDShow('g', 0, 1); // Sets LEDs 0-1 to green
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e6       	ldi	r24, 0x67	; 103
     2d0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			delay(1000); // wait 1 second, Nibo turns
     2d4:	88 ee       	ldi	r24, 0xE8	; 232
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 46 08 	call	0x108c	; 0x108c <delay>
			flag=0; // Set flag to 0
     2dc:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     2e0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0;// reset counter
     2e4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     2e8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
	//turn left
		if (copro_distance[0]/256 > 190 &&
     2ec:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     2f0:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     2f4:	81 15       	cp	r24, r1
     2f6:	9f 4b       	sbci	r25, 0xBF	; 191
     2f8:	f0 f0       	brcs	.+60     	; 0x336 <findDirection+0x262>
			copro_distance[1]/256 > 200 &&
     2fa:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     2fe:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
			delay(1000); // wait 1 second, Nibo turns
			flag=0; // Set flag to 0
			timer=0;// reset counter
		}
	//turn left
		if (copro_distance[0]/256 > 190 &&
     302:	81 15       	cp	r24, r1
     304:	99 4c       	sbci	r25, 0xC9	; 201
     306:	b8 f0       	brcs	.+46     	; 0x336 <findDirection+0x262>
			copro_distance[1]/256 > 200 &&
			copro_distance[2]/256 > 190 &&
     308:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     30c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
			flag=0; // Set flag to 0
			timer=0;// reset counter
		}
	//turn left
		if (copro_distance[0]/256 > 190 &&
			copro_distance[1]/256 > 200 &&
     310:	81 15       	cp	r24, r1
     312:	9f 4b       	sbci	r25, 0xBF	; 191
     314:	80 f0       	brcs	.+32     	; 0x336 <findDirection+0x262>
			copro_distance[2]/256 > 190 &&
			flag==0)
     316:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     31a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0;// reset counter
		}
	//turn left
		if (copro_distance[0]/256 > 190 &&
			copro_distance[1]/256 > 200 &&
			copro_distance[2]/256 > 190 &&
     31e:	89 2b       	or	r24, r25
     320:	51 f4       	brne	.+20     	; 0x336 <findDirection+0x262>
			flag==0)
		{
			LEDShow('r', 5, 7);
     322:	47 e0       	ldi	r20, 0x07	; 7
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	65 e0       	ldi	r22, 0x05	; 5
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	82 e7       	ldi	r24, 0x72	; 114
     32c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			turnLeft();
     330:	0e 94 48 02 	call	0x490	; 0x490 <turnLeft>
     334:	07 c0       	rjmp	.+14     	; 0x344 <findDirection+0x270>
		}
		else
		{
			LEDShow('g', 5, 7);
     336:	47 e0       	ldi	r20, 0x07	; 7
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	65 e0       	ldi	r22, 0x05	; 5
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	87 e6       	ldi	r24, 0x67	; 103
     340:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
		}

		//turn half left
		if ( copro_distance[1]/256 > 200 &&
     344:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     348:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     34c:	81 15       	cp	r24, r1
     34e:	99 4c       	sbci	r25, 0xC9	; 201
     350:	b0 f0       	brcs	.+44     	; 0x37e <findDirection+0x2aa>
			flag==0 )
     352:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     356:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		{
			LEDShow('g', 5, 7);
		}

		//turn half left
		if ( copro_distance[1]/256 > 200 &&
     35a:	89 2b       	or	r24, r25
     35c:	81 f4       	brne	.+32     	; 0x37e <findDirection+0x2aa>
			flag==0 )
		{
			LEDShow('r', 6, 6);
     35e:	46 e0       	ldi	r20, 0x06	; 6
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	66 e0       	ldi	r22, 0x06	; 6
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	82 e7       	ldi	r24, 0x72	; 114
     368:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			HindranceShow(40, 50); //Show the position of Hindrance
     36c:	62 e3       	ldi	r22, 0x32	; 50
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	88 e2       	ldi	r24, 0x28	; 40
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 33 03 	call	0x666	; 0x666 <HindranceShow>
			turnHalfLeft();
     378:	0e 94 5e 02 	call	0x4bc	; 0x4bc <turnHalfLeft>
     37c:	07 c0       	rjmp	.+14     	; 0x38c <findDirection+0x2b8>
	     }
		else {LEDShow('g', 6, 6);}
     37e:	46 e0       	ldi	r20, 0x06	; 6
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	66 e0       	ldi	r22, 0x06	; 6
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	87 e6       	ldi	r24, 0x67	; 103
     388:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>

		//turn right
		if (copro_distance[4]/256 > 190 &&
     38c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     390:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     394:	81 15       	cp	r24, r1
     396:	9f 4b       	sbci	r25, 0xBF	; 191
     398:	f0 f0       	brcs	.+60     	; 0x3d6 <findDirection+0x302>
			copro_distance[3]/256 > 200 &&
     39a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     39e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
			turnHalfLeft();
	     }
		else {LEDShow('g', 6, 6);}

		//turn right
		if (copro_distance[4]/256 > 190 &&
     3a2:	81 15       	cp	r24, r1
     3a4:	99 4c       	sbci	r25, 0xC9	; 201
     3a6:	b8 f0       	brcs	.+46     	; 0x3d6 <findDirection+0x302>
			copro_distance[3]/256 > 200 &&
			copro_distance[2]/256 > 190 &&
     3a8:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     3ac:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
	     }
		else {LEDShow('g', 6, 6);}

		//turn right
		if (copro_distance[4]/256 > 190 &&
			copro_distance[3]/256 > 200 &&
     3b0:	81 15       	cp	r24, r1
     3b2:	9f 4b       	sbci	r25, 0xBF	; 191
     3b4:	80 f0       	brcs	.+32     	; 0x3d6 <findDirection+0x302>
			copro_distance[2]/256 > 190 &&
			flag==0)
     3b6:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     3ba:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else {LEDShow('g', 6, 6);}

		//turn right
		if (copro_distance[4]/256 > 190 &&
			copro_distance[3]/256 > 200 &&
			copro_distance[2]/256 > 190 &&
     3be:	89 2b       	or	r24, r25
     3c0:	51 f4       	brne	.+20     	; 0x3d6 <findDirection+0x302>
			flag==0)
		{
			LEDShow('r', 2, 4);
     3c2:	44 e0       	ldi	r20, 0x04	; 4
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	62 e0       	ldi	r22, 0x02	; 2
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	82 e7       	ldi	r24, 0x72	; 114
     3cc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			turnRight();
     3d0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <turnRight>
     3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <findDirection+0x310>
		}
		else
		{
			LEDShow('g', 2, 4);
     3d6:	44 e0       	ldi	r20, 0x04	; 4
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	87 e6       	ldi	r24, 0x67	; 103
     3e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
		}
		//turn half right
		if (copro_distance[3]/256 > 200 &&
     3e4:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     3e8:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     3ec:	81 15       	cp	r24, r1
     3ee:	99 4c       	sbci	r25, 0xC9	; 201
     3f0:	b0 f0       	brcs	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		    flag==0)
     3f2:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     3f6:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else
		{
			LEDShow('g', 2, 4);
		}
		//turn half right
		if (copro_distance[3]/256 > 200 &&
     3fa:	89 2b       	or	r24, r25
     3fc:	81 f4       	brne	.+32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		    flag==0)
		{
			LEDShow('r', 3, 3);
     3fe:	43 e0       	ldi	r20, 0x03	; 3
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	63 e0       	ldi	r22, 0x03	; 3
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	82 e7       	ldi	r24, 0x72	; 114
     408:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			HindranceShow(85, 50);//Show the position of Hindrance
     40c:	62 e3       	ldi	r22, 0x32	; 50
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	85 e5       	ldi	r24, 0x55	; 85
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 33 03 	call	0x666	; 0x666 <HindranceShow>
			turnHalfRight();
     418:	0e 94 8a 02 	call	0x514	; 0x514 <turnHalfRight>
     41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		 }
		else {LEDShow('g', 3, 3);}
     41e:	43 e0       	ldi	r20, 0x03	; 3
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	63 e0       	ldi	r22, 0x03	; 3
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	87 e6       	ldi	r24, 0x67	; 103
     428:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>

		//turn left or turn right
		if (copro_distance[2]/256 > 200 &&
     42c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     430:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     434:	81 15       	cp	r24, r1
     436:	99 4c       	sbci	r25, 0xC9	; 201
     438:	80 f0       	brcs	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			flag==0)
     43a:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     43e:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			turnHalfRight();
		 }
		else {LEDShow('g', 3, 3);}

		//turn left or turn right
		if (copro_distance[2]/256 > 200 &&
     442:	89 2b       	or	r24, r25
     444:	51 f4       	brne	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			flag==0)
		{
			LEDShow('r', 4, 5);
     446:	45 e0       	ldi	r20, 0x05	; 5
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	64 e0       	ldi	r22, 0x04	; 4
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	82 e7       	ldi	r24, 0x72	; 114
     450:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
			turnLeft();
     454:	0e 94 48 02 	call	0x490	; 0x490 <turnLeft>
     458:	07 c0       	rjmp	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		}
		else
		{
			LEDShow('g', 4, 5);
     45a:	45 e0       	ldi	r20, 0x05	; 5
     45c:	50 e0       	ldi	r21, 0x00	; 0
     45e:	64 e0       	ldi	r22, 0x04	; 4
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	87 e6       	ldi	r24, 0x67	; 103
     464:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LEDShow>
		}
}
     468:	00 00       	nop
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <drive>:
 */
#include "main.h"

//Nibo goes forward
void drive()
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(10, 10);
     47c:	6a e0       	ldi	r22, 0x0A	; 10
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	8a e0       	ldi	r24, 0x0A	; 10
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <copro_setSpeed>
}
     488:	00 00       	nop
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <turnLeft>:
void turnLeft()
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-27, 27, 15);
     498:	4f e0       	ldi	r20, 0x0F	; 15
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	6b e1       	ldi	r22, 0x1B	; 27
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	85 ee       	ldi	r24, 0xE5	; 229
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <copro_resetOdometry>
}
     4b4:	00 00       	nop
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <turnHalfLeft>:

void turnHalfLeft()
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-13, 13, 10);
     4c4:	4a e0       	ldi	r20, 0x0A	; 10
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	6d e0       	ldi	r22, 0x0D	; 13
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	83 ef       	ldi	r24, 0xF3	; 243
     4ce:	9f ef       	ldi	r25, 0xFF	; 255
     4d0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <copro_resetOdometry>
}
     4e0:	00 00       	nop
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <turnRight>:

void turnRight()
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(27, -27, 15);
     4f0:	4f e0       	ldi	r20, 0x0F	; 15
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	65 ee       	ldi	r22, 0xE5	; 229
     4f6:	7f ef       	ldi	r23, 0xFF	; 255
     4f8:	8b e1       	ldi	r24, 0x1B	; 27
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <copro_resetOdometry>
}
     50c:	00 00       	nop
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <turnHalfRight>:

void turnHalfRight()
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(13, -13, 15);
     51c:	4f e0       	ldi	r20, 0x0F	; 15
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	63 ef       	ldi	r22, 0xF3	; 243
     522:	7f ef       	ldi	r23, 0xFF	; 255
     524:	8d e0       	ldi	r24, 0x0D	; 13
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <copro_resetOdometry>
}
     538:	00 00       	nop
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <goBack>:
void goBack()
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(-13, -13);
     548:	63 ef       	ldi	r22, 0xF3	; 243
     54a:	7f ef       	ldi	r23, 0xFF	; 255
     54c:	83 ef       	ldi	r24, 0xF3	; 243
     54e:	9f ef       	ldi	r25, 0xFF	; 255
     550:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <copro_setSpeed>
	copro_resetOdometry(0, 0);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <copro_resetOdometry>
}
     560:	00 00       	nop
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <main>:
 */

#include "main.h"

// main function
int main() {
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62

		// turn on the interrupts. Needed for the PWM
		sei();
     570:	78 94       	sei

		// initialization of the robot (always necessary)
		bot_init();
     572:	0e 94 48 10 	call	0x2090	; 0x2090 <bot_init>

		// Initialization of the SPI interface
		spi_init();
     576:	0e 94 73 08 	call	0x10e6	; 0x10e6 <spi_init>

		// Initialization of the speaker
		sound_init();
     57a:	0e 94 a5 10 	call	0x214a	; 0x214a <sound_init>

		// Initialization of the LEDs
		leds_init();
     57e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <leds_init>

		// Initialization of the pulse width modulation
		pwm_init();
     582:	0e 94 8e 07 	call	0xf1c	; 0xf1c <pwm_init>

		// Initialization of display and graphics functions
		display_init();
     586:	0e 94 2c 07 	call	0xe58	; 0xe58 <display_init>
		gfx_init();
     58a:	0e 94 0f 0b 	call	0x161e	; 0x161e <gfx_init>

		// Switch on distance measurement
		copro_ir_startMeasure();
     58e:	0e 94 2b 10 	call	0x2056	; 0x2056 <copro_ir_startMeasure>

		// Function for launching a program by a user
		start();
     592:	0e 94 2b 06 	call	0xc56	; 0xc56 <start>

		// endless loop
		while (1 == 1) {
			// empty the display
			gfx_fill(0);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 8c 09 	call	0x1318	; 0x1318 <gfx_fill>

			// update coprocessor values
			copro_update();
     59c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <copro_update>
			// Function for navigation
			findDirection();
     5a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <findDirection>

			// wait 0,5s
			delay(500);
     5a4:	84 ef       	ldi	r24, 0xF4	; 244
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 46 08 	call	0x108c	; 0x108c <delay>
		}
     5ac:	f4 cf       	rjmp	.-24     	; 0x596 <main+0x2e>

000005ae <LEDShow>:
#include "main.h"

/* Function for showing the location
 * of a hindrance relative to Nibo with LEDs
 */
void LEDShow(char color, int start, int end){
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	27 97       	sbiw	r28, 0x07	; 7
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	8b 83       	std	Y+3, r24	; 0x03
     5c4:	7d 83       	std	Y+5, r23	; 0x05
     5c6:	6c 83       	std	Y+4, r22	; 0x04
     5c8:	5f 83       	std	Y+7, r21	; 0x07
     5ca:	4e 83       	std	Y+6, r20	; 0x06
	/* color: r-red, g-green;
	 * start: number of start LED;
	 * end: number of end LED
	 */
	for(int i=start; i<=end; i++){
     5cc:	8c 81       	ldd	r24, Y+4	; 0x04
     5ce:	9d 81       	ldd	r25, Y+5	; 0x05
     5d0:	9a 83       	std	Y+2, r25	; 0x02
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	13 c0       	rjmp	.+38     	; 0x5fc <LEDShow+0x4e>
		// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} //Set LED number i to red
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	82 37       	cpi	r24, 0x72	; 114
     5da:	31 f4       	brne	.+12     	; 0x5e8 <LEDShow+0x3a>
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	68 2f       	mov	r22, r24
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	0e 94 63 10 	call	0x20c6	; 0x20c6 <leds_set_status>
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <LEDShow+0x44>
		else leds_set_status(LEDS_GREEN, i); //Set LED number i to green
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	68 2f       	mov	r22, r24
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 63 10 	call	0x20c6	; 0x20c6 <leds_set_status>
void LEDShow(char color, int start, int end){
	/* color: r-red, g-green;
	 * start: number of start LED;
	 * end: number of end LED
	 */
	for(int i=start; i<=end; i++){
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	9a 81       	ldd	r25, Y+2	; 0x02
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	3a 81       	ldd	r19, Y+2	; 0x02
     600:	8e 81       	ldd	r24, Y+6	; 0x06
     602:	9f 81       	ldd	r25, Y+7	; 0x07
     604:	82 17       	cp	r24, r18
     606:	93 07       	cpc	r25, r19
     608:	34 f7       	brge	.-52     	; 0x5d6 <LEDShow+0x28>
		// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} //Set LED number i to red
		else leds_set_status(LEDS_GREEN, i); //Set LED number i to green
	}
}
     60a:	00 00       	nop
     60c:	27 96       	adiw	r28, 0x07	; 7
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <showNibo>:

// Function for showing Nibo on display
void showNibo()
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
	// Nibo's picture
	gfx_move(53, 12); //Sets the point from which to draw
     626:	6c e0       	ldi	r22, 0x0C	; 12
     628:	85 e3       	ldi	r24, 0x35	; 53
     62a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_box(4, 6);    //Draws the box. First argument is width=4, second is height=6
     62e:	66 e0       	ldi	r22, 0x06	; 6
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <gfx_box>

	gfx_move(75, 12); //Sets the point from which to draw
     636:	6c e0       	ldi	r22, 0x0C	; 12
     638:	8b e4       	ldi	r24, 0x4B	; 75
     63a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_box(4, 6);	  //Draws the box. First argument is width=4, second is height=6
     63e:	66 e0       	ldi	r22, 0x06	; 6
     640:	84 e0       	ldi	r24, 0x04	; 4
     642:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <gfx_box>

	gfx_move(59, 14); //Sets the point from which to draw
     646:	6e e0       	ldi	r22, 0x0E	; 14
     648:	8b e3       	ldi	r24, 0x3B	; 59
     64a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_box(14, 6);	  //Draws the box. First argument is width=14, second is height=6
     64e:	66 e0       	ldi	r22, 0x06	; 6
     650:	8e e0       	ldi	r24, 0x0E	; 14
     652:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <gfx_box>

	gfx_move(59, 22); //Sets the point from which to draw
     656:	66 e1       	ldi	r22, 0x16	; 22
     658:	8b e3       	ldi	r24, 0x3B	; 59
     65a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
}
     65e:	00 00       	nop
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <HindranceShow>:

/* Function for showing the location
 * of a hindrance relative to Nibo on display.
 * Draws one triangle with an exclamation mark inside.
 */
void HindranceShow(int x, int y){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	00 d0       	rcall	.+0      	; 0x66c <HindranceShow+0x6>
     66c:	00 d0       	rcall	.+0      	; 0x66e <HindranceShow+0x8>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	7c 83       	std	Y+4, r23	; 0x04
     678:	6b 83       	std	Y+3, r22	; 0x03
	/* x: r-red, g-green;
	 * y: number of start LED;
	 */
	gfx_move(x, y); //Sets the point from which to draw
     67a:	9b 81       	ldd	r25, Y+3	; 0x03
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	69 2f       	mov	r22, r25
     680:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_lineTo(x+7,y-17); //Draws a line from x, y to x+7,y-17
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	9f ee       	ldi	r25, 0xEF	; 239
     688:	98 0f       	add	r25, r24
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	89 5f       	subi	r24, 0xF9	; 249
     68e:	69 2f       	mov	r22, r25
     690:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <gfx_lineTo>
	gfx_lineTo(x-7,y-17);//Draws a line from  x+7,y-17 to x-7,y-17
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9f ee       	ldi	r25, 0xEF	; 239
     698:	98 0f       	add	r25, r24
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	87 50       	subi	r24, 0x07	; 7
     69e:	69 2f       	mov	r22, r25
     6a0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <gfx_lineTo>
	gfx_lineTo(x, y); //Draws a line from x-7,y-17 to start point x,y
     6a4:	9b 81       	ldd	r25, Y+3	; 0x03
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	69 2f       	mov	r22, r25
     6aa:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <gfx_lineTo>
	gfx_move(x, y-7);//Sets the point from which to draw
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	99 ef       	ldi	r25, 0xF9	; 249
     6b2:	98 0f       	add	r25, r24
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	69 2f       	mov	r22, r25
     6b8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_lineTo(x,y-13);//Draws a line from x,y-7 to start point x,y-13
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	93 ef       	ldi	r25, 0xF3	; 243
     6c0:	98 0f       	add	r25, r24
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	69 2f       	mov	r22, r25
     6c6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <gfx_lineTo>
	gfx_move(x, y-15); //Sets the point from which to draw
     6ca:	8b 81       	ldd	r24, Y+3	; 0x03
     6cc:	91 ef       	ldi	r25, 0xF1	; 241
     6ce:	98 0f       	add	r25, r24
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	69 2f       	mov	r22, r25
     6d4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_hline(1); //Draws a horizontal line from the current position to the right - makes one point
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <gfx_hline>

}
     6de:	00 00       	nop
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <tone>:
 */

#include "main.h"

// Function from the Project "HelloSound" for creating sounds on the Nibo
int tone(int frequency, int duration) {
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	c8 54       	subi	r28, 0x48	; 72
     6fc:	d1 09       	sbc	r29, r1
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	9e 01       	movw	r18, r28
     70a:	2b 5b       	subi	r18, 0xBB	; 187
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
     714:	ce 01       	movw	r24, r28
     716:	89 5b       	subi	r24, 0xB9	; 185
     718:	9f 4f       	sbci	r25, 0xFF	; 255
     71a:	fc 01       	movw	r30, r24
     71c:	71 83       	std	Z+1, r23	; 0x01
     71e:	60 83       	st	Z, r22
	int interval = (50000 / frequency);
     720:	ce 01       	movw	r24, r28
     722:	8b 5b       	subi	r24, 0xBB	; 187
     724:	9f 4f       	sbci	r25, 0xFF	; 255
     726:	fc 01       	movw	r30, r24
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	9c 01       	movw	r18, r24
     72e:	99 0f       	add	r25, r25
     730:	44 0b       	sbc	r20, r20
     732:	55 0b       	sbc	r21, r21
     734:	80 e5       	ldi	r24, 0x50	; 80
     736:	93 ec       	ldi	r25, 0xC3	; 195
     738:	a0 e0       	ldi	r26, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	bc 01       	movw	r22, r24
     73e:	cd 01       	movw	r24, r26
     740:	0e 94 8e 12 	call	0x251c	; 0x251c <__divmodsi4>
     744:	da 01       	movw	r26, r20
     746:	c9 01       	movw	r24, r18
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	8b 83       	std	Y+3, r24	; 0x03
	duration = duration * 100;
     74c:	ce 01       	movw	r24, r28
     74e:	89 5b       	subi	r24, 0xB9	; 185
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	9e 01       	movw	r18, r28
     754:	29 5b       	subi	r18, 0xB9	; 185
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	f9 01       	movw	r30, r18
     75a:	40 81       	ld	r20, Z
     75c:	51 81       	ldd	r21, Z+1	; 0x01
     75e:	64 e6       	ldi	r22, 0x64	; 100
     760:	64 9f       	mul	r22, r20
     762:	90 01       	movw	r18, r0
     764:	65 9f       	mul	r22, r21
     766:	30 0d       	add	r19, r0
     768:	11 24       	eor	r1, r1
     76a:	fc 01       	movw	r30, r24
     76c:	31 83       	std	Z+1, r19	; 0x01
     76e:	20 83       	st	Z, r18

	while (duration) {
     770:	5b c2       	rjmp	.+1206   	; 0xc28 <tone+0x53a>
		int i = interval;
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	9a 83       	std	Y+2, r25	; 0x02
     778:	89 83       	std	Y+1, r24	; 0x01
		clear_output_bit(IO_AUDIO);
     77a:	88 e3       	ldi	r24, 0x38	; 56
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	28 e3       	ldi	r18, 0x38	; 56
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	2f 7e       	andi	r18, 0xEF	; 239
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
		while (duration && i) {
     78c:	02 c1       	rjmp	.+516    	; 0x992 <tone+0x2a4>
			duration--;
     78e:	ce 01       	movw	r24, r28
     790:	89 5b       	subi	r24, 0xB9	; 185
     792:	9f 4f       	sbci	r25, 0xFF	; 255
     794:	9e 01       	movw	r18, r28
     796:	29 5b       	subi	r18, 0xB9	; 185
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	31 81       	ldd	r19, Z+1	; 0x01
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	31 09       	sbc	r19, r1
     7a4:	fc 01       	movw	r30, r24
     7a6:	31 83       	std	Z+1, r19	; 0x01
     7a8:	20 83       	st	Z, r18
			i--;
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	89 83       	std	Y+1, r24	; 0x01
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e2       	ldi	r26, 0x20	; 32
     7ba:	b1 e4       	ldi	r27, 0x41	; 65
     7bc:	89 87       	std	Y+9, r24	; 0x09
     7be:	9a 87       	std	Y+10, r25	; 0x0a
     7c0:	ab 87       	std	Y+11, r26	; 0x0b
     7c2:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     7c4:	2b ea       	ldi	r18, 0xAB	; 171
     7c6:	3a ea       	ldi	r19, 0xAA	; 170
     7c8:	4a ea       	ldi	r20, 0xAA	; 170
     7ca:	50 e4       	ldi	r21, 0x40	; 64
     7cc:	69 85       	ldd	r22, Y+9	; 0x09
     7ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d4:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	8d 87       	std	Y+13, r24	; 0x0d
     7de:	9e 87       	std	Y+14, r25	; 0x0e
     7e0:	af 87       	std	Y+15, r26	; 0x0f
     7e2:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e8       	ldi	r20, 0x80	; 128
     7ea:	50 e4       	ldi	r21, 0x40	; 64
     7ec:	69 85       	ldd	r22, Y+9	; 0x09
     7ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     7f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f4:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	89 8b       	std	Y+17, r24	; 0x11
     7fe:	9a 8b       	std	Y+18, r25	; 0x12
     800:	ab 8b       	std	Y+19, r26	; 0x13
     802:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	6d 85       	ldd	r22, Y+13	; 0x0d
     80e:	7e 85       	ldd	r23, Y+14	; 0x0e
     810:	8f 85       	ldd	r24, Y+15	; 0x0f
     812:	98 89       	ldd	r25, Y+16	; 0x10
     814:	0e 94 01 11 	call	0x2202	; 0x2202 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	1c f4       	brge	.+6      	; 0x822 <tone+0x134>
		__ticks = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	8d 8b       	std	Y+21, r24	; 0x15
     820:	b2 c0       	rjmp	.+356    	; 0x986 <tone+0x298>
	else if (__tmp2 > 65535)
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	3f ef       	ldi	r19, 0xFF	; 255
     826:	4f e7       	ldi	r20, 0x7F	; 127
     828:	57 e4       	ldi	r21, 0x47	; 71
     82a:	69 89       	ldd	r22, Y+17	; 0x11
     82c:	7a 89       	ldd	r23, Y+18	; 0x12
     82e:	8b 89       	ldd	r24, Y+19	; 0x13
     830:	9c 89       	ldd	r25, Y+20	; 0x14
     832:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	0c f0       	brlt	.+2      	; 0x83c <tone+0x14e>
     83a:	7b c0       	rjmp	.+246    	; 0x932 <tone+0x244>
	{
		_delay_ms(__us / 1000.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	4a e7       	ldi	r20, 0x7A	; 122
     842:	54 e4       	ldi	r21, 0x44	; 68
     844:	69 85       	ldd	r22, Y+9	; 0x09
     846:	7a 85       	ldd	r23, Y+10	; 0x0a
     848:	8b 85       	ldd	r24, Y+11	; 0x0b
     84a:	9c 85       	ldd	r25, Y+12	; 0x0c
     84c:	0e 94 06 11 	call	0x220c	; 0x220c <__divsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	8e 8b       	std	Y+22, r24	; 0x16
     856:	9f 8b       	std	Y+23, r25	; 0x17
     858:	a8 8f       	std	Y+24, r26	; 0x18
     85a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	4a e7       	ldi	r20, 0x7A	; 122
     862:	55 e4       	ldi	r21, 0x45	; 69
     864:	6e 89       	ldd	r22, Y+22	; 0x16
     866:	7f 89       	ldd	r23, Y+23	; 0x17
     868:	88 8d       	ldd	r24, Y+24	; 0x18
     86a:	99 8d       	ldd	r25, Y+25	; 0x19
     86c:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	8a 8f       	std	Y+26, r24	; 0x1a
     876:	9b 8f       	std	Y+27, r25	; 0x1b
     878:	ac 8f       	std	Y+28, r26	; 0x1c
     87a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e8       	ldi	r20, 0x80	; 128
     882:	5f e3       	ldi	r21, 0x3F	; 63
     884:	6a 8d       	ldd	r22, Y+26	; 0x1a
     886:	7b 8d       	ldd	r23, Y+27	; 0x1b
     888:	8c 8d       	ldd	r24, Y+28	; 0x1c
     88a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     88c:	0e 94 01 11 	call	0x2202	; 0x2202 <__cmpsf2>
     890:	88 23       	and	r24, r24
     892:	2c f4       	brge	.+10     	; 0x89e <tone+0x1b0>
		__ticks = 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9f 8f       	std	Y+31, r25	; 0x1f
     89a:	8e 8f       	std	Y+30, r24	; 0x1e
     89c:	3f c0       	rjmp	.+126    	; 0x91c <tone+0x22e>
	else if (__tmp > 65535)
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	3f ef       	ldi	r19, 0xFF	; 255
     8a2:	4f e7       	ldi	r20, 0x7F	; 127
     8a4:	57 e4       	ldi	r21, 0x47	; 71
     8a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
     8a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
     8aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8ae:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	4c f5       	brge	.+82     	; 0x908 <tone+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e2       	ldi	r20, 0x20	; 32
     8bc:	51 e4       	ldi	r21, 0x41	; 65
     8be:	6e 89       	ldd	r22, Y+22	; 0x16
     8c0:	7f 89       	ldd	r23, Y+23	; 0x17
     8c2:	88 8d       	ldd	r24, Y+24	; 0x18
     8c4:	99 8d       	ldd	r25, Y+25	; 0x19
     8c6:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	bc 01       	movw	r22, r24
     8d0:	cd 01       	movw	r24, r26
     8d2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     8d6:	dc 01       	movw	r26, r24
     8d8:	cb 01       	movw	r24, r22
     8da:	9f 8f       	std	Y+31, r25	; 0x1f
     8dc:	8e 8f       	std	Y+30, r24	; 0x1e
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <tone+0x210>
     8e0:	80 e9       	ldi	r24, 0x90	; 144
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	99 a3       	std	Y+33, r25	; 0x21
     8e6:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8e8:	88 a1       	ldd	r24, Y+32	; 0x20
     8ea:	99 a1       	ldd	r25, Y+33	; 0x21
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <tone+0x1fe>
     8f0:	99 a3       	std	Y+33, r25	; 0x21
     8f2:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	9f 8f       	std	Y+31, r25	; 0x1f
     8fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     900:	9f 8d       	ldd	r25, Y+31	; 0x1f
     902:	89 2b       	or	r24, r25
     904:	69 f7       	brne	.-38     	; 0x8e0 <tone+0x1f2>
     906:	3f c0       	rjmp	.+126    	; 0x986 <tone+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     908:	6a 8d       	ldd	r22, Y+26	; 0x1a
     90a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     90c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     90e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     910:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	9f 8f       	std	Y+31, r25	; 0x1f
     91a:	8e 8f       	std	Y+30, r24	; 0x1e
     91c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     91e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     920:	9b a3       	std	Y+35, r25	; 0x23
     922:	8a a3       	std	Y+34, r24	; 0x22
     924:	8a a1       	ldd	r24, Y+34	; 0x22
     926:	9b a1       	ldd	r25, Y+35	; 0x23
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <tone+0x23a>
     92c:	9b a3       	std	Y+35, r25	; 0x23
     92e:	8a a3       	std	Y+34, r24	; 0x22
     930:	2a c0       	rjmp	.+84     	; 0x986 <tone+0x298>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	4f e7       	ldi	r20, 0x7F	; 127
     938:	53 e4       	ldi	r21, 0x43	; 67
     93a:	6d 85       	ldd	r22, Y+13	; 0x0d
     93c:	7e 85       	ldd	r23, Y+14	; 0x0e
     93e:	8f 85       	ldd	r24, Y+15	; 0x0f
     940:	98 89       	ldd	r25, Y+16	; 0x10
     942:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     946:	18 16       	cp	r1, r24
     948:	ac f4       	brge	.+42     	; 0x974 <tone+0x286>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     94a:	69 89       	ldd	r22, Y+17	; 0x11
     94c:	7a 89       	ldd	r23, Y+18	; 0x12
     94e:	8b 89       	ldd	r24, Y+19	; 0x13
     950:	9c 89       	ldd	r25, Y+20	; 0x14
     952:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	9d a3       	std	Y+37, r25	; 0x25
     95c:	8c a3       	std	Y+36, r24	; 0x24
     95e:	8c a1       	ldd	r24, Y+36	; 0x24
     960:	9d a1       	ldd	r25, Y+37	; 0x25
     962:	9f a3       	std	Y+39, r25	; 0x27
     964:	8e a3       	std	Y+38, r24	; 0x26
     966:	8e a1       	ldd	r24, Y+38	; 0x26
     968:	9f a1       	ldd	r25, Y+39	; 0x27
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <tone+0x27c>
     96e:	9f a3       	std	Y+39, r25	; 0x27
     970:	8e a3       	std	Y+38, r24	; 0x26
     972:	0f c0       	rjmp	.+30     	; 0x992 <tone+0x2a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     974:	6d 85       	ldd	r22, Y+13	; 0x0d
     976:	7e 85       	ldd	r23, Y+14	; 0x0e
     978:	8f 85       	ldd	r24, Y+15	; 0x0f
     97a:	98 89       	ldd	r25, Y+16	; 0x10
     97c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	8d 8b       	std	Y+21, r24	; 0x15
     986:	8d 89       	ldd	r24, Y+21	; 0x15
     988:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     98a:	88 a5       	ldd	r24, Y+40	; 0x28
     98c:	8a 95       	dec	r24
     98e:	f1 f7       	brne	.-4      	; 0x98c <tone+0x29e>
     990:	88 a7       	std	Y+40, r24	; 0x28
	duration = duration * 100;

	while (duration) {
		int i = interval;
		clear_output_bit(IO_AUDIO);
		while (duration && i) {
     992:	ce 01       	movw	r24, r28
     994:	89 5b       	subi	r24, 0xB9	; 185
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	89 2b       	or	r24, r25
     9a0:	29 f0       	breq	.+10     	; 0x9ac <tone+0x2be>
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f0       	breq	.+2      	; 0x9ac <tone+0x2be>
     9aa:	f1 ce       	rjmp	.-542    	; 0x78e <tone+0xa0>
			duration--;
			i--;
			delay_us(10);
		}
		i = interval;
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	9a 83       	std	Y+2, r25	; 0x02
     9b2:	89 83       	std	Y+1, r24	; 0x01
		set_output_bit(IO_AUDIO);
     9b4:	88 e3       	ldi	r24, 0x38	; 56
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	28 e3       	ldi	r18, 0x38	; 56
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	f9 01       	movw	r30, r18
     9be:	20 81       	ld	r18, Z
     9c0:	20 61       	ori	r18, 0x10	; 16
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
		while (duration && i) {
     9c6:	23 c1       	rjmp	.+582    	; 0xc0e <tone+0x520>
			duration--;
     9c8:	ce 01       	movw	r24, r28
     9ca:	89 5b       	subi	r24, 0xB9	; 185
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	9e 01       	movw	r18, r28
     9d0:	29 5b       	subi	r18, 0xB9	; 185
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	31 81       	ldd	r19, Z+1	; 0x01
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	31 09       	sbc	r19, r1
     9de:	fc 01       	movw	r30, r24
     9e0:	31 83       	std	Z+1, r19	; 0x01
     9e2:	20 83       	st	Z, r18
			i--;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9a 83       	std	Y+2, r25	; 0x02
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a0 e2       	ldi	r26, 0x20	; 32
     9f4:	b1 e4       	ldi	r27, 0x41	; 65
     9f6:	8d 83       	std	Y+5, r24	; 0x05
     9f8:	9e 83       	std	Y+6, r25	; 0x06
     9fa:	af 83       	std	Y+7, r26	; 0x07
     9fc:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     9fe:	2b ea       	ldi	r18, 0xAB	; 171
     a00:	3a ea       	ldi	r19, 0xAA	; 170
     a02:	4a ea       	ldi	r20, 0xAA	; 170
     a04:	50 e4       	ldi	r21, 0x40	; 64
     a06:	6d 81       	ldd	r22, Y+5	; 0x05
     a08:	7e 81       	ldd	r23, Y+6	; 0x06
     a0a:	8f 81       	ldd	r24, Y+7	; 0x07
     a0c:	98 85       	ldd	r25, Y+8	; 0x08
     a0e:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
     a16:	89 a7       	std	Y+41, r24	; 0x29
     a18:	9a a7       	std	Y+42, r25	; 0x2a
     a1a:	ab a7       	std	Y+43, r26	; 0x2b
     a1c:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e8       	ldi	r20, 0x80	; 128
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	6d 81       	ldd	r22, Y+5	; 0x05
     a28:	7e 81       	ldd	r23, Y+6	; 0x06
     a2a:	8f 81       	ldd	r24, Y+7	; 0x07
     a2c:	98 85       	ldd	r25, Y+8	; 0x08
     a2e:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	8d a7       	std	Y+45, r24	; 0x2d
     a38:	9e a7       	std	Y+46, r25	; 0x2e
     a3a:	af a7       	std	Y+47, r26	; 0x2f
     a3c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e8       	ldi	r20, 0x80	; 128
     a44:	5f e3       	ldi	r21, 0x3F	; 63
     a46:	69 a5       	ldd	r22, Y+41	; 0x29
     a48:	7a a5       	ldd	r23, Y+42	; 0x2a
     a4a:	8b a5       	ldd	r24, Y+43	; 0x2b
     a4c:	9c a5       	ldd	r25, Y+44	; 0x2c
     a4e:	0e 94 01 11 	call	0x2202	; 0x2202 <__cmpsf2>
     a52:	88 23       	and	r24, r24
     a54:	1c f4       	brge	.+6      	; 0xa5c <tone+0x36e>
		__ticks = 1;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	89 ab       	std	Y+49, r24	; 0x31
     a5a:	c6 c0       	rjmp	.+396    	; 0xbe8 <tone+0x4fa>
	else if (__tmp2 > 65535)
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	3f ef       	ldi	r19, 0xFF	; 255
     a60:	4f e7       	ldi	r20, 0x7F	; 127
     a62:	57 e4       	ldi	r21, 0x47	; 71
     a64:	6d a5       	ldd	r22, Y+45	; 0x2d
     a66:	7e a5       	ldd	r23, Y+46	; 0x2e
     a68:	8f a5       	ldd	r24, Y+47	; 0x2f
     a6a:	98 a9       	ldd	r25, Y+48	; 0x30
     a6c:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	0c f0       	brlt	.+2      	; 0xa76 <tone+0x388>
     a74:	7b c0       	rjmp	.+246    	; 0xb6c <tone+0x47e>
	{
		_delay_ms(__us / 1000.0);
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	4a e7       	ldi	r20, 0x7A	; 122
     a7c:	54 e4       	ldi	r21, 0x44	; 68
     a7e:	6d 81       	ldd	r22, Y+5	; 0x05
     a80:	7e 81       	ldd	r23, Y+6	; 0x06
     a82:	8f 81       	ldd	r24, Y+7	; 0x07
     a84:	98 85       	ldd	r25, Y+8	; 0x08
     a86:	0e 94 06 11 	call	0x220c	; 0x220c <__divsf3>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	8a ab       	std	Y+50, r24	; 0x32
     a90:	9b ab       	std	Y+51, r25	; 0x33
     a92:	ac ab       	std	Y+52, r26	; 0x34
     a94:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	4a e7       	ldi	r20, 0x7A	; 122
     a9c:	55 e4       	ldi	r21, 0x45	; 69
     a9e:	6a a9       	ldd	r22, Y+50	; 0x32
     aa0:	7b a9       	ldd	r23, Y+51	; 0x33
     aa2:	8c a9       	ldd	r24, Y+52	; 0x34
     aa4:	9d a9       	ldd	r25, Y+53	; 0x35
     aa6:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	8e ab       	std	Y+54, r24	; 0x36
     ab0:	9f ab       	std	Y+55, r25	; 0x37
     ab2:	a8 af       	std	Y+56, r26	; 0x38
     ab4:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e8       	ldi	r20, 0x80	; 128
     abc:	5f e3       	ldi	r21, 0x3F	; 63
     abe:	6e a9       	ldd	r22, Y+54	; 0x36
     ac0:	7f a9       	ldd	r23, Y+55	; 0x37
     ac2:	88 ad       	ldd	r24, Y+56	; 0x38
     ac4:	99 ad       	ldd	r25, Y+57	; 0x39
     ac6:	0e 94 01 11 	call	0x2202	; 0x2202 <__cmpsf2>
     aca:	88 23       	and	r24, r24
     acc:	2c f4       	brge	.+10     	; 0xad8 <tone+0x3ea>
		__ticks = 1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	9b af       	std	Y+59, r25	; 0x3b
     ad4:	8a af       	std	Y+58, r24	; 0x3a
     ad6:	3f c0       	rjmp	.+126    	; 0xb56 <tone+0x468>
	else if (__tmp > 65535)
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	3f ef       	ldi	r19, 0xFF	; 255
     adc:	4f e7       	ldi	r20, 0x7F	; 127
     ade:	57 e4       	ldi	r21, 0x47	; 71
     ae0:	6e a9       	ldd	r22, Y+54	; 0x36
     ae2:	7f a9       	ldd	r23, Y+55	; 0x37
     ae4:	88 ad       	ldd	r24, Y+56	; 0x38
     ae6:	99 ad       	ldd	r25, Y+57	; 0x39
     ae8:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     aec:	18 16       	cp	r1, r24
     aee:	4c f5       	brge	.+82     	; 0xb42 <tone+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e2       	ldi	r20, 0x20	; 32
     af6:	51 e4       	ldi	r21, 0x41	; 65
     af8:	6a a9       	ldd	r22, Y+50	; 0x32
     afa:	7b a9       	ldd	r23, Y+51	; 0x33
     afc:	8c a9       	ldd	r24, Y+52	; 0x34
     afe:	9d a9       	ldd	r25, Y+53	; 0x35
     b00:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	bc 01       	movw	r22, r24
     b0a:	cd 01       	movw	r24, r26
     b0c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	9b af       	std	Y+59, r25	; 0x3b
     b16:	8a af       	std	Y+58, r24	; 0x3a
     b18:	0f c0       	rjmp	.+30     	; 0xb38 <tone+0x44a>
     b1a:	80 e9       	ldi	r24, 0x90	; 144
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	9d af       	std	Y+61, r25	; 0x3d
     b20:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b22:	8c ad       	ldd	r24, Y+60	; 0x3c
     b24:	9d ad       	ldd	r25, Y+61	; 0x3d
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <tone+0x438>
     b2a:	9d af       	std	Y+61, r25	; 0x3d
     b2c:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b2e:	8a ad       	ldd	r24, Y+58	; 0x3a
     b30:	9b ad       	ldd	r25, Y+59	; 0x3b
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	9b af       	std	Y+59, r25	; 0x3b
     b36:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b38:	8a ad       	ldd	r24, Y+58	; 0x3a
     b3a:	9b ad       	ldd	r25, Y+59	; 0x3b
     b3c:	89 2b       	or	r24, r25
     b3e:	69 f7       	brne	.-38     	; 0xb1a <tone+0x42c>
     b40:	53 c0       	rjmp	.+166    	; 0xbe8 <tone+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b42:	6e a9       	ldd	r22, Y+54	; 0x36
     b44:	7f a9       	ldd	r23, Y+55	; 0x37
     b46:	88 ad       	ldd	r24, Y+56	; 0x38
     b48:	99 ad       	ldd	r25, Y+57	; 0x39
     b4a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	9b af       	std	Y+59, r25	; 0x3b
     b54:	8a af       	std	Y+58, r24	; 0x3a
     b56:	8a ad       	ldd	r24, Y+58	; 0x3a
     b58:	9b ad       	ldd	r25, Y+59	; 0x3b
     b5a:	9f af       	std	Y+63, r25	; 0x3f
     b5c:	8e af       	std	Y+62, r24	; 0x3e
     b5e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b60:	9f ad       	ldd	r25, Y+63	; 0x3f
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <tone+0x474>
     b66:	9f af       	std	Y+63, r25	; 0x3f
     b68:	8e af       	std	Y+62, r24	; 0x3e
     b6a:	3e c0       	rjmp	.+124    	; 0xbe8 <tone+0x4fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	4f e7       	ldi	r20, 0x7F	; 127
     b72:	53 e4       	ldi	r21, 0x43	; 67
     b74:	69 a5       	ldd	r22, Y+41	; 0x29
     b76:	7a a5       	ldd	r23, Y+42	; 0x2a
     b78:	8b a5       	ldd	r24, Y+43	; 0x2b
     b7a:	9c a5       	ldd	r25, Y+44	; 0x2c
     b7c:	0e 94 1c 12 	call	0x2438	; 0x2438 <__gesf2>
     b80:	18 16       	cp	r1, r24
     b82:	4c f5       	brge	.+82     	; 0xbd6 <tone+0x4e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b84:	8e 01       	movw	r16, r28
     b86:	00 5c       	subi	r16, 0xC0	; 192
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	6d a5       	ldd	r22, Y+45	; 0x2d
     b8c:	7e a5       	ldd	r23, Y+46	; 0x2e
     b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     b90:	98 a9       	ldd	r25, Y+48	; 0x30
     b92:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	ce 01       	movw	r24, r28
     ba2:	8e 5b       	subi	r24, 0xBE	; 190
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	9e 01       	movw	r18, r28
     ba8:	20 5c       	subi	r18, 0xC0	; 192
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	f9 01       	movw	r30, r18
     bae:	20 81       	ld	r18, Z
     bb0:	31 81       	ldd	r19, Z+1	; 0x01
     bb2:	fc 01       	movw	r30, r24
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	20 83       	st	Z, r18
     bb8:	ce 01       	movw	r24, r28
     bba:	8e 5b       	subi	r24, 0xBE	; 190
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <tone+0x4d6>
     bc8:	9e 01       	movw	r18, r28
     bca:	2e 5b       	subi	r18, 0xBE	; 190
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	f9 01       	movw	r30, r18
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
     bd4:	1c c0       	rjmp	.+56     	; 0xc0e <tone+0x520>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bd6:	69 a5       	ldd	r22, Y+41	; 0x29
     bd8:	7a a5       	ldd	r23, Y+42	; 0x2a
     bda:	8b a5       	ldd	r24, Y+43	; 0x2b
     bdc:	9c a5       	ldd	r25, Y+44	; 0x2c
     bde:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__fixunssfsi>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	89 ab       	std	Y+49, r24	; 0x31
     be8:	ce 01       	movw	r24, r28
     bea:	8c 5b       	subi	r24, 0xBC	; 188
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	29 a9       	ldd	r18, Y+49	; 0x31
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bf4:	ce 01       	movw	r24, r28
     bf6:	8c 5b       	subi	r24, 0xBC	; 188
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	28 2f       	mov	r18, r24
     c00:	2a 95       	dec	r18
     c02:	f1 f7       	brne	.-4      	; 0xc00 <tone+0x512>
     c04:	ce 01       	movw	r24, r28
     c06:	8c 5b       	subi	r24, 0xBC	; 188
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 83       	st	Z, r18
			i--;
			delay_us(10);
		}
		i = interval;
		set_output_bit(IO_AUDIO);
		while (duration && i) {
     c0e:	ce 01       	movw	r24, r28
     c10:	89 5b       	subi	r24, 0xB9	; 185
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	89 2b       	or	r24, r25
     c1c:	29 f0       	breq	.+10     	; 0xc28 <tone+0x53a>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	9a 81       	ldd	r25, Y+2	; 0x02
     c22:	89 2b       	or	r24, r25
     c24:	09 f0       	breq	.+2      	; 0xc28 <tone+0x53a>
     c26:	d0 ce       	rjmp	.-608    	; 0x9c8 <tone+0x2da>
// Function from the Project "HelloSound" for creating sounds on the Nibo
int tone(int frequency, int duration) {
	int interval = (50000 / frequency);
	duration = duration * 100;

	while (duration) {
     c28:	ce 01       	movw	r24, r28
     c2a:	89 5b       	subi	r24, 0xB9	; 185
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	89 2b       	or	r24, r25
     c36:	09 f0       	breq	.+2      	; 0xc3a <tone+0x54c>
     c38:	9c cd       	rjmp	.-1224   	; 0x772 <tone+0x84>
			i--;
			delay_us(10);
		}
	}

	return 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
}
     c3e:	c8 5b       	subi	r28, 0xB8	; 184
     c40:	df 4f       	sbci	r29, 0xFF	; 255
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <start>:

/*
 * Function for visual and sound representation of a countdown.
 * After 4 signals (3 red and 1 green), the main program starts
*/
void start(){
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <start+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <start+0x8>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62

	// Initialization of LEDs numbers
	int led1=2; //start left LED
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
	int led2=7; //start right LED
     c6a:	87 e0       	ldi	r24, 0x07	; 7
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03

	leds_set_headlights(250); // Turn on the two headlights.
     c72:	8a ef       	ldi	r24, 0xFA	; 250
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 91 10 	call	0x2122	; 0x2122 <leds_set_headlights>

	// Show user info
	gfx_move(4, 0);//Sets the point from which to write
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	84 e0       	ldi	r24, 0x04	; 4
     c7e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("To start the program,"); // write the text to the display
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>
	gfx_move(4, 13);
     c8a:	6d e0       	ldi	r22, 0x0D	; 13
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("Press the S3 button");
     c92:	8a e1       	ldi	r24, 0x1A	; 26
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>
	gfx_move(50, 23);
     c9a:	67 e1       	ldi	r22, 0x17	; 23
     c9c:	82 e3       	ldi	r24, 0x32	; 50
     c9e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("----->");
     ca2:	8e e2       	ldi	r24, 0x2E	; 46
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>
	gfx_move(4, 35);
     caa:	63 e2       	ldi	r22, 0x23	; 35
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("To stop the program");
     cb2:	85 e3       	ldi	r24, 0x35	; 53
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>
	gfx_move(4, 48);
     cba:	60 e3       	ldi	r22, 0x30	; 48
     cbc:	84 e0       	ldi	r24, 0x04	; 4
     cbe:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("Press the S2 button");
     cc2:	89 e4       	ldi	r24, 0x49	; 73
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>
	gfx_move(50, 55);
     cca:	67 e3       	ldi	r22, 0x37	; 55
     ccc:	82 e3       	ldi	r24, 0x32	; 50
     cce:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
	gfx_print_text("<-----");
     cd2:	8d e5       	ldi	r24, 0x5D	; 93
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <gfx_print_text>

	deactivate_output_bit(IO_INPUT_1);
     cda:	81 e3       	ldi	r24, 0x31	; 49
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	21 e3       	ldi	r18, 0x31	; 49
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	f9 01       	movw	r30, r18
     ce4:	20 81       	ld	r18, Z
     ce6:	2f 7e       	andi	r18, 0xEF	; 239
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
	while(get_input_bit(IO_INPUT_1)){ //S3 start-button not pressed
     cec:	00 00       	nop
     cee:	80 e3       	ldi	r24, 0x30	; 48
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	fc 01       	movw	r30, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	80 71       	andi	r24, 0x10	; 16
     cfc:	99 27       	eor	r25, r25
     cfe:	89 2b       	or	r24, r25
     d00:	b1 f7       	brne	.-20     	; 0xcee <start+0x98>
				sei(); // End of Atomic state: interrupts are now possible again
			}
			delay(500); // wait 0,5s
		}
	}*/
	leds_set_headlights(0); // switch off headlight
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 91 10 	call	0x2122	; 0x2122 <leds_set_headlights>
}
     d0a:	00 00       	nop
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <display_write>:
     d1a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d1e:	38 2f       	mov	r19, r24
     d20:	31 70       	andi	r19, 0x01	; 1
     d22:	29 2f       	mov	r18, r25
     d24:	2e 7f       	andi	r18, 0xFE	; 254
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	93 27       	eor	r25, r19
     d2a:	92 2b       	or	r25, r18
     d2c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d30:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d34:	9d 7f       	andi	r25, 0xFD	; 253
     d36:	31 11       	cpse	r19, r1
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <display_write+0x24>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <display_write+0x26>
     d3e:	22 e0       	ldi	r18, 0x02	; 2
     d40:	92 2b       	or	r25, r18
     d42:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d46:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d4a:	97 7f       	andi	r25, 0xF7	; 247
     d4c:	81 fd       	sbrc	r24, 1
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <display_write+0x3a>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <display_write+0x3c>
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	89 2b       	or	r24, r25
     d58:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d5c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d60:	8f 7e       	andi	r24, 0xEF	; 239
     d62:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	8a bb       	out	0x1a, r24	; 26
     d6a:	6b bb       	out	0x1b, r22	; 27
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	8a 95       	dec	r24
     d70:	f1 f7       	brne	.-4      	; 0xd6e <display_write+0x54>
     d72:	00 00       	nop
     d74:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d78:	84 60       	ori	r24, 0x04	; 4
     d7a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	8a 95       	dec	r24
     d82:	f1 f7       	brne	.-4      	; 0xd80 <display_write+0x66>
     d84:	00 00       	nop
     d86:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d8a:	8b 7f       	andi	r24, 0xFB	; 251
     d8c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     d90:	85 e0       	ldi	r24, 0x05	; 5
     d92:	8a 95       	dec	r24
     d94:	f1 f7       	brne	.-4      	; 0xd92 <display_write+0x78>
     d96:	00 00       	nop
     d98:	1b ba       	out	0x1b, r1	; 27
     d9a:	1a ba       	out	0x1a, r1	; 26
     d9c:	08 95       	ret

00000d9e <display_read>:
     d9e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     da2:	38 2f       	mov	r19, r24
     da4:	31 70       	andi	r19, 0x01	; 1
     da6:	29 2f       	mov	r18, r25
     da8:	2e 7f       	andi	r18, 0xFE	; 254
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	93 27       	eor	r25, r19
     dae:	92 2b       	or	r25, r18
     db0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     db4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     db8:	9d 7f       	andi	r25, 0xFD	; 253
     dba:	31 11       	cpse	r19, r1
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <display_read+0x24>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <display_read+0x26>
     dc2:	22 e0       	ldi	r18, 0x02	; 2
     dc4:	92 2b       	or	r25, r18
     dc6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dca:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dce:	97 7f       	andi	r25, 0xF7	; 247
     dd0:	81 fd       	sbrc	r24, 1
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <display_read+0x3a>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <display_read+0x3c>
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	89 2b       	or	r24, r25
     ddc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     de0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     de4:	80 61       	ori	r24, 0x10	; 16
     de6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dea:	1a ba       	out	0x1a, r1	; 26
     dec:	85 e0       	ldi	r24, 0x05	; 5
     dee:	8a 95       	dec	r24
     df0:	f1 f7       	brne	.-4      	; 0xdee <display_read+0x50>
     df2:	00 00       	nop
     df4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     df8:	84 60       	ori	r24, 0x04	; 4
     dfa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dfe:	95 e1       	ldi	r25, 0x15	; 21
     e00:	9a 95       	dec	r25
     e02:	f1 f7       	brne	.-4      	; 0xe00 <display_read+0x62>
     e04:	00 00       	nop
     e06:	89 b3       	in	r24, 0x19	; 25
     e08:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e0c:	9b 7f       	andi	r25, 0xFB	; 251
     e0e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e12:	95 e0       	ldi	r25, 0x05	; 5
     e14:	9a 95       	dec	r25
     e16:	f1 f7       	brne	.-4      	; 0xe14 <display_read+0x76>
     e18:	00 00       	nop
     e1a:	08 95       	ret

00000e1c <display_wait>:
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <display_type>
     e26:	91 11       	cpse	r25, r1
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <display_wait+0x12>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	11 c0       	rjmp	.+34     	; 0xe50 <display_wait+0x34>
     e2e:	c8 2f       	mov	r28, r24
     e30:	c1 70       	andi	r28, 0x01	; 1
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	8c 2f       	mov	r24, r28
     e38:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
     e3c:	0f 5f       	subi	r16, 0xFF	; 255
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	87 ff       	sbrs	r24, 7
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <display_wait+0x32>
     e44:	0f 3f       	cpi	r16, 0xFF	; 255
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	18 07       	cpc	r17, r24
     e4a:	a9 f7       	brne	.-22     	; 0xe36 <display_wait+0x1a>
     e4c:	ee cf       	rjmp	.-36     	; 0xe2a <display_wait+0xe>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	08 95       	ret

00000e58 <display_init>:
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     e5e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e62:	88 60       	ori	r24, 0x08	; 8
     e64:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e68:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e72:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e7c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e86:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     e90:	b8 9a       	sbi	0x17, 0	; 23
     e92:	1a ba       	out	0x1a, r1	; 26
     e94:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e9e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ea8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eac:	8b 7f       	andi	r24, 0xFB	; 251
     eae:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eb2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ebc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ec0:	8d 7f       	andi	r24, 0xFD	; 253
     ec2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ec6:	c0 98       	cbi	0x18, 0	; 24
     ec8:	97 9b       	sbis	0x12, 7	; 18
     eca:	09 c0       	rjmp	.+18     	; 0xede <display_init+0x86>
     ecc:	97 98       	cbi	0x12, 7	; 18
     ece:	8f e9       	ldi	r24, 0x9F	; 159
     ed0:	9f e0       	ldi	r25, 0x0F	; 15
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <display_init+0x7a>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <display_init+0x80>
     ed8:	00 00       	nop
     eda:	97 9a       	sbi	0x12, 7	; 18
     edc:	06 c0       	rjmp	.+12     	; 0xeea <display_init+0x92>
     ede:	8f e9       	ldi	r24, 0x9F	; 159
     ee0:	9f e0       	ldi	r25, 0x0F	; 15
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <display_init+0x8a>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <display_init+0x90>
     ee8:	00 00       	nop
     eea:	c0 9a       	sbi	0x18, 0	; 24
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
     ef2:	88 23       	and	r24, r24
     ef4:	51 f0       	breq	.+20     	; 0xf0a <display_init+0xb2>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
     efc:	88 23       	and	r24, r24
     efe:	11 f0       	breq	.+4      	; 0xf04 <display_init+0xac>
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <display_init+0xae>
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     f0a:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
     f0e:	8f 3f       	cpi	r24, 0xFF	; 255
     f10:	11 f4       	brne	.+4      	; 0xf16 <display_init+0xbe>
     f12:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <display_type>
     f16:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
     f1a:	08 95       	ret

00000f1c <pwm_init>:
     f1c:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <pwm_timer_sub+0x1>
     f20:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <pwm_timer_sub>
     f24:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <pwm_timer_ms+0x1>
     f28:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <pwm_timer_ms>
     f2c:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <pwm_timer_sec>
     f30:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <pwm_timer_sec+0x1>
     f34:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <pwm_timer_sec+0x2>
     f38:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <pwm_timer_sec+0x3>
     f3c:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <pwm_channel_A+0x1>
     f40:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <pwm_channel_A>
     f44:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <pwm_channel_B+0x1>
     f48:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <pwm_channel_B>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
     f54:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
     f58:	c5 98       	cbi	0x18, 5	; 24
     f5a:	c6 98       	cbi	0x18, 6	; 24
     f5c:	bd 9a       	sbi	0x17, 5	; 23
     f5e:	be 9a       	sbi	0x17, 6	; 23
     f60:	bf 9a       	sbi	0x17, 7	; 23
     f62:	c7 9a       	sbi	0x18, 7	; 24
     f64:	1d bc       	out	0x2d, r1	; 45
     f66:	1c bc       	out	0x2c, r1	; 44
     f68:	8a ea       	ldi	r24, 0xAA	; 170
     f6a:	8f bd       	out	0x2f, r24	; 47
     f6c:	82 e1       	ldi	r24, 0x12	; 18
     f6e:	8e bd       	out	0x2e, r24	; 46
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	94 e0       	ldi	r25, 0x04	; 4
     f74:	97 bd       	out	0x27, r25	; 39
     f76:	86 bd       	out	0x26, r24	; 38
     f78:	87 b7       	in	r24, 0x37	; 55
     f7a:	84 60       	ori	r24, 0x04	; 4
     f7c:	87 bf       	out	0x37, r24	; 55
     f7e:	08 95       	ret

00000f80 <__vector_14>:
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	2f 93       	push	r18
     f8c:	3f 93       	push	r19
     f8e:	4f 93       	push	r20
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pwm_timer_sub>
     f9c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pwm_timer_sub+0x1>
     fa0:	9c 01       	movw	r18, r24
     fa2:	28 5e       	subi	r18, 0xE8	; 232
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	28 3e       	cpi	r18, 0xE8	; 232
     fa8:	43 e0       	ldi	r20, 0x03	; 3
     faa:	34 07       	cpc	r19, r20
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <__vector_14+0x38>
     fae:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <pwm_timer_sub+0x1>
     fb2:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <pwm_timer_sub>
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <__vector_14+0x56>
     fb8:	80 5d       	subi	r24, 0xD0	; 208
     fba:	93 40       	sbci	r25, 0x03	; 3
     fbc:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <pwm_timer_sub+0x1>
     fc0:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <pwm_timer_sub>
     fc4:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
     fc8:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
     fd2:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
     fd6:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
     fda:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
     fde:	9c 01       	movw	r18, r24
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	28 3e       	cpi	r18, 0xE8	; 232
     fe6:	43 e0       	ldi	r20, 0x03	; 3
     fe8:	34 07       	cpc	r19, r20
     fea:	28 f4       	brcc	.+10     	; 0xff6 <__vector_14+0x76>
     fec:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <pwm_timer_ms+0x1>
     ff0:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <pwm_timer_ms>
     ff4:	19 c0       	rjmp	.+50     	; 0x1028 <__vector_14+0xa8>
     ff6:	87 5e       	subi	r24, 0xE7	; 231
     ff8:	93 40       	sbci	r25, 0x03	; 3
     ffa:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
     ffe:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    1002:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <pwm_timer_sec>
    1006:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <pwm_timer_sec+0x1>
    100a:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <pwm_timer_sec+0x2>
    100e:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <pwm_timer_sec+0x3>
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	a1 1d       	adc	r26, r1
    1016:	b1 1d       	adc	r27, r1
    1018:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <pwm_timer_sec>
    101c:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <pwm_timer_sec+0x1>
    1020:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <pwm_timer_sec+0x2>
    1024:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <pwm_timer_sec+0x3>
    1028:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    102c:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	23 e0       	ldi	r18, 0x03	; 3
    1034:	92 07       	cpc	r25, r18
    1036:	10 f0       	brcs	.+4      	; 0x103c <__vector_14+0xbc>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	94 e0       	ldi	r25, 0x04	; 4
    103c:	9b bd       	out	0x2b, r25	; 43
    103e:	8a bd       	out	0x2a, r24	; 42
    1040:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    1044:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	43 e0       	ldi	r20, 0x03	; 3
    104c:	94 07       	cpc	r25, r20
    104e:	10 f0       	brcs	.+4      	; 0x1054 <__vector_14+0xd4>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	99 bd       	out	0x29, r25	; 41
    1056:	88 bd       	out	0x28, r24	; 40
    1058:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    105c:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    1060:	8f 3f       	cpi	r24, 0xFF	; 255
    1062:	23 e0       	ldi	r18, 0x03	; 3
    1064:	92 07       	cpc	r25, r18
    1066:	10 f0       	brcs	.+4      	; 0x106c <__vector_14+0xec>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	94 e0       	ldi	r25, 0x04	; 4
    106c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1070:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <delay>:
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	41 f0       	breq	.+16     	; 0x10a0 <delay+0x14>
    1090:	ef e9       	ldi	r30, 0x9F	; 159
    1092:	ff e0       	ldi	r31, 0x0F	; 15
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <delay+0x8>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <delay+0xe>
    109a:	00 00       	nop
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f6 cf       	rjmp	.-20     	; 0x108c <delay>
    10a0:	08 95       	ret

000010a2 <spi_tx>:
    10a2:	8f b9       	out	0x0f, r24	; 15
    10a4:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <spi_tx_chk>
    10a8:	89 27       	eor	r24, r25
    10aa:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <spi_tx_chk>
    10ae:	08 95       	ret

000010b0 <spi_restart_transmission>:
    10b0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <spi_pos>
    10b4:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <spi_tx_size>
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	98 0f       	add	r25, r24
    10bc:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <spi_size>
    10c0:	96 e9       	ldi	r25, 0x96	; 150
    10c2:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <spi_tx_chk>
    10c6:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    10ca:	f8 94       	cli
    10cc:	b0 99       	sbic	0x16, 0	; 22
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <spi_restart_transmission+0x26>
    10d0:	78 94       	sei
    10d2:	00 00       	nop
    10d4:	fa cf       	rjmp	.-12     	; 0x10ca <spi_restart_transmission+0x1a>
    10d6:	90 ec       	ldi	r25, 0xC0	; 192
    10d8:	9d b9       	out	0x0d, r25	; 13
    10da:	0e 94 51 08 	call	0x10a2	; 0x10a2 <spi_tx>
    10de:	77 9a       	sbi	0x0e, 7	; 14
    10e0:	78 94       	sei
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	08 95       	ret

000010e6 <spi_init>:
    10e6:	b8 98       	cbi	0x17, 0	; 23
    10e8:	c0 98       	cbi	0x18, 0	; 24
    10ea:	bb 9a       	sbi	0x17, 3	; 23
    10ec:	c3 9a       	sbi	0x18, 3	; 24
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <spi_restart_transmission>

000010f4 <__vector_17>:
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	0b b6       	in	r0, 0x3b	; 59
    1100:	0f 92       	push	r0
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	8f b1       	in	r24, 0x0f	; 15
    111c:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <spi_rx_chk>
    1120:	98 27       	eor	r25, r24
    1122:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    1126:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <spi_pos>
    112a:	e1 11       	cpse	r30, r1
    112c:	16 c0       	rjmp	.+44     	; 0x115a <__stack+0x5b>
    112e:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <spi_rx_size>
    1132:	8c 31       	cpi	r24, 0x1C	; 28
    1134:	30 f0       	brcs	.+12     	; 0x1142 <__stack+0x43>
    1136:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <spi_tx_size>
    113a:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <__stack+0x55>
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <spi_size>
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	42 17       	cp	r20, r18
    114e:	53 07       	cpc	r21, r19
    1150:	fc f0       	brlt	.+62     	; 0x1190 <__stack+0x91>
    1152:	8f 5f       	subi	r24, 0xFF	; 255
    1154:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <spi_size>
    1158:	1b c0       	rjmp	.+54     	; 0x1190 <__stack+0x91>
    115a:	2e 2f       	mov	r18, r30
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <spi_rx_size>
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	42 17       	cp	r20, r18
    1166:	53 07       	cpc	r21, r19
    1168:	2c f0       	brlt	.+10     	; 0x1174 <__stack+0x75>
    116a:	d9 01       	movw	r26, r18
    116c:	ab 51       	subi	r26, 0x1B	; 27
    116e:	bc 4f       	sbci	r27, 0xFC	; 252
    1170:	8c 93       	st	X, r24
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <__stack+0x91>
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	42 17       	cp	r20, r18
    117a:	53 07       	cpc	r21, r19
    117c:	49 f4       	brne	.+18     	; 0x1190 <__stack+0x91>
    117e:	99 23       	and	r25, r25
    1180:	39 f0       	breq	.+14     	; 0x1190 <__stack+0x91>
    1182:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <spi_err_cnt>
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <spi_err_cnt>
    118c:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    1190:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <spi_tx_size>
    1194:	e8 17       	cp	r30, r24
    1196:	28 f4       	brcc	.+10     	; 0x11a2 <__stack+0xa3>
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	ea 53       	subi	r30, 0x3A	; 58
    119c:	fc 4f       	sbci	r31, 0xFC	; 252
    119e:	80 81       	ld	r24, Z
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <__stack+0xb7>
    11a2:	e8 13       	cpse	r30, r24
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <__stack+0xad>
    11a6:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <spi_tx_chk>
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <__stack+0xb7>
    11ac:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <spi_size>
    11b0:	e8 17       	cp	r30, r24
    11b2:	48 f4       	brcc	.+18     	; 0x11c6 <__stack+0xc7>
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <spi_tx>
    11ba:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <spi_pos>
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <spi_pos>
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <__stack+0xe9>
    11c6:	b8 98       	cbi	0x17, 0	; 23
    11c8:	c0 98       	cbi	0x18, 0	; 24
    11ca:	1d b8       	out	0x0d, r1	; 13
    11cc:	b8 98       	cbi	0x17, 0	; 23
    11ce:	c0 98       	cbi	0x18, 0	; 24
    11d0:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <spi_frame_cnt>
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <spi_frame_cnt>
    11da:	78 94       	sei
    11dc:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <spi_rx_size>
    11e0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <spi_finished_callback>
    11e4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <spi_restart_transmission>
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0b be       	out	0x3b, r0	; 59
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	0f 90       	pop	r0
    120a:	1f 90       	pop	r1
    120c:	18 95       	reti

0000120e <gfx_store_disp_tile>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	c8 2f       	mov	r28, r24
    1214:	d8 eb       	ldi	r29, 0xB8	; 184
    1216:	d6 0f       	add	r29, r22
    1218:	88 30       	cpi	r24, 0x08	; 8
    121a:	00 f5       	brcc	.+64     	; 0x125c <gfx_store_disp_tile+0x4e>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1222:	6d 2f       	mov	r22, r29
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1230:	6c 2f       	mov	r22, r28
    1232:	66 0f       	add	r22, r22
    1234:	66 0f       	add	r22, r22
    1236:	66 0f       	add	r22, r22
    1238:	60 5c       	subi	r22, 0xC0	; 192
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1240:	c8 e0       	ldi	r28, 0x08	; 8
    1242:	d4 e0       	ldi	r29, 0x04	; 4
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    124a:	69 91       	ld	r22, Y+
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	c0 31       	cpi	r28, 0x10	; 16
    1256:	d8 07       	cpc	r29, r24
    1258:	a9 f7       	brne	.-22     	; 0x1244 <gfx_store_disp_tile+0x36>
    125a:	20 c0       	rjmp	.+64     	; 0x129c <gfx_store_disp_tile+0x8e>
    125c:	c8 50       	subi	r28, 0x08	; 8
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1264:	6d 2f       	mov	r22, r29
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1272:	cc 0f       	add	r28, r28
    1274:	cc 0f       	add	r28, r28
    1276:	cc 0f       	add	r28, r28
    1278:	60 e4       	ldi	r22, 0x40	; 64
    127a:	6c 0f       	add	r22, r28
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1282:	c8 e0       	ldi	r28, 0x08	; 8
    1284:	d4 e0       	ldi	r29, 0x04	; 4
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    128c:	69 91       	ld	r22, Y+
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1294:	84 e0       	ldi	r24, 0x04	; 4
    1296:	c0 31       	cpi	r28, 0x10	; 16
    1298:	d8 07       	cpc	r29, r24
    129a:	a9 f7       	brne	.-22     	; 0x1286 <gfx_store_disp_tile+0x78>
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <gfx_get_x>:
    12a2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    12a6:	08 95       	ret

000012a8 <gfx_get_y>:
    12a8:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    12ac:	08 95       	ret

000012ae <gfx_draw_mode>:
    12ae:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    12b2:	08 95       	ret

000012b4 <gfx_move>:
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	d8 2f       	mov	r29, r24
    12ba:	c6 2f       	mov	r28, r22
    12bc:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    12c0:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <gfx_y>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    12d0:	c6 95       	lsr	r28
    12d2:	c6 95       	lsr	r28
    12d4:	c6 95       	lsr	r28
    12d6:	c8 54       	subi	r28, 0x48	; 72
    12d8:	6c 2f       	mov	r22, r28
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    12e0:	6c 2f       	mov	r22, r28
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    12f4:	60 e4       	ldi	r22, 0x40	; 64
    12f6:	d1 34       	cpi	r29, 0x41	; 65
    12f8:	28 f0       	brcs	.+10     	; 0x1304 <gfx_move+0x50>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1300:	6d 2f       	mov	r22, r29
    1302:	05 c0       	rjmp	.+10     	; 0x130e <gfx_move+0x5a>
    1304:	6d 0f       	add	r22, r29
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    130c:	60 e4       	ldi	r22, 0x40	; 64
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <display_write>

00001318 <gfx_fill>:
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	18 2f       	mov	r17, r24
    1320:	c8 eb       	ldi	r28, 0xB8	; 184
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    132e:	6c 2f       	mov	r22, r28
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1336:	6c 2f       	mov	r22, r28
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    133e:	d0 e4       	ldi	r29, 0x40	; 64
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    134c:	61 2f       	mov	r22, r17
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1354:	61 2f       	mov	r22, r17
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    135c:	d1 50       	subi	r29, 0x01	; 1
    135e:	81 f7       	brne	.-32     	; 0x1340 <gfx_fill+0x28>
    1360:	cf 5f       	subi	r28, 0xFF	; 255
    1362:	c0 3c       	cpi	r28, 0xC0	; 192
    1364:	f1 f6       	brne	.-68     	; 0x1322 <gfx_fill+0xa>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1372:	68 eb       	ldi	r22, 0xB8	; 184
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    137a:	68 eb       	ldi	r22, 0xB8	; 184
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <display_write>

00001388 <gfx_display_write2>:
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	d8 2f       	mov	r29, r24
    1392:	c6 2f       	mov	r28, r22
    1394:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1398:	87 fd       	sbrc	r24, 7
    139a:	37 c0       	rjmp	.+110    	; 0x140a <gfx_display_write2+0x82>
    139c:	11 e0       	ldi	r17, 0x01	; 1
    139e:	80 34       	cpi	r24, 0x40	; 64
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <gfx_display_write2+0x1c>
    13a2:	10 e0       	ldi	r17, 0x00	; 0
    13a4:	81 2f       	mov	r24, r17
    13a6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    13aa:	02 e0       	ldi	r16, 0x02	; 2
    13ac:	01 0f       	add	r16, r17
    13ae:	80 2f       	mov	r24, r16
    13b0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    13b4:	80 2f       	mov	r24, r16
    13b6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    13ba:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <gfx_dm>
    13be:	92 ff       	sbrs	r25, 2
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <gfx_display_write2+0x3e>
    13c2:	d0 95       	com	r29
    13c4:	9b 7f       	andi	r25, 0xFB	; 251
    13c6:	dc 23       	and	r29, r28
    13c8:	91 11       	cpse	r25, r1
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <gfx_display_write2+0x48>
    13cc:	c8 2f       	mov	r28, r24
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <gfx_display_write2+0x50>
    13d0:	91 30       	cpi	r25, 0x01	; 1
    13d2:	21 f4       	brne	.+8      	; 0x13dc <gfx_display_write2+0x54>
    13d4:	c0 95       	com	r28
    13d6:	c8 23       	and	r28, r24
    13d8:	cd 2b       	or	r28, r29
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <gfx_display_write2+0x58>
    13dc:	c8 2f       	mov	r28, r24
    13de:	cd 27       	eor	r28, r29
    13e0:	81 2f       	mov	r24, r17
    13e2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    13e6:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <gfx_x>
    13ea:	60 64       	ori	r22, 0x40	; 64
    13ec:	81 2f       	mov	r24, r17
    13ee:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    13f2:	81 2f       	mov	r24, r17
    13f4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    13f8:	6c 2f       	mov	r22, r28
    13fa:	80 2f       	mov	r24, r16
    13fc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1400:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	08 95       	ret

00001414 <gfx_char_width>:
    1414:	90 ee       	ldi	r25, 0xE0	; 224
    1416:	98 0f       	add	r25, r24
    1418:	90 36       	cpi	r25, 0x60	; 96
    141a:	08 f0       	brcs	.+2      	; 0x141e <gfx_char_width+0xa>
    141c:	80 e8       	ldi	r24, 0x80	; 128
    141e:	80 52       	subi	r24, 0x20	; 32
    1420:	96 e0       	ldi	r25, 0x06	; 6
    1422:	89 9f       	mul	r24, r25
    1424:	f0 01       	movw	r30, r0
    1426:	11 24       	eor	r1, r1
    1428:	ec 59       	subi	r30, 0x9C	; 156
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	90 81       	ld	r25, Z
    142e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    1432:	81 11       	cpse	r24, r1
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <gfx_char_width+0x24>
    1436:	9f e1       	ldi	r25, 0x1F	; 31
    1438:	25 e0       	ldi	r18, 0x05	; 5
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 fd       	sbrc	r25, 0
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	96 95       	lsr	r25
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	d9 f7       	brne	.-10     	; 0x143c <gfx_char_width+0x28>
    1446:	08 95       	ret

00001448 <gfx_print_char_base>:
    1448:	7f 92       	push	r7
    144a:	8f 92       	push	r8
    144c:	9f 92       	push	r9
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	c6 2f       	mov	r28, r22
    1464:	90 ee       	ldi	r25, 0xE0	; 224
    1466:	98 0f       	add	r25, r24
    1468:	90 36       	cpi	r25, 0x60	; 96
    146a:	08 f0       	brcs	.+2      	; 0x146e <gfx_print_char_base+0x26>
    146c:	80 e8       	ldi	r24, 0x80	; 128
    146e:	80 52       	subi	r24, 0x20	; 32
    1470:	26 e0       	ldi	r18, 0x06	; 6
    1472:	82 9f       	mul	r24, r18
    1474:	c0 01       	movw	r24, r0
    1476:	11 24       	eor	r1, r1
    1478:	fc 01       	movw	r30, r24
    147a:	eb 59       	subi	r30, 0x9B	; 155
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	7f 01       	movw	r14, r30
    1480:	fc 01       	movw	r30, r24
    1482:	ec 59       	subi	r30, 0x9C	; 156
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	90 80       	ld	r9, Z
    1488:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    148c:	81 11       	cpse	r24, r1
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <gfx_print_char_base+0x4c>
    1490:	9f e1       	ldi	r25, 0x1F	; 31
    1492:	99 2e       	mov	r9, r25
    1494:	ac 2e       	mov	r10, r28
    1496:	0c 2e       	mov	r0, r28
    1498:	00 0c       	add	r0, r0
    149a:	bb 08       	sbc	r11, r11
    149c:	6f ef       	ldi	r22, 0xFF	; 255
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	6b 01       	movw	r12, r22
    14a2:	0c 2e       	mov	r0, r28
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <gfx_print_char_base+0x60>
    14a6:	cc 0c       	add	r12, r12
    14a8:	0a 94       	dec	r0
    14aa:	ea f7       	brpl	.-6      	; 0x14a6 <gfx_print_char_base+0x5e>
    14ac:	8c 2c       	mov	r8, r12
    14ae:	00 27       	eor	r16, r16
    14b0:	11 27       	eor	r17, r17
    14b2:	0a 19       	sub	r16, r10
    14b4:	1b 09       	sbc	r17, r11
    14b6:	00 2e       	mov	r0, r16
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <gfx_print_char_base+0x76>
    14ba:	75 95       	asr	r23
    14bc:	67 95       	ror	r22
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <gfx_print_char_base+0x72>
    14c2:	d6 2f       	mov	r29, r22
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	78 2e       	mov	r7, r24
    14c8:	90 fe       	sbrs	r9, 0
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <gfx_print_char_base+0xae>
    14cc:	f7 01       	movw	r30, r14
    14ce:	80 81       	ld	r24, Z
    14d0:	c7 fd       	sbrc	r28, 7
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <gfx_print_char_base+0x9a>
    14d4:	68 2d       	mov	r22, r8
    14d6:	0a 2c       	mov	r0, r10
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <gfx_print_char_base+0x94>
    14da:	88 0f       	add	r24, r24
    14dc:	0a 94       	dec	r0
    14de:	ea f7       	brpl	.-6      	; 0x14da <gfx_print_char_base+0x92>
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <gfx_print_char_base+0xaa>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	00 2e       	mov	r0, r16
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <gfx_print_char_base+0xa4>
    14e8:	95 95       	asr	r25
    14ea:	87 95       	ror	r24
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <gfx_print_char_base+0xa0>
    14f0:	6d 2f       	mov	r22, r29
    14f2:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_display_write2>
    14f6:	96 94       	lsr	r9
    14f8:	ff ef       	ldi	r31, 0xFF	; 255
    14fa:	ef 1a       	sub	r14, r31
    14fc:	ff 0a       	sbc	r15, r31
    14fe:	7a 94       	dec	r7
    1500:	71 10       	cpse	r7, r1
    1502:	e2 cf       	rjmp	.-60     	; 0x14c8 <gfx_print_char_base+0x80>
    1504:	c7 fd       	sbrc	r28, 7
    1506:	02 c0       	rjmp	.+4      	; 0x150c <gfx_print_char_base+0xc4>
    1508:	6c 2d       	mov	r22, r12
    150a:	07 c0       	rjmp	.+14     	; 0x151a <gfx_print_char_base+0xd2>
    150c:	6f ef       	ldi	r22, 0xFF	; 255
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <gfx_print_char_base+0xce>
    1512:	75 95       	asr	r23
    1514:	67 95       	ror	r22
    1516:	0a 95       	dec	r16
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <gfx_print_char_base+0xca>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <gfx_display_write2>

0000153a <gfx_print_char>:
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	d8 2f       	mov	r29, r24
    1542:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <gfx_x>
    1546:	c0 91 10 04 	lds	r28, 0x0410	; 0x800410 <gfx_y>
    154a:	c7 70       	andi	r28, 0x07	; 7
    154c:	6c 2f       	mov	r22, r28
    154e:	0e 94 24 0a 	call	0x1448	; 0x1448 <gfx_print_char_base>
    1552:	cc 23       	and	r28, r28
    1554:	a9 f0       	breq	.+42     	; 0x1580 <gfx_print_char+0x46>
    1556:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    155a:	68 5f       	subi	r22, 0xF8	; 248
    155c:	81 2f       	mov	r24, r17
    155e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1562:	68 ef       	ldi	r22, 0xF8	; 248
    1564:	6c 0f       	add	r22, r28
    1566:	8d 2f       	mov	r24, r29
    1568:	0e 94 24 0a 	call	0x1448	; 0x1448 <gfx_print_char_base>
    156c:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    1570:	68 50       	subi	r22, 0x08	; 8
    1572:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <gfx_move>
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <gfx_print_text>:
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    158e:	89 91       	ld	r24, Y+
    1590:	88 23       	and	r24, r24
    1592:	19 f0       	breq	.+6      	; 0x159a <gfx_print_text+0x12>
    1594:	0e 94 9d 0a 	call	0x153a	; 0x153a <gfx_print_char>
    1598:	fa cf       	rjmp	.-12     	; 0x158e <gfx_print_text+0x6>
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <gfx_text_width>:
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	8c 01       	movw	r16, r24
    15a8:	c0 e0       	ldi	r28, 0x00	; 0
    15aa:	f8 01       	movw	r30, r16
    15ac:	81 91       	ld	r24, Z+
    15ae:	8f 01       	movw	r16, r30
    15b0:	88 23       	and	r24, r24
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <gfx_text_width+0x20>
    15b4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_char_width>
    15b8:	8c 0f       	add	r24, r28
    15ba:	c1 e0       	ldi	r28, 0x01	; 1
    15bc:	c8 0f       	add	r28, r24
    15be:	f5 cf       	rjmp	.-22     	; 0x15aa <gfx_text_width+0xa>
    15c0:	8c 2f       	mov	r24, r28
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <gfx_print_text_P>:
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
    15d0:	ce 01       	movw	r24, r28
    15d2:	fe 01       	movw	r30, r28
    15d4:	24 91       	lpm	r18, Z
    15d6:	22 23       	and	r18, r18
    15d8:	31 f0       	breq	.+12     	; 0x15e6 <gfx_print_text_P+0x1c>
    15da:	21 96       	adiw	r28, 0x01	; 1
    15dc:	fc 01       	movw	r30, r24
    15de:	84 91       	lpm	r24, Z
    15e0:	0e 94 9d 0a 	call	0x153a	; 0x153a <gfx_print_char>
    15e4:	f5 cf       	rjmp	.-22     	; 0x15d0 <gfx_print_text_P+0x6>
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <gfx_text_width_P>:
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	8c 01       	movw	r16, r24
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	c8 01       	movw	r24, r16
    15f8:	f8 01       	movw	r30, r16
    15fa:	24 91       	lpm	r18, Z
    15fc:	22 23       	and	r18, r18
    15fe:	51 f0       	breq	.+20     	; 0x1614 <gfx_text_width_P+0x28>
    1600:	0f 5f       	subi	r16, 0xFF	; 255
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	fc 01       	movw	r30, r24
    1606:	84 91       	lpm	r24, Z
    1608:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_char_width>
    160c:	8c 0f       	add	r24, r28
    160e:	c1 e0       	ldi	r28, 0x01	; 1
    1610:	c8 0f       	add	r28, r24
    1612:	f1 cf       	rjmp	.-30     	; 0x15f6 <gfx_text_width_P+0xa>
    1614:	8c 2f       	mov	r24, r28
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <gfx_init>:
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1624:	6f e3       	ldi	r22, 0x3F	; 63
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1632:	60 ec       	ldi	r22, 0xC0	; 192
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1640:	60 e4       	ldi	r22, 0x40	; 64
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    164e:	68 eb       	ldi	r22, 0xB8	; 184
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    165c:	6f e3       	ldi	r22, 0x3F	; 63
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    166a:	60 ec       	ldi	r22, 0xC0	; 192
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1678:	60 e4       	ldi	r22, 0x40	; 64
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1686:	68 eb       	ldi	r22, 0xB8	; 184
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	0e 94 8c 09 	call	0x1318	; 0x1318 <gfx_fill>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    169a:	08 95       	ret

0000169c <gfx_set_proportional>:
    169c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <gfx_proportional>
    16a0:	08 95       	ret

000016a2 <gfx_get_proportional>:
    16a2:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    16a6:	08 95       	ret

000016a8 <gfx_hline>:
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    16b0:	97 70       	andi	r25, 0x07	; 7
    16b2:	c1 e0       	ldi	r28, 0x01	; 1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <gfx_hline+0x10>
    16b6:	cc 0f       	add	r28, r28
    16b8:	9a 95       	dec	r25
    16ba:	ea f7       	brpl	.-6      	; 0x16b6 <gfx_hline+0xe>
    16bc:	d8 2f       	mov	r29, r24
    16be:	dd 23       	and	r29, r29
    16c0:	31 f0       	breq	.+12     	; 0x16ce <gfx_hline+0x26>
    16c2:	6c 2f       	mov	r22, r28
    16c4:	8c 2f       	mov	r24, r28
    16c6:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_display_write2>
    16ca:	d1 50       	subi	r29, 0x01	; 1
    16cc:	f8 cf       	rjmp	.-16     	; 0x16be <gfx_hline+0x16>
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <gfx_box>:
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	b8 2e       	mov	r11, r24
    16ea:	c6 2f       	mov	r28, r22
    16ec:	e0 90 07 04 	lds	r14, 0x0407	; 0x800407 <gfx_x>
    16f0:	10 91 10 04 	lds	r17, 0x0410	; 0x800410 <gfx_y>
    16f4:	81 2f       	mov	r24, r17
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	df ef       	ldi	r29, 0xFF	; 255
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <gfx_box+0x2a>
    16fc:	dd 0f       	add	r29, r29
    16fe:	8a 95       	dec	r24
    1700:	ea f7       	brpl	.-6      	; 0x16fc <gfx_box+0x28>
    1702:	88 e0       	ldi	r24, 0x08	; 8
    1704:	a8 2e       	mov	r10, r24
    1706:	cc 24       	eor	r12, r12
    1708:	ca 94       	dec	r12
    170a:	d1 2c       	mov	r13, r1
    170c:	cc 23       	and	r28, r28
    170e:	21 f1       	breq	.+72     	; 0x1758 <gfx_box+0x84>
    1710:	81 2f       	mov	r24, r17
    1712:	87 70       	andi	r24, 0x07	; 7
    1714:	0a 2d       	mov	r16, r10
    1716:	08 1b       	sub	r16, r24
    1718:	c0 17       	cp	r28, r16
    171a:	48 f4       	brcc	.+18     	; 0x172e <gfx_box+0x5a>
    171c:	80 2f       	mov	r24, r16
    171e:	8c 1b       	sub	r24, r28
    1720:	96 01       	movw	r18, r12
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <gfx_box+0x54>
    1724:	35 95       	asr	r19
    1726:	27 95       	ror	r18
    1728:	8a 95       	dec	r24
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <gfx_box+0x50>
    172c:	d2 23       	and	r29, r18
    172e:	fb 2c       	mov	r15, r11
    1730:	ff 20       	and	r15, r15
    1732:	31 f0       	breq	.+12     	; 0x1740 <gfx_box+0x6c>
    1734:	6d 2f       	mov	r22, r29
    1736:	8d 2f       	mov	r24, r29
    1738:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_display_write2>
    173c:	fa 94       	dec	r15
    173e:	f8 cf       	rjmp	.-16     	; 0x1730 <gfx_box+0x5c>
    1740:	8c 2f       	mov	r24, r28
    1742:	0c 17       	cp	r16, r28
    1744:	08 f4       	brcc	.+2      	; 0x1748 <gfx_box+0x74>
    1746:	80 2f       	mov	r24, r16
    1748:	c8 1b       	sub	r28, r24
    174a:	18 0f       	add	r17, r24
    174c:	61 2f       	mov	r22, r17
    174e:	8e 2d       	mov	r24, r14
    1750:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1754:	df ef       	ldi	r29, 0xFF	; 255
    1756:	da cf       	rjmp	.-76     	; 0x170c <gfx_box+0x38>
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	08 95       	ret

0000176e <gfx_vline>:
    176e:	68 2f       	mov	r22, r24
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <gfx_box>

00001776 <gfx_draw_xbm>:
    1776:	2f 92       	push	r2
    1778:	3f 92       	push	r3
    177a:	4f 92       	push	r4
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	48 2e       	mov	r4, r24
    179c:	d6 2f       	mov	r29, r22
    179e:	5a 01       	movw	r10, r20
    17a0:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    17a4:	80 90 10 04 	lds	r8, 0x0410	; 0x800410 <gfx_y>
    17a8:	88 2d       	mov	r24, r8
    17aa:	87 70       	andi	r24, 0x07	; 7
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	99 2e       	mov	r9, r25
    17b0:	01 c0       	rjmp	.+2      	; 0x17b4 <gfx_draw_xbm+0x3e>
    17b2:	99 0c       	add	r9, r9
    17b4:	8a 95       	dec	r24
    17b6:	ea f7       	brpl	.-6      	; 0x17b2 <gfx_draw_xbm+0x3c>
    17b8:	24 2d       	mov	r18, r4
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	c9 01       	movw	r24, r18
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	97 fd       	sbrc	r25, 7
    17c2:	07 96       	adiw	r24, 0x07	; 7
    17c4:	23 e0       	ldi	r18, 0x03	; 3
    17c6:	95 95       	asr	r25
    17c8:	87 95       	ror	r24
    17ca:	2a 95       	dec	r18
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <gfx_draw_xbm+0x50>
    17ce:	c1 e0       	ldi	r28, 0x01	; 1
    17d0:	c8 0f       	add	r28, r24
    17d2:	ec 2e       	mov	r14, r28
    17d4:	f1 2c       	mov	r15, r1
    17d6:	67 01       	movw	r12, r14
    17d8:	33 e0       	ldi	r19, 0x03	; 3
    17da:	cc 0c       	add	r12, r12
    17dc:	dd 1c       	adc	r13, r13
    17de:	3a 95       	dec	r19
    17e0:	e1 f7       	brne	.-8      	; 0x17da <gfx_draw_xbm+0x64>
    17e2:	51 2c       	mov	r5, r1
    17e4:	48 e0       	ldi	r20, 0x08	; 8
    17e6:	24 2e       	mov	r2, r20
    17e8:	dd 23       	and	r29, r29
    17ea:	09 f4       	brne	.+2      	; 0x17ee <gfx_draw_xbm+0x78>
    17ec:	56 c0       	rjmp	.+172    	; 0x189a <gfx_draw_xbm+0x124>
    17ee:	88 2d       	mov	r24, r8
    17f0:	87 70       	andi	r24, 0x07	; 7
    17f2:	72 2c       	mov	r7, r2
    17f4:	78 1a       	sub	r7, r24
    17f6:	d7 15       	cp	r29, r7
    17f8:	50 f4       	brcc	.+20     	; 0x180e <gfx_draw_xbm+0x98>
    17fa:	87 2d       	mov	r24, r7
    17fc:	8d 1b       	sub	r24, r29
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <gfx_draw_xbm+0x92>
    1804:	35 95       	asr	r19
    1806:	27 95       	ror	r18
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <gfx_draw_xbm+0x8e>
    180c:	92 22       	and	r9, r18
    180e:	05 2d       	mov	r16, r5
    1810:	07 0d       	add	r16, r7
    1812:	c0 9f       	mul	r28, r16
    1814:	80 01       	movw	r16, r0
    1816:	11 24       	eor	r1, r1
    1818:	61 2c       	mov	r6, r1
    181a:	64 14       	cp	r6, r4
    181c:	81 f1       	breq	.+96     	; 0x187e <gfx_draw_xbm+0x108>
    181e:	86 2d       	mov	r24, r6
    1820:	87 70       	andi	r24, 0x07	; 7
    1822:	59 f0       	breq	.+22     	; 0x183a <gfx_draw_xbm+0xc4>
    1824:	e8 2f       	mov	r30, r24
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	e8 5f       	subi	r30, 0xF8	; 248
    182a:	fb 4f       	sbci	r31, 0xFB	; 251
    182c:	80 81       	ld	r24, Z
    182e:	69 2d       	mov	r22, r9
    1830:	89 21       	and	r24, r9
    1832:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_display_write2>
    1836:	63 94       	inc	r6
    1838:	f0 cf       	rjmp	.-32     	; 0x181a <gfx_draw_xbm+0xa4>
    183a:	96 2d       	mov	r25, r6
    183c:	96 95       	lsr	r25
    183e:	96 95       	lsr	r25
    1840:	96 95       	lsr	r25
    1842:	f8 01       	movw	r30, r16
    1844:	e9 0f       	add	r30, r25
    1846:	f1 1d       	adc	r31, r1
    1848:	ec 19       	sub	r30, r12
    184a:	fd 09       	sbc	r31, r13
    184c:	ea 0d       	add	r30, r10
    184e:	fb 1d       	adc	r31, r11
    1850:	28 e0       	ldi	r18, 0x08	; 8
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 81       	ld	r20, Z
    1856:	a8 e0       	ldi	r26, 0x08	; 8
    1858:	b4 e0       	ldi	r27, 0x04	; 4
    185a:	9c 91       	ld	r25, X
    185c:	96 95       	lsr	r25
    185e:	40 fd       	sbrc	r20, 0
    1860:	90 68       	ori	r25, 0x80	; 128
    1862:	9c 93       	st	X, r25
    1864:	46 95       	lsr	r20
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	60 e1       	ldi	r22, 0x10	; 16
    186a:	74 e0       	ldi	r23, 0x04	; 4
    186c:	6a 17       	cp	r22, r26
    186e:	7b 07       	cpc	r23, r27
    1870:	a1 f7       	brne	.-24     	; 0x185a <gfx_draw_xbm+0xe4>
    1872:	ee 0d       	add	r30, r14
    1874:	ff 1d       	adc	r31, r15
    1876:	21 50       	subi	r18, 0x01	; 1
    1878:	31 09       	sbc	r19, r1
    187a:	61 f7       	brne	.-40     	; 0x1854 <gfx_draw_xbm+0xde>
    187c:	d3 cf       	rjmp	.-90     	; 0x1824 <gfx_draw_xbm+0xae>
    187e:	8d 2f       	mov	r24, r29
    1880:	7d 16       	cp	r7, r29
    1882:	08 f4       	brcc	.+2      	; 0x1886 <gfx_draw_xbm+0x110>
    1884:	87 2d       	mov	r24, r7
    1886:	d8 1b       	sub	r29, r24
    1888:	88 0e       	add	r8, r24
    188a:	58 0e       	add	r5, r24
    188c:	68 2d       	mov	r22, r8
    188e:	83 2d       	mov	r24, r3
    1890:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1894:	99 24       	eor	r9, r9
    1896:	9a 94       	dec	r9
    1898:	a7 cf       	rjmp	.-178    	; 0x17e8 <gfx_draw_xbm+0x72>
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	9f 90       	pop	r9
    18b0:	8f 90       	pop	r8
    18b2:	7f 90       	pop	r7
    18b4:	6f 90       	pop	r6
    18b6:	5f 90       	pop	r5
    18b8:	4f 90       	pop	r4
    18ba:	3f 90       	pop	r3
    18bc:	2f 90       	pop	r2
    18be:	08 95       	ret

000018c0 <gfx_draw_xbm_P>:
    18c0:	2f 92       	push	r2
    18c2:	3f 92       	push	r3
    18c4:	4f 92       	push	r4
    18c6:	5f 92       	push	r5
    18c8:	6f 92       	push	r6
    18ca:	7f 92       	push	r7
    18cc:	8f 92       	push	r8
    18ce:	9f 92       	push	r9
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	48 2e       	mov	r4, r24
    18e6:	d6 2f       	mov	r29, r22
    18e8:	4a 01       	movw	r8, r20
    18ea:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    18ee:	00 91 10 04 	lds	r16, 0x0410	; 0x800410 <gfx_y>
    18f2:	80 2f       	mov	r24, r16
    18f4:	87 70       	andi	r24, 0x07	; 7
    18f6:	1f ef       	ldi	r17, 0xFF	; 255
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <gfx_draw_xbm_P+0x3c>
    18fa:	11 0f       	add	r17, r17
    18fc:	8a 95       	dec	r24
    18fe:	ea f7       	brpl	.-6      	; 0x18fa <gfx_draw_xbm_P+0x3a>
    1900:	24 2d       	mov	r18, r4
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	c9 01       	movw	r24, r18
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	97 fd       	sbrc	r25, 7
    190a:	07 96       	adiw	r24, 0x07	; 7
    190c:	23 e0       	ldi	r18, 0x03	; 3
    190e:	95 95       	asr	r25
    1910:	87 95       	ror	r24
    1912:	2a 95       	dec	r18
    1914:	e1 f7       	brne	.-8      	; 0x190e <gfx_draw_xbm_P+0x4e>
    1916:	c1 e0       	ldi	r28, 0x01	; 1
    1918:	c8 0f       	add	r28, r24
    191a:	cc 2e       	mov	r12, r28
    191c:	d1 2c       	mov	r13, r1
    191e:	56 01       	movw	r10, r12
    1920:	33 e0       	ldi	r19, 0x03	; 3
    1922:	aa 0c       	add	r10, r10
    1924:	bb 1c       	adc	r11, r11
    1926:	3a 95       	dec	r19
    1928:	e1 f7       	brne	.-8      	; 0x1922 <gfx_draw_xbm_P+0x62>
    192a:	51 2c       	mov	r5, r1
    192c:	48 e0       	ldi	r20, 0x08	; 8
    192e:	24 2e       	mov	r2, r20
    1930:	dd 23       	and	r29, r29
    1932:	09 f4       	brne	.+2      	; 0x1936 <gfx_draw_xbm_P+0x76>
    1934:	55 c0       	rjmp	.+170    	; 0x19e0 <gfx_draw_xbm_P+0x120>
    1936:	80 2f       	mov	r24, r16
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	72 2c       	mov	r7, r2
    193c:	78 1a       	sub	r7, r24
    193e:	d7 15       	cp	r29, r7
    1940:	50 f4       	brcc	.+20     	; 0x1956 <gfx_draw_xbm_P+0x96>
    1942:	87 2d       	mov	r24, r7
    1944:	8d 1b       	sub	r24, r29
    1946:	2f ef       	ldi	r18, 0xFF	; 255
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <gfx_draw_xbm_P+0x90>
    194c:	35 95       	asr	r19
    194e:	27 95       	ror	r18
    1950:	8a 95       	dec	r24
    1952:	e2 f7       	brpl	.-8      	; 0x194c <gfx_draw_xbm_P+0x8c>
    1954:	12 23       	and	r17, r18
    1956:	e5 2c       	mov	r14, r5
    1958:	e7 0c       	add	r14, r7
    195a:	ce 9d       	mul	r28, r14
    195c:	70 01       	movw	r14, r0
    195e:	11 24       	eor	r1, r1
    1960:	61 2c       	mov	r6, r1
    1962:	64 14       	cp	r6, r4
    1964:	81 f1       	breq	.+96     	; 0x19c6 <gfx_draw_xbm_P+0x106>
    1966:	86 2d       	mov	r24, r6
    1968:	87 70       	andi	r24, 0x07	; 7
    196a:	59 f0       	breq	.+22     	; 0x1982 <gfx_draw_xbm_P+0xc2>
    196c:	e8 2f       	mov	r30, r24
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	e8 5f       	subi	r30, 0xF8	; 248
    1972:	fb 4f       	sbci	r31, 0xFB	; 251
    1974:	80 81       	ld	r24, Z
    1976:	61 2f       	mov	r22, r17
    1978:	81 23       	and	r24, r17
    197a:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_display_write2>
    197e:	63 94       	inc	r6
    1980:	f0 cf       	rjmp	.-32     	; 0x1962 <gfx_draw_xbm_P+0xa2>
    1982:	96 2d       	mov	r25, r6
    1984:	96 95       	lsr	r25
    1986:	96 95       	lsr	r25
    1988:	96 95       	lsr	r25
    198a:	f7 01       	movw	r30, r14
    198c:	e9 0f       	add	r30, r25
    198e:	f1 1d       	adc	r31, r1
    1990:	ea 19       	sub	r30, r10
    1992:	fb 09       	sbc	r31, r11
    1994:	e8 0d       	add	r30, r8
    1996:	f9 1d       	adc	r31, r9
    1998:	28 e0       	ldi	r18, 0x08	; 8
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	44 91       	lpm	r20, Z
    199e:	a8 e0       	ldi	r26, 0x08	; 8
    19a0:	b4 e0       	ldi	r27, 0x04	; 4
    19a2:	9c 91       	ld	r25, X
    19a4:	96 95       	lsr	r25
    19a6:	40 fd       	sbrc	r20, 0
    19a8:	90 68       	ori	r25, 0x80	; 128
    19aa:	9c 93       	st	X, r25
    19ac:	46 95       	lsr	r20
    19ae:	11 96       	adiw	r26, 0x01	; 1
    19b0:	60 e1       	ldi	r22, 0x10	; 16
    19b2:	74 e0       	ldi	r23, 0x04	; 4
    19b4:	6a 17       	cp	r22, r26
    19b6:	7b 07       	cpc	r23, r27
    19b8:	a1 f7       	brne	.-24     	; 0x19a2 <gfx_draw_xbm_P+0xe2>
    19ba:	ec 0d       	add	r30, r12
    19bc:	fd 1d       	adc	r31, r13
    19be:	21 50       	subi	r18, 0x01	; 1
    19c0:	31 09       	sbc	r19, r1
    19c2:	61 f7       	brne	.-40     	; 0x199c <gfx_draw_xbm_P+0xdc>
    19c4:	d3 cf       	rjmp	.-90     	; 0x196c <gfx_draw_xbm_P+0xac>
    19c6:	8d 2f       	mov	r24, r29
    19c8:	7d 16       	cp	r7, r29
    19ca:	08 f4       	brcc	.+2      	; 0x19ce <gfx_draw_xbm_P+0x10e>
    19cc:	87 2d       	mov	r24, r7
    19ce:	d8 1b       	sub	r29, r24
    19d0:	08 0f       	add	r16, r24
    19d2:	58 0e       	add	r5, r24
    19d4:	60 2f       	mov	r22, r16
    19d6:	83 2d       	mov	r24, r3
    19d8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    19dc:	1f ef       	ldi	r17, 0xFF	; 255
    19de:	a8 cf       	rjmp	.-176    	; 0x1930 <gfx_draw_xbm_P+0x70>
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	5f 90       	pop	r5
    19fe:	4f 90       	pop	r4
    1a00:	3f 90       	pop	r3
    1a02:	2f 90       	pop	r2
    1a04:	08 95       	ret

00001a06 <gfx_pixel>:
    1a06:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    1a0a:	97 70       	andi	r25, 0x07	; 7
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <gfx_pixel+0xe>
    1a12:	22 0f       	add	r18, r18
    1a14:	9a 95       	dec	r25
    1a16:	ea f7       	brpl	.-6      	; 0x1a12 <gfx_pixel+0xc>
    1a18:	88 23       	and	r24, r24
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <gfx_pixel+0x1a>
    1a1c:	62 2f       	mov	r22, r18
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <gfx_pixel+0x1c>
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	82 2f       	mov	r24, r18
    1a24:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <gfx_display_write2>

00001a28 <gfx_lineTo>:
    1a28:	bf 92       	push	r11
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	18 2f       	mov	r17, r24
    1a3c:	06 2f       	mov	r16, r22
    1a3e:	d0 91 07 04 	lds	r29, 0x0407	; 0x800407 <gfx_x>
    1a42:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1a46:	d1 13       	cpse	r29, r17
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <gfx_lineTo+0x40>
    1a4a:	86 17       	cp	r24, r22
    1a4c:	20 f4       	brcc	.+8      	; 0x1a56 <gfx_lineTo+0x2e>
    1a4e:	96 2f       	mov	r25, r22
    1a50:	98 1b       	sub	r25, r24
    1a52:	89 2f       	mov	r24, r25
    1a54:	06 c0       	rjmp	.+12     	; 0x1a62 <gfx_lineTo+0x3a>
    1a56:	c8 2f       	mov	r28, r24
    1a58:	c6 1b       	sub	r28, r22
    1a5a:	81 2f       	mov	r24, r17
    1a5c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1a60:	8c 2f       	mov	r24, r28
    1a62:	0e 94 b7 0b 	call	0x176e	; 0x176e <gfx_vline>
    1a66:	5a c0       	rjmp	.+180    	; 0x1b1c <gfx_lineTo+0xf4>
    1a68:	f8 2e       	mov	r15, r24
    1a6a:	68 13       	cpse	r22, r24
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <gfx_lineTo+0x60>
    1a6e:	d1 17       	cp	r29, r17
    1a70:	18 f4       	brcc	.+6      	; 0x1a78 <gfx_lineTo+0x50>
    1a72:	81 2f       	mov	r24, r17
    1a74:	8d 1b       	sub	r24, r29
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <gfx_lineTo+0x5a>
    1a78:	d1 1b       	sub	r29, r17
    1a7a:	81 2f       	mov	r24, r17
    1a7c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1a80:	8d 2f       	mov	r24, r29
    1a82:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <gfx_hline>
    1a86:	4a c0       	rjmp	.+148    	; 0x1b1c <gfx_lineTo+0xf4>
    1a88:	1d 17       	cp	r17, r29
    1a8a:	28 f4       	brcc	.+10     	; 0x1a96 <gfx_lineTo+0x6e>
    1a8c:	dd 2e       	mov	r13, r29
    1a8e:	d1 1a       	sub	r13, r17
    1a90:	cc 24       	eor	r12, r12
    1a92:	ca 94       	dec	r12
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <gfx_lineTo+0x80>
    1a96:	d1 17       	cp	r29, r17
    1a98:	28 f4       	brcc	.+10     	; 0x1aa4 <gfx_lineTo+0x7c>
    1a9a:	d1 2e       	mov	r13, r17
    1a9c:	dd 1a       	sub	r13, r29
    1a9e:	cc 24       	eor	r12, r12
    1aa0:	c3 94       	inc	r12
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <gfx_lineTo+0x80>
    1aa4:	c1 2c       	mov	r12, r1
    1aa6:	d1 2c       	mov	r13, r1
    1aa8:	08 17       	cp	r16, r24
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <gfx_lineTo+0x8e>
    1aac:	c8 2f       	mov	r28, r24
    1aae:	c0 1b       	sub	r28, r16
    1ab0:	bb 24       	eor	r11, r11
    1ab2:	ba 94       	dec	r11
    1ab4:	09 c0       	rjmp	.+18     	; 0x1ac8 <gfx_lineTo+0xa0>
    1ab6:	80 17       	cp	r24, r16
    1ab8:	28 f4       	brcc	.+10     	; 0x1ac4 <gfx_lineTo+0x9c>
    1aba:	c0 2f       	mov	r28, r16
    1abc:	c8 1b       	sub	r28, r24
    1abe:	bb 24       	eor	r11, r11
    1ac0:	b3 94       	inc	r11
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <gfx_lineTo+0xa0>
    1ac4:	b1 2c       	mov	r11, r1
    1ac6:	c0 e0       	ldi	r28, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <gfx_pixel>
    1ace:	cd 15       	cp	r28, r13
    1ad0:	98 f4       	brcc	.+38     	; 0x1af8 <gfx_lineTo+0xd0>
    1ad2:	ed 2c       	mov	r14, r13
    1ad4:	e6 94       	lsr	r14
    1ad6:	e1 94       	neg	r14
    1ad8:	ec 0e       	add	r14, r28
    1ada:	dc 0d       	add	r29, r12
    1adc:	1e 14       	cp	r1, r14
    1ade:	14 f4       	brge	.+4      	; 0x1ae4 <gfx_lineTo+0xbc>
    1ae0:	ed 18       	sub	r14, r13
    1ae2:	fb 0c       	add	r15, r11
    1ae4:	6f 2d       	mov	r22, r15
    1ae6:	8d 2f       	mov	r24, r29
    1ae8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <gfx_pixel>
    1af2:	1d 13       	cpse	r17, r29
    1af4:	f1 cf       	rjmp	.-30     	; 0x1ad8 <gfx_lineTo+0xb0>
    1af6:	12 c0       	rjmp	.+36     	; 0x1b1c <gfx_lineTo+0xf4>
    1af8:	ec 2e       	mov	r14, r28
    1afa:	e6 94       	lsr	r14
    1afc:	e1 94       	neg	r14
    1afe:	ed 0c       	add	r14, r13
    1b00:	fb 0c       	add	r15, r11
    1b02:	1e 14       	cp	r1, r14
    1b04:	14 f4       	brge	.+4      	; 0x1b0a <gfx_lineTo+0xe2>
    1b06:	ec 1a       	sub	r14, r28
    1b08:	dc 0d       	add	r29, r12
    1b0a:	6f 2d       	mov	r22, r15
    1b0c:	8d 2f       	mov	r24, r29
    1b0e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <gfx_pixel>
    1b18:	0f 11       	cpse	r16, r15
    1b1a:	f1 cf       	rjmp	.-30     	; 0x1afe <gfx_lineTo+0xd6>
    1b1c:	60 2f       	mov	r22, r16
    1b1e:	81 2f       	mov	r24, r17
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	bf 90       	pop	r11
    1b32:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <gfx_move>

00001b36 <gfx_term_clear>:
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	0e 94 8c 09 	call	0x1318	; 0x1318 <gfx_fill>
    1b3c:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <gfx_term_row>
    1b40:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1b44:	08 95       	ret

00001b46 <gfx_term_goto>:
    1b46:	86 31       	cpi	r24, 0x16	; 22
    1b48:	30 f4       	brcc	.+12     	; 0x1b56 <gfx_term_goto+0x10>
    1b4a:	68 30       	cpi	r22, 0x08	; 8
    1b4c:	20 f4       	brcc	.+8      	; 0x1b56 <gfx_term_goto+0x10>
    1b4e:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <gfx_term_row>
    1b52:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1b56:	08 95       	ret

00001b58 <gfx_term_scroll>:
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	c9 eb       	ldi	r28, 0xB9	; 185
    1b6a:	20 e1       	ldi	r18, 0x10	; 16
    1b6c:	c2 2e       	mov	r12, r18
    1b6e:	24 e0       	ldi	r18, 0x04	; 4
    1b70:	d2 2e       	mov	r13, r18
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
    1b76:	07 e4       	ldi	r16, 0x47	; 71
    1b78:	0c 0f       	add	r16, r28
    1b7a:	d8 30       	cpi	r29, 0x08	; 8
    1b7c:	50 f5       	brcc	.+84     	; 0x1bd2 <gfx_term_scroll+0x7a>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1b84:	6c 2f       	mov	r22, r28
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1b92:	60 e4       	ldi	r22, 0x40	; 64
    1b94:	61 0f       	add	r22, r17
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    1ba2:	98 e0       	ldi	r25, 0x08	; 8
    1ba4:	e9 2e       	mov	r14, r25
    1ba6:	94 e0       	ldi	r25, 0x04	; 4
    1ba8:	f9 2e       	mov	r15, r25
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	81 93       	st	Z+, r24
    1bb4:	7f 01       	movw	r14, r30
    1bb6:	f0 e1       	ldi	r31, 0x10	; 16
    1bb8:	ef 16       	cp	r14, r31
    1bba:	f4 e0       	ldi	r31, 0x04	; 4
    1bbc:	ff 06       	cpc	r15, r31
    1bbe:	a9 f7       	brne	.-22     	; 0x1baa <gfx_term_scroll+0x52>
    1bc0:	60 2f       	mov	r22, r16
    1bc2:	8d 2f       	mov	r24, r29
    1bc4:	0e 94 07 09 	call	0x120e	; 0x120e <gfx_store_disp_tile>
    1bc8:	df 5f       	subi	r29, 0xFF	; 255
    1bca:	18 5f       	subi	r17, 0xF8	; 248
    1bcc:	d0 31       	cpi	r29, 0x10	; 16
    1bce:	a9 f6       	brne	.-86     	; 0x1b7a <gfx_term_scroll+0x22>
    1bd0:	1f c0       	rjmp	.+62     	; 0x1c10 <gfx_term_scroll+0xb8>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1bd8:	6c 2f       	mov	r22, r28
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <display_wait>
    1be6:	61 2f       	mov	r22, r17
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	0e 94 8d 06 	call	0xd1a	; 0xd1a <display_write>
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    1bf4:	88 e0       	ldi	r24, 0x08	; 8
    1bf6:	e8 2e       	mov	r14, r24
    1bf8:	84 e0       	ldi	r24, 0x04	; 4
    1bfa:	f8 2e       	mov	r15, r24
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	0e 94 cf 06 	call	0xd9e	; 0xd9e <display_read>
    1c02:	f7 01       	movw	r30, r14
    1c04:	81 93       	st	Z+, r24
    1c06:	7f 01       	movw	r14, r30
    1c08:	ce 16       	cp	r12, r30
    1c0a:	df 06       	cpc	r13, r31
    1c0c:	b9 f7       	brne	.-18     	; 0x1bfc <gfx_term_scroll+0xa4>
    1c0e:	d8 cf       	rjmp	.-80     	; 0x1bc0 <gfx_term_scroll+0x68>
    1c10:	cf 5f       	subi	r28, 0xFF	; 255
    1c12:	c0 3c       	cpi	r28, 0xC0	; 192
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <gfx_term_scroll+0xc0>
    1c16:	ad cf       	rjmp	.-166    	; 0x1b72 <gfx_term_scroll+0x1a>
    1c18:	e8 e0       	ldi	r30, 0x08	; 8
    1c1a:	f4 e0       	ldi	r31, 0x04	; 4
    1c1c:	80 e1       	ldi	r24, 0x10	; 16
    1c1e:	94 e0       	ldi	r25, 0x04	; 4
    1c20:	11 92       	st	Z+, r1
    1c22:	8e 17       	cp	r24, r30
    1c24:	9f 07       	cpc	r25, r31
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <gfx_term_scroll+0xc8>
    1c28:	c0 e0       	ldi	r28, 0x00	; 0
    1c2a:	67 e0       	ldi	r22, 0x07	; 7
    1c2c:	8c 2f       	mov	r24, r28
    1c2e:	0e 94 07 09 	call	0x120e	; 0x120e <gfx_store_disp_tile>
    1c32:	cf 5f       	subi	r28, 0xFF	; 255
    1c34:	c0 31       	cpi	r28, 0x10	; 16
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <gfx_term_scroll+0xd2>
    1c38:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1c3c:	88 23       	and	r24, r24
    1c3e:	19 f0       	breq	.+6      	; 0x1c46 <gfx_term_scroll+0xee>
    1c40:	81 50       	subi	r24, 0x01	; 1
    1c42:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <gfx_term_print>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <gfx_proportional>
    1c62:	8c 01       	movw	r16, r24
    1c64:	f8 01       	movw	r30, r16
    1c66:	c1 91       	ld	r28, Z+
    1c68:	8f 01       	movw	r16, r30
    1c6a:	cc 23       	and	r28, r28
    1c6c:	b9 f1       	breq	.+110    	; 0x1cdc <gfx_term_print+0x84>
    1c6e:	ca 30       	cpi	r28, 0x0A	; 10
    1c70:	69 f4       	brne	.+26     	; 0x1c8c <gfx_term_print+0x34>
    1c72:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1c76:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
    1c7c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1c80:	88 30       	cpi	r24, 0x08	; 8
    1c82:	81 f7       	brne	.-32     	; 0x1c64 <gfx_term_print+0xc>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gfx_term_scroll>
    1c8a:	ec cf       	rjmp	.-40     	; 0x1c64 <gfx_term_print+0xc>
    1c8c:	cd 30       	cpi	r28, 0x0D	; 13
    1c8e:	51 f3       	breq	.-44     	; 0x1c64 <gfx_term_print+0xc>
    1c90:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1c94:	85 31       	cpi	r24, 0x15	; 21
    1c96:	60 f0       	brcs	.+24     	; 0x1cb0 <gfx_term_print+0x58>
    1c98:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1c9c:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <gfx_term_print+0x58>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <gfx_term_scroll>
    1cb0:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <gfx_term_row>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	66 0f       	add	r22, r22
    1cb8:	66 0f       	add	r22, r22
    1cba:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	99 0f       	add	r25, r25
    1cc2:	89 0f       	add	r24, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <gfx_move>
    1cca:	8c 2f       	mov	r24, r28
    1ccc:	0e 94 9d 0a 	call	0x153a	; 0x153a <gfx_print_char>
    1cd0:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1cda:	c4 cf       	rjmp	.-120    	; 0x1c64 <gfx_term_print+0xc>
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <wait_copro>:
    1ce4:	78 94       	sei
    1ce6:	20 e1       	ldi	r18, 0x10	; 16
    1ce8:	37 e2       	ldi	r19, 0x27	; 39
    1cea:	97 e0       	ldi	r25, 0x07	; 7
    1cec:	89 9f       	mul	r24, r25
    1cee:	f0 01       	movw	r30, r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	e8 5e       	subi	r30, 0xE8	; 232
    1cf4:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	31 09       	sbc	r19, r1
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <wait_copro+0x1e>
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1d00:	d1 f7       	brne	.-12     	; 0x1cf6 <wait_copro+0x12>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	23 2b       	or	r18, r19
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <wait_copro+0x26>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	08 95       	ret

00001d0c <spi_finished_callback>:
    1d0c:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <copro_seq>
    1d10:	9f 5f       	subi	r25, 0xFF	; 255
    1d12:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <copro_seq>
    1d16:	8b 31       	cpi	r24, 0x1B	; 27
    1d18:	41 f4       	brne	.+16     	; 0x1d2a <spi_finished_callback+0x1e>
    1d1a:	e6 ee       	ldi	r30, 0xE6	; 230
    1d1c:	f3 e0       	ldi	r31, 0x03	; 3
    1d1e:	af e4       	ldi	r26, 0x4F	; 79
    1d20:	b4 e0       	ldi	r27, 0x04	; 4
    1d22:	01 90       	ld	r0, Z+
    1d24:	0d 92       	st	X+, r0
    1d26:	8a 95       	dec	r24
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <spi_finished_callback+0x16>
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <spi_tx_buf+0xe>
    1d30:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <spi_tx_buf+0x7>
    1d34:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <spi_tx_buf>
    1d38:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <copro_commands>
    1d3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d3e:	69 f0       	breq	.+26     	; 0x1d5a <spi_finished_callback+0x4e>
    1d40:	97 e0       	ldi	r25, 0x07	; 7
    1d42:	e8 e1       	ldi	r30, 0x18	; 24
    1d44:	f4 e0       	ldi	r31, 0x04	; 4
    1d46:	a6 ec       	ldi	r26, 0xC6	; 198
    1d48:	b3 e0       	ldi	r27, 0x03	; 3
    1d4a:	01 90       	ld	r0, Z+
    1d4c:	0d 92       	st	X+, r0
    1d4e:	9a 95       	dec	r25
    1d50:	e1 f7       	brne	.-8      	; 0x1d4a <spi_finished_callback+0x3e>
    1d52:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1d56:	87 e0       	ldi	r24, 0x07	; 7
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <spi_finished_callback+0x50>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <copro_commands+0x7>
    1d60:	9f 3f       	cpi	r25, 0xFF	; 255
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <spi_finished_callback+0x76>
    1d64:	a8 2f       	mov	r26, r24
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	aa 53       	subi	r26, 0x3A	; 58
    1d6a:	bc 4f       	sbci	r27, 0xFC	; 252
    1d6c:	97 e0       	ldi	r25, 0x07	; 7
    1d6e:	ef e1       	ldi	r30, 0x1F	; 31
    1d70:	f4 e0       	ldi	r31, 0x04	; 4
    1d72:	01 90       	ld	r0, Z+
    1d74:	0d 92       	st	X+, r0
    1d76:	9a 95       	dec	r25
    1d78:	e1 f7       	brne	.-8      	; 0x1d72 <spi_finished_callback+0x66>
    1d7a:	9f ef       	ldi	r25, 0xFF	; 255
    1d7c:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <copro_commands+0x7>
    1d80:	89 5f       	subi	r24, 0xF9	; 249
    1d82:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <copro_commands+0xe>
    1d86:	9f 3f       	cpi	r25, 0xFF	; 255
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <spi_finished_callback+0x9c>
    1d8a:	a8 2f       	mov	r26, r24
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	aa 53       	subi	r26, 0x3A	; 58
    1d90:	bc 4f       	sbci	r27, 0xFC	; 252
    1d92:	87 e0       	ldi	r24, 0x07	; 7
    1d94:	e6 e2       	ldi	r30, 0x26	; 38
    1d96:	f4 e0       	ldi	r31, 0x04	; 4
    1d98:	01 90       	ld	r0, Z+
    1d9a:	0d 92       	st	X+, r0
    1d9c:	8a 95       	dec	r24
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <spi_finished_callback+0x8c>
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <copro_commands+0xe>
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <spi_finished_callback+0xa4>
    1da8:	81 11       	cpse	r24, r1
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <spi_finished_callback+0xa4>
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	08 95       	ret
    1db0:	85 e1       	ldi	r24, 0x15	; 21
    1db2:	08 95       	ret

00001db4 <_copro_check_busy>:
    1db4:	27 e0       	ldi	r18, 0x07	; 7
    1db6:	82 9f       	mul	r24, r18
    1db8:	c0 01       	movw	r24, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	e8 5e       	subi	r30, 0xE8	; 232
    1dc0:	fb 4f       	sbci	r31, 0xFB	; 251
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 81       	ld	r25, Z
    1dc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <_copro_check_busy+0x18>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	08 95       	ret

00001dce <copro_update>:
    1dce:	f8 94       	cli
    1dd0:	a1 e3       	ldi	r26, 0x31	; 49
    1dd2:	b4 e0       	ldi	r27, 0x04	; 4
    1dd4:	ef e4       	ldi	r30, 0x4F	; 79
    1dd6:	f4 e0       	ldi	r31, 0x04	; 4
    1dd8:	81 81       	ldd	r24, Z+1	; 0x01
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	98 2f       	mov	r25, r24
    1dde:	88 27       	eor	r24, r24
    1de0:	20 81       	ld	r18, Z
    1de2:	82 0f       	add	r24, r18
    1de4:	91 1d       	adc	r25, r1
    1de6:	11 96       	adiw	r26, 0x01	; 1
    1de8:	9c 93       	st	X, r25
    1dea:	8e 93       	st	-X, r24
    1dec:	83 81       	ldd	r24, Z+3	; 0x03
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	98 2f       	mov	r25, r24
    1df2:	88 27       	eor	r24, r24
    1df4:	22 81       	ldd	r18, Z+2	; 0x02
    1df6:	82 0f       	add	r24, r18
    1df8:	91 1d       	adc	r25, r1
    1dfa:	13 96       	adiw	r26, 0x03	; 3
    1dfc:	9c 93       	st	X, r25
    1dfe:	8e 93       	st	-X, r24
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	85 81       	ldd	r24, Z+5	; 0x05
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	98 2f       	mov	r25, r24
    1e08:	88 27       	eor	r24, r24
    1e0a:	24 81       	ldd	r18, Z+4	; 0x04
    1e0c:	82 0f       	add	r24, r18
    1e0e:	91 1d       	adc	r25, r1
    1e10:	15 96       	adiw	r26, 0x05	; 5
    1e12:	9c 93       	st	X, r25
    1e14:	8e 93       	st	-X, r24
    1e16:	14 97       	sbiw	r26, 0x04	; 4
    1e18:	87 81       	ldd	r24, Z+7	; 0x07
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	88 27       	eor	r24, r24
    1e20:	26 81       	ldd	r18, Z+6	; 0x06
    1e22:	82 0f       	add	r24, r18
    1e24:	91 1d       	adc	r25, r1
    1e26:	17 96       	adiw	r26, 0x07	; 7
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
    1e2c:	16 97       	sbiw	r26, 0x06	; 6
    1e2e:	81 85       	ldd	r24, Z+9	; 0x09
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 2f       	mov	r25, r24
    1e34:	88 27       	eor	r24, r24
    1e36:	20 85       	ldd	r18, Z+8	; 0x08
    1e38:	82 0f       	add	r24, r18
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	19 96       	adiw	r26, 0x09	; 9
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
    1e42:	18 97       	sbiw	r26, 0x08	; 8
    1e44:	78 94       	sei
    1e46:	f8 94       	cli
    1e48:	22 85       	ldd	r18, Z+10	; 0x0a
    1e4a:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1e4e:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    1e52:	ac 01       	movw	r20, r24
    1e54:	42 0f       	add	r20, r18
    1e56:	51 1d       	adc	r21, r1
    1e58:	93 85       	ldd	r25, Z+11	; 0x0b
    1e5a:	89 2f       	mov	r24, r25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	98 2f       	mov	r25, r24
    1e60:	88 27       	eor	r24, r24
    1e62:	84 0f       	add	r24, r20
    1e64:	95 1f       	adc	r25, r21
    1e66:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    1e6a:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    1e6e:	24 85       	ldd	r18, Z+12	; 0x0c
    1e70:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <copro_ticks_offset_r>
    1e74:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    1e78:	ac 01       	movw	r20, r24
    1e7a:	42 0f       	add	r20, r18
    1e7c:	51 1d       	adc	r21, r1
    1e7e:	95 85       	ldd	r25, Z+13	; 0x0d
    1e80:	89 2f       	mov	r24, r25
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	98 2f       	mov	r25, r24
    1e86:	88 27       	eor	r24, r24
    1e88:	84 0f       	add	r24, r20
    1e8a:	95 1f       	adc	r25, r21
    1e8c:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <copro_ticks_r+0x1>
    1e90:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <copro_ticks_r>
    1e94:	87 85       	ldd	r24, Z+15	; 0x0f
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	98 2f       	mov	r25, r24
    1e9a:	88 27       	eor	r24, r24
    1e9c:	26 85       	ldd	r18, Z+14	; 0x0e
    1e9e:	82 0f       	add	r24, r18
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <copro_speed_l+0x1>
    1ea6:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <copro_speed_l>
    1eaa:	81 89       	ldd	r24, Z+17	; 0x11
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	98 2f       	mov	r25, r24
    1eb0:	88 27       	eor	r24, r24
    1eb2:	20 89       	ldd	r18, Z+16	; 0x10
    1eb4:	82 0f       	add	r24, r18
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <copro_speed_r+0x1>
    1ebc:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <copro_speed_r>
    1ec0:	83 89       	ldd	r24, Z+19	; 0x13
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	88 27       	eor	r24, r24
    1ec8:	22 89       	ldd	r18, Z+18	; 0x12
    1eca:	82 0f       	add	r24, r18
    1ecc:	91 1d       	adc	r25, r1
    1ece:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <copro_current_l+0x1>
    1ed2:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <copro_current_l>
    1ed6:	85 89       	ldd	r24, Z+21	; 0x15
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	98 2f       	mov	r25, r24
    1edc:	88 27       	eor	r24, r24
    1ede:	24 89       	ldd	r18, Z+20	; 0x14
    1ee0:	82 0f       	add	r24, r18
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <copro_current_r+0x1>
    1ee8:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <copro_current_r>
    1eec:	78 94       	sei
    1eee:	f8 94       	cli
    1ef0:	80 8d       	ldd	r24, Z+24	; 0x18
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	88 27       	eor	r24, r24
    1ef8:	27 89       	ldd	r18, Z+23	; 0x17
    1efa:	82 0f       	add	r24, r18
    1efc:	91 1d       	adc	r25, r1
    1efe:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <copro_rc5_cmd+0x1>
    1f02:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <copro_rc5_cmd>
    1f06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	88 27       	eor	r24, r24
    1f0e:	21 8d       	ldd	r18, Z+25	; 0x19
    1f10:	82 0f       	add	r24, r18
    1f12:	91 1d       	adc	r25, r1
    1f14:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <copro_target_distance+0x1>
    1f18:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <copro_target_distance>
    1f1c:	78 94       	sei
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	08 95       	ret

00001f22 <copro_stop>:
    1f22:	f8 94       	cli
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1f2a:	78 94       	sei
    1f2c:	08 95       	ret

00001f2e <copro_stopImmediate>:
    1f2e:	f8 94       	cli
    1f30:	8a e0       	ldi	r24, 0x0A	; 10
    1f32:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1f36:	78 94       	sei
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	08 95       	ret

00001f3c <copro_setPWM>:
    1f3c:	f8 94       	cli
    1f3e:	e8 e1       	ldi	r30, 0x18	; 24
    1f40:	f4 e0       	ldi	r31, 0x04	; 4
    1f42:	25 e0       	ldi	r18, 0x05	; 5
    1f44:	20 83       	st	Z, r18
    1f46:	81 83       	std	Z+1, r24	; 0x01
    1f48:	92 83       	std	Z+2, r25	; 0x02
    1f4a:	63 83       	std	Z+3, r22	; 0x03
    1f4c:	74 83       	std	Z+4, r23	; 0x04
    1f4e:	78 94       	sei
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	08 95       	ret

00001f54 <copro_setSpeed>:
    1f54:	f8 94       	cli
    1f56:	e8 e1       	ldi	r30, 0x18	; 24
    1f58:	f4 e0       	ldi	r31, 0x04	; 4
    1f5a:	22 e0       	ldi	r18, 0x02	; 2
    1f5c:	20 83       	st	Z, r18
    1f5e:	81 83       	std	Z+1, r24	; 0x01
    1f60:	92 83       	std	Z+2, r25	; 0x02
    1f62:	63 83       	std	Z+3, r22	; 0x03
    1f64:	74 83       	std	Z+4, r23	; 0x04
    1f66:	78 94       	sei
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	08 95       	ret

00001f6c <copro_setTargetAbs>:
    1f6c:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1f70:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    1f74:	82 1b       	sub	r24, r18
    1f76:	93 0b       	sbc	r25, r19
    1f78:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <copro_ticks_offset_r>
    1f7c:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    1f80:	62 1b       	sub	r22, r18
    1f82:	73 0b       	sbc	r23, r19
    1f84:	f8 94       	cli
    1f86:	e8 e1       	ldi	r30, 0x18	; 24
    1f88:	f4 e0       	ldi	r31, 0x04	; 4
    1f8a:	23 e0       	ldi	r18, 0x03	; 3
    1f8c:	20 83       	st	Z, r18
    1f8e:	81 83       	std	Z+1, r24	; 0x01
    1f90:	92 83       	std	Z+2, r25	; 0x02
    1f92:	63 83       	std	Z+3, r22	; 0x03
    1f94:	74 83       	std	Z+4, r23	; 0x04
    1f96:	45 83       	std	Z+5, r20	; 0x05
    1f98:	56 83       	std	Z+6, r21	; 0x06
    1f9a:	78 94       	sei
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	08 95       	ret

00001fa0 <copro_setTargetRel>:
    1fa0:	f8 94       	cli
    1fa2:	e8 e1       	ldi	r30, 0x18	; 24
    1fa4:	f4 e0       	ldi	r31, 0x04	; 4
    1fa6:	24 e0       	ldi	r18, 0x04	; 4
    1fa8:	20 83       	st	Z, r18
    1faa:	81 83       	std	Z+1, r24	; 0x01
    1fac:	92 83       	std	Z+2, r25	; 0x02
    1fae:	63 83       	std	Z+3, r22	; 0x03
    1fb0:	74 83       	std	Z+4, r23	; 0x04
    1fb2:	45 83       	std	Z+5, r20	; 0x05
    1fb4:	56 83       	std	Z+6, r21	; 0x06
    1fb6:	78 94       	sei
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	08 95       	ret

00001fbc <copro_setSpeedParameters>:
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	18 2f       	mov	r17, r24
    1fc4:	d6 2f       	mov	r29, r22
    1fc6:	c4 2f       	mov	r28, r20
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <wait_copro>
    1fce:	f8 94       	cli
    1fd0:	e8 e1       	ldi	r30, 0x18	; 24
    1fd2:	f4 e0       	ldi	r31, 0x04	; 4
    1fd4:	86 e0       	ldi	r24, 0x06	; 6
    1fd6:	86 87       	std	Z+14, r24	; 0x0e
    1fd8:	17 87       	std	Z+15, r17	; 0x0f
    1fda:	d0 8b       	std	Z+16, r29	; 0x10
    1fdc:	c1 8b       	std	Z+17, r28	; 0x11
    1fde:	78 94       	sei
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <copro_setPositionParameters>:
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	08 95       	ret

00001fee <copro_resetOdometry>:
    1fee:	f8 94       	cli
    1ff0:	ef e4       	ldi	r30, 0x4F	; 79
    1ff2:	f4 e0       	ldi	r31, 0x04	; 4
    1ff4:	25 85       	ldd	r18, Z+13	; 0x0d
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	32 2f       	mov	r19, r18
    1ffa:	22 27       	eor	r18, r18
    1ffc:	44 85       	ldd	r20, Z+12	; 0x0c
    1ffe:	24 0f       	add	r18, r20
    2000:	31 1d       	adc	r19, r1
    2002:	43 85       	ldd	r20, Z+11	; 0x0b
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	54 2f       	mov	r21, r20
    2008:	44 27       	eor	r20, r20
    200a:	e2 85       	ldd	r30, Z+10	; 0x0a
    200c:	4e 0f       	add	r20, r30
    200e:	51 1d       	adc	r21, r1
    2010:	fc 01       	movw	r30, r24
    2012:	e4 1b       	sub	r30, r20
    2014:	f5 0b       	sbc	r31, r21
    2016:	f0 93 15 04 	sts	0x0415, r31	; 0x800415 <copro_ticks_offset_l+0x1>
    201a:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <copro_ticks_offset_l>
    201e:	ab 01       	movw	r20, r22
    2020:	42 1b       	sub	r20, r18
    2022:	53 0b       	sbc	r21, r19
    2024:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <copro_ticks_offset_r+0x1>
    2028:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <copro_ticks_offset_r>
    202c:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    2030:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    2034:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <copro_ticks_r+0x1>
    2038:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <copro_ticks_r>
    203c:	78 94       	sei
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	08 95       	ret

00002042 <copro_ir_stop>:
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <wait_copro>
    2048:	f8 94       	cli
    204a:	88 e0       	ldi	r24, 0x08	; 8
    204c:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    2050:	78 94       	sei
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	08 95       	ret

00002056 <copro_ir_startMeasure>:
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <wait_copro>
    205c:	f8 94       	cli
    205e:	87 e0       	ldi	r24, 0x07	; 7
    2060:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    2064:	78 94       	sei
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	08 95       	ret

0000206a <copro_transmitRC5>:
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	d8 2f       	mov	r29, r24
    2070:	c9 2f       	mov	r28, r25
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <wait_copro>
    2078:	f8 94       	cli
    207a:	e8 e1       	ldi	r30, 0x18	; 24
    207c:	f4 e0       	ldi	r31, 0x04	; 4
    207e:	89 e0       	ldi	r24, 0x09	; 9
    2080:	87 83       	std	Z+7, r24	; 0x07
    2082:	d0 87       	std	Z+8, r29	; 0x08
    2084:	c1 87       	std	Z+9, r28	; 0x09
    2086:	78 94       	sei
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	08 95       	ret

00002090 <bot_init>:
    2090:	8f 9a       	sbi	0x11, 7	; 17
    2092:	97 98       	cbi	0x12, 7	; 18
    2094:	8a e0       	ldi	r24, 0x0A	; 10
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 46 08 	call	0x108c	; 0x108c <delay>
    209c:	97 9a       	sbi	0x12, 7	; 18
    209e:	84 e6       	ldi	r24, 0x64	; 100
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0c 94 46 08 	jmp	0x108c	; 0x108c <delay>

000020a6 <bot_update>:
    20a6:	87 e0       	ldi	r24, 0x07	; 7
    20a8:	0e 94 de 10 	call	0x21bc	; 0x21bc <adc_read>
    20ac:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <bot_supply+0x1>
    20b0:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <bot_supply>
    20b4:	08 95       	ret

000020b6 <leds_init>:
    20b6:	bf 9a       	sbi	0x17, 7	; 23
    20b8:	c7 9a       	sbi	0x18, 7	; 24
    20ba:	bd 9a       	sbi	0x17, 5	; 23
    20bc:	be 9a       	sbi	0x17, 6	; 23
    20be:	8f ef       	ldi	r24, 0xFF	; 255
    20c0:	82 b9       	out	0x02, r24	; 2
    20c2:	84 bb       	out	0x14, r24	; 20
    20c4:	08 95       	ret

000020c6 <leds_set_status>:
    20c6:	95 b3       	in	r25, 0x15	; 21
    20c8:	21 e0       	ldi	r18, 0x01	; 1
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	06 2e       	mov	r0, r22
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <leds_set_status+0xc>
    20d0:	22 0f       	add	r18, r18
    20d2:	0a 94       	dec	r0
    20d4:	ea f7       	brpl	.-6      	; 0x20d0 <leds_set_status+0xa>
    20d6:	80 ff       	sbrs	r24, 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <leds_set_status+0x18>
    20da:	29 2b       	or	r18, r25
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <leds_set_status+0x1c>
    20de:	20 95       	com	r18
    20e0:	29 23       	and	r18, r25
    20e2:	25 bb       	out	0x15, r18	; 21
    20e4:	23 b1       	in	r18, 0x03	; 3
    20e6:	81 ff       	sbrs	r24, 1
    20e8:	08 c0       	rjmp	.+16     	; 0x20fa <leds_set_status+0x34>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <leds_set_status+0x2c>
    20f0:	88 0f       	add	r24, r24
    20f2:	6a 95       	dec	r22
    20f4:	ea f7       	brpl	.-6      	; 0x20f0 <leds_set_status+0x2a>
    20f6:	82 2b       	or	r24, r18
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <leds_set_status+0x44>
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <leds_set_status+0x3c>
    2100:	88 0f       	add	r24, r24
    2102:	6a 95       	dec	r22
    2104:	ea f7       	brpl	.-6      	; 0x2100 <leds_set_status+0x3a>
    2106:	80 95       	com	r24
    2108:	82 23       	and	r24, r18
    210a:	83 b9       	out	0x03, r24	; 3
    210c:	08 95       	ret

0000210e <leds_set_status_intensity>:
    210e:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    2112:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    2116:	08 95       	ret

00002118 <leds_get_status_intensity>:
    2118:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    211c:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    2120:	08 95       	ret

00002122 <leds_set_headlights>:
    2122:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <pwm_channel_A+0x1>
    2126:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <pwm_channel_A>
    212a:	08 95       	ret

0000212c <leds_get_headlights>:
    212c:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    2130:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    2134:	08 95       	ret

00002136 <leds_set_displaylight>:
    2136:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <pwm_channel_B+0x1>
    213a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <pwm_channel_B>
    213e:	08 95       	ret

00002140 <leds_get_displaylight>:
    2140:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    2144:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    2148:	08 95       	ret

0000214a <sound_init>:
    214a:	bc 9a       	sbi	0x17, 4	; 23
    214c:	08 95       	ret

0000214e <sound_tone>:
    214e:	61 15       	cp	r22, r1
    2150:	71 05       	cpc	r23, r1
    2152:	09 f1       	breq	.+66     	; 0x2196 <sound_tone+0x48>
    2154:	c4 98       	cbi	0x18, 4	; 24
    2156:	9b 01       	movw	r18, r22
    2158:	28 1b       	sub	r18, r24
    215a:	39 0b       	sbc	r19, r25
    215c:	62 17       	cp	r22, r18
    215e:	73 07       	cpc	r23, r19
    2160:	49 f0       	breq	.+18     	; 0x2174 <sound_tone+0x26>
    2162:	61 50       	subi	r22, 0x01	; 1
    2164:	71 09       	sbc	r23, r1
    2166:	45 e3       	ldi	r20, 0x35	; 53
    2168:	4a 95       	dec	r20
    216a:	f1 f7       	brne	.-4      	; 0x2168 <sound_tone+0x1a>
    216c:	00 00       	nop
    216e:	61 15       	cp	r22, r1
    2170:	71 05       	cpc	r23, r1
    2172:	a1 f7       	brne	.-24     	; 0x215c <sound_tone+0xe>
    2174:	c4 9a       	sbi	0x18, 4	; 24
    2176:	9b 01       	movw	r18, r22
    2178:	28 1b       	sub	r18, r24
    217a:	39 0b       	sbc	r19, r25
    217c:	61 15       	cp	r22, r1
    217e:	71 05       	cpc	r23, r1
    2180:	31 f3       	breq	.-52     	; 0x214e <sound_tone>
    2182:	62 17       	cp	r22, r18
    2184:	73 07       	cpc	r23, r19
    2186:	19 f3       	breq	.-58     	; 0x214e <sound_tone>
    2188:	61 50       	subi	r22, 0x01	; 1
    218a:	71 09       	sbc	r23, r1
    218c:	45 e3       	ldi	r20, 0x35	; 53
    218e:	4a 95       	dec	r20
    2190:	f1 f7       	brne	.-4      	; 0x218e <sound_tone+0x40>
    2192:	00 00       	nop
    2194:	f3 cf       	rjmp	.-26     	; 0x217c <sound_tone+0x2e>
    2196:	08 95       	ret

00002198 <adc_init>:
    2198:	e1 e6       	ldi	r30, 0x61	; 97
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	90 81       	ld	r25, Z
    219e:	21 e0       	ldi	r18, 0x01	; 1
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <adc_init+0xe>
    21a4:	22 0f       	add	r18, r18
    21a6:	8a 95       	dec	r24
    21a8:	ea f7       	brpl	.-6      	; 0x21a4 <adc_init+0xc>
    21aa:	20 95       	com	r18
    21ac:	92 23       	and	r25, r18
    21ae:	90 83       	st	Z, r25
    21b0:	e2 e6       	ldi	r30, 0x62	; 98
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	28 23       	and	r18, r24
    21b8:	20 83       	st	Z, r18
    21ba:	08 95       	ret

000021bc <adc_read>:
    21bc:	90 e4       	ldi	r25, 0x40	; 64
    21be:	97 b9       	out	0x07, r25	; 7
    21c0:	97 b1       	in	r25, 0x07	; 7
    21c2:	87 70       	andi	r24, 0x07	; 7
    21c4:	98 2b       	or	r25, r24
    21c6:	97 b9       	out	0x07, r25	; 7
    21c8:	87 ec       	ldi	r24, 0xC7	; 199
    21ca:	86 b9       	out	0x06, r24	; 6
    21cc:	36 9b       	sbis	0x06, 6	; 6
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <adc_read+0x18>
    21d0:	00 00       	nop
    21d2:	fc cf       	rjmp	.-8      	; 0x21cc <adc_read+0x10>
    21d4:	24 b1       	in	r18, 0x04	; 4
    21d6:	85 b1       	in	r24, 0x05	; 5
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	98 2f       	mov	r25, r24
    21dc:	88 27       	eor	r24, r24
    21de:	82 0f       	add	r24, r18
    21e0:	91 1d       	adc	r25, r1
    21e2:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <adc_random_seed>
    21e6:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <adc_random_seed+0x1>
    21ea:	28 0f       	add	r18, r24
    21ec:	39 1f       	adc	r19, r25
    21ee:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <adc_random_seed+0x1>
    21f2:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <adc_random_seed>
    21f6:	08 95       	ret

000021f8 <adc_get_random_seed>:
    21f8:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <adc_random_seed>
    21fc:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <adc_random_seed+0x1>
    2200:	08 95       	ret

00002202 <__cmpsf2>:
    2202:	0e 94 a7 11 	call	0x234e	; 0x234e <__fp_cmp>
    2206:	08 f4       	brcc	.+2      	; 0x220a <__cmpsf2+0x8>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	08 95       	ret

0000220c <__divsf3>:
    220c:	0e 94 1a 11 	call	0x2234	; 0x2234 <__divsf3x>
    2210:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__fp_round>
    2214:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__fp_pscB>
    2218:	58 f0       	brcs	.+22     	; 0x2230 <__divsf3+0x24>
    221a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fp_pscA>
    221e:	40 f0       	brcs	.+16     	; 0x2230 <__divsf3+0x24>
    2220:	29 f4       	brne	.+10     	; 0x222c <__divsf3+0x20>
    2222:	5f 3f       	cpi	r21, 0xFF	; 255
    2224:	29 f0       	breq	.+10     	; 0x2230 <__divsf3+0x24>
    2226:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_inf>
    222a:	51 11       	cpse	r21, r1
    222c:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_szero>
    2230:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__fp_nan>

00002234 <__divsf3x>:
    2234:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_split3>
    2238:	68 f3       	brcs	.-38     	; 0x2214 <__divsf3+0x8>

0000223a <__divsf3_pse>:
    223a:	99 23       	and	r25, r25
    223c:	b1 f3       	breq	.-20     	; 0x222a <__divsf3+0x1e>
    223e:	55 23       	and	r21, r21
    2240:	91 f3       	breq	.-28     	; 0x2226 <__divsf3+0x1a>
    2242:	95 1b       	sub	r25, r21
    2244:	55 0b       	sbc	r21, r21
    2246:	bb 27       	eor	r27, r27
    2248:	aa 27       	eor	r26, r26
    224a:	62 17       	cp	r22, r18
    224c:	73 07       	cpc	r23, r19
    224e:	84 07       	cpc	r24, r20
    2250:	38 f0       	brcs	.+14     	; 0x2260 <__divsf3_pse+0x26>
    2252:	9f 5f       	subi	r25, 0xFF	; 255
    2254:	5f 4f       	sbci	r21, 0xFF	; 255
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	44 1f       	adc	r20, r20
    225c:	aa 1f       	adc	r26, r26
    225e:	a9 f3       	breq	.-22     	; 0x224a <__divsf3_pse+0x10>
    2260:	35 d0       	rcall	.+106    	; 0x22cc <__divsf3_pse+0x92>
    2262:	0e 2e       	mov	r0, r30
    2264:	3a f0       	brmi	.+14     	; 0x2274 <__divsf3_pse+0x3a>
    2266:	e0 e8       	ldi	r30, 0x80	; 128
    2268:	32 d0       	rcall	.+100    	; 0x22ce <__divsf3_pse+0x94>
    226a:	91 50       	subi	r25, 0x01	; 1
    226c:	50 40       	sbci	r21, 0x00	; 0
    226e:	e6 95       	lsr	r30
    2270:	00 1c       	adc	r0, r0
    2272:	ca f7       	brpl	.-14     	; 0x2266 <__divsf3_pse+0x2c>
    2274:	2b d0       	rcall	.+86     	; 0x22cc <__divsf3_pse+0x92>
    2276:	fe 2f       	mov	r31, r30
    2278:	29 d0       	rcall	.+82     	; 0x22cc <__divsf3_pse+0x92>
    227a:	66 0f       	add	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	bb 1f       	adc	r27, r27
    2282:	26 17       	cp	r18, r22
    2284:	37 07       	cpc	r19, r23
    2286:	48 07       	cpc	r20, r24
    2288:	ab 07       	cpc	r26, r27
    228a:	b0 e8       	ldi	r27, 0x80	; 128
    228c:	09 f0       	breq	.+2      	; 0x2290 <__divsf3_pse+0x56>
    228e:	bb 0b       	sbc	r27, r27
    2290:	80 2d       	mov	r24, r0
    2292:	bf 01       	movw	r22, r30
    2294:	ff 27       	eor	r31, r31
    2296:	93 58       	subi	r25, 0x83	; 131
    2298:	5f 4f       	sbci	r21, 0xFF	; 255
    229a:	3a f0       	brmi	.+14     	; 0x22aa <__divsf3_pse+0x70>
    229c:	9e 3f       	cpi	r25, 0xFE	; 254
    229e:	51 05       	cpc	r21, r1
    22a0:	78 f0       	brcs	.+30     	; 0x22c0 <__divsf3_pse+0x86>
    22a2:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_inf>
    22a6:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_szero>
    22aa:	5f 3f       	cpi	r21, 0xFF	; 255
    22ac:	e4 f3       	brlt	.-8      	; 0x22a6 <__divsf3_pse+0x6c>
    22ae:	98 3e       	cpi	r25, 0xE8	; 232
    22b0:	d4 f3       	brlt	.-12     	; 0x22a6 <__divsf3_pse+0x6c>
    22b2:	86 95       	lsr	r24
    22b4:	77 95       	ror	r23
    22b6:	67 95       	ror	r22
    22b8:	b7 95       	ror	r27
    22ba:	f7 95       	ror	r31
    22bc:	9f 5f       	subi	r25, 0xFF	; 255
    22be:	c9 f7       	brne	.-14     	; 0x22b2 <__divsf3_pse+0x78>
    22c0:	88 0f       	add	r24, r24
    22c2:	91 1d       	adc	r25, r1
    22c4:	96 95       	lsr	r25
    22c6:	87 95       	ror	r24
    22c8:	97 f9       	bld	r25, 7
    22ca:	08 95       	ret
    22cc:	e1 e0       	ldi	r30, 0x01	; 1
    22ce:	66 0f       	add	r22, r22
    22d0:	77 1f       	adc	r23, r23
    22d2:	88 1f       	adc	r24, r24
    22d4:	bb 1f       	adc	r27, r27
    22d6:	62 17       	cp	r22, r18
    22d8:	73 07       	cpc	r23, r19
    22da:	84 07       	cpc	r24, r20
    22dc:	ba 07       	cpc	r27, r26
    22de:	20 f0       	brcs	.+8      	; 0x22e8 <__divsf3_pse+0xae>
    22e0:	62 1b       	sub	r22, r18
    22e2:	73 0b       	sbc	r23, r19
    22e4:	84 0b       	sbc	r24, r20
    22e6:	ba 0b       	sbc	r27, r26
    22e8:	ee 1f       	adc	r30, r30
    22ea:	88 f7       	brcc	.-30     	; 0x22ce <__divsf3_pse+0x94>
    22ec:	e0 95       	com	r30
    22ee:	08 95       	ret

000022f0 <__fixunssfsi>:
    22f0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__fp_splitA>
    22f4:	88 f0       	brcs	.+34     	; 0x2318 <__fixunssfsi+0x28>
    22f6:	9f 57       	subi	r25, 0x7F	; 127
    22f8:	98 f0       	brcs	.+38     	; 0x2320 <__fixunssfsi+0x30>
    22fa:	b9 2f       	mov	r27, r25
    22fc:	99 27       	eor	r25, r25
    22fe:	b7 51       	subi	r27, 0x17	; 23
    2300:	b0 f0       	brcs	.+44     	; 0x232e <__fixunssfsi+0x3e>
    2302:	e1 f0       	breq	.+56     	; 0x233c <__fixunssfsi+0x4c>
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	88 1f       	adc	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	1a f0       	brmi	.+6      	; 0x2314 <__fixunssfsi+0x24>
    230e:	ba 95       	dec	r27
    2310:	c9 f7       	brne	.-14     	; 0x2304 <__fixunssfsi+0x14>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <__fixunssfsi+0x4c>
    2314:	b1 30       	cpi	r27, 0x01	; 1
    2316:	91 f0       	breq	.+36     	; 0x233c <__fixunssfsi+0x4c>
    2318:	0e 94 15 12 	call	0x242a	; 0x242a <__fp_zero>
    231c:	b1 e0       	ldi	r27, 0x01	; 1
    231e:	08 95       	ret
    2320:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_zero>
    2324:	67 2f       	mov	r22, r23
    2326:	78 2f       	mov	r23, r24
    2328:	88 27       	eor	r24, r24
    232a:	b8 5f       	subi	r27, 0xF8	; 248
    232c:	39 f0       	breq	.+14     	; 0x233c <__fixunssfsi+0x4c>
    232e:	b9 3f       	cpi	r27, 0xF9	; 249
    2330:	cc f3       	brlt	.-14     	; 0x2324 <__fixunssfsi+0x34>
    2332:	86 95       	lsr	r24
    2334:	77 95       	ror	r23
    2336:	67 95       	ror	r22
    2338:	b3 95       	inc	r27
    233a:	d9 f7       	brne	.-10     	; 0x2332 <__fixunssfsi+0x42>
    233c:	3e f4       	brtc	.+14     	; 0x234c <__fixunssfsi+0x5c>
    233e:	90 95       	com	r25
    2340:	80 95       	com	r24
    2342:	70 95       	com	r23
    2344:	61 95       	neg	r22
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	8f 4f       	sbci	r24, 0xFF	; 255
    234a:	9f 4f       	sbci	r25, 0xFF	; 255
    234c:	08 95       	ret

0000234e <__fp_cmp>:
    234e:	99 0f       	add	r25, r25
    2350:	00 08       	sbc	r0, r0
    2352:	55 0f       	add	r21, r21
    2354:	aa 0b       	sbc	r26, r26
    2356:	e0 e8       	ldi	r30, 0x80	; 128
    2358:	fe ef       	ldi	r31, 0xFE	; 254
    235a:	16 16       	cp	r1, r22
    235c:	17 06       	cpc	r1, r23
    235e:	e8 07       	cpc	r30, r24
    2360:	f9 07       	cpc	r31, r25
    2362:	c0 f0       	brcs	.+48     	; 0x2394 <__fp_cmp+0x46>
    2364:	12 16       	cp	r1, r18
    2366:	13 06       	cpc	r1, r19
    2368:	e4 07       	cpc	r30, r20
    236a:	f5 07       	cpc	r31, r21
    236c:	98 f0       	brcs	.+38     	; 0x2394 <__fp_cmp+0x46>
    236e:	62 1b       	sub	r22, r18
    2370:	73 0b       	sbc	r23, r19
    2372:	84 0b       	sbc	r24, r20
    2374:	95 0b       	sbc	r25, r21
    2376:	39 f4       	brne	.+14     	; 0x2386 <__fp_cmp+0x38>
    2378:	0a 26       	eor	r0, r26
    237a:	61 f0       	breq	.+24     	; 0x2394 <__fp_cmp+0x46>
    237c:	23 2b       	or	r18, r19
    237e:	24 2b       	or	r18, r20
    2380:	25 2b       	or	r18, r21
    2382:	21 f4       	brne	.+8      	; 0x238c <__fp_cmp+0x3e>
    2384:	08 95       	ret
    2386:	0a 26       	eor	r0, r26
    2388:	09 f4       	brne	.+2      	; 0x238c <__fp_cmp+0x3e>
    238a:	a1 40       	sbci	r26, 0x01	; 1
    238c:	a6 95       	lsr	r26
    238e:	8f ef       	ldi	r24, 0xFF	; 255
    2390:	81 1d       	adc	r24, r1
    2392:	81 1d       	adc	r24, r1
    2394:	08 95       	ret

00002396 <__fp_inf>:
    2396:	97 f9       	bld	r25, 7
    2398:	9f 67       	ori	r25, 0x7F	; 127
    239a:	80 e8       	ldi	r24, 0x80	; 128
    239c:	70 e0       	ldi	r23, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	08 95       	ret

000023a2 <__fp_nan>:
    23a2:	9f ef       	ldi	r25, 0xFF	; 255
    23a4:	80 ec       	ldi	r24, 0xC0	; 192
    23a6:	08 95       	ret

000023a8 <__fp_pscA>:
    23a8:	00 24       	eor	r0, r0
    23aa:	0a 94       	dec	r0
    23ac:	16 16       	cp	r1, r22
    23ae:	17 06       	cpc	r1, r23
    23b0:	18 06       	cpc	r1, r24
    23b2:	09 06       	cpc	r0, r25
    23b4:	08 95       	ret

000023b6 <__fp_pscB>:
    23b6:	00 24       	eor	r0, r0
    23b8:	0a 94       	dec	r0
    23ba:	12 16       	cp	r1, r18
    23bc:	13 06       	cpc	r1, r19
    23be:	14 06       	cpc	r1, r20
    23c0:	05 06       	cpc	r0, r21
    23c2:	08 95       	ret

000023c4 <__fp_round>:
    23c4:	09 2e       	mov	r0, r25
    23c6:	03 94       	inc	r0
    23c8:	00 0c       	add	r0, r0
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <__fp_round+0xc>
    23cc:	88 23       	and	r24, r24
    23ce:	52 f0       	brmi	.+20     	; 0x23e4 <__fp_round+0x20>
    23d0:	bb 0f       	add	r27, r27
    23d2:	40 f4       	brcc	.+16     	; 0x23e4 <__fp_round+0x20>
    23d4:	bf 2b       	or	r27, r31
    23d6:	11 f4       	brne	.+4      	; 0x23dc <__fp_round+0x18>
    23d8:	60 ff       	sbrs	r22, 0
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <__fp_round+0x20>
    23dc:	6f 5f       	subi	r22, 0xFF	; 255
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	8f 4f       	sbci	r24, 0xFF	; 255
    23e2:	9f 4f       	sbci	r25, 0xFF	; 255
    23e4:	08 95       	ret

000023e6 <__fp_split3>:
    23e6:	57 fd       	sbrc	r21, 7
    23e8:	90 58       	subi	r25, 0x80	; 128
    23ea:	44 0f       	add	r20, r20
    23ec:	55 1f       	adc	r21, r21
    23ee:	59 f0       	breq	.+22     	; 0x2406 <__fp_splitA+0x10>
    23f0:	5f 3f       	cpi	r21, 0xFF	; 255
    23f2:	71 f0       	breq	.+28     	; 0x2410 <__fp_splitA+0x1a>
    23f4:	47 95       	ror	r20

000023f6 <__fp_splitA>:
    23f6:	88 0f       	add	r24, r24
    23f8:	97 fb       	bst	r25, 7
    23fa:	99 1f       	adc	r25, r25
    23fc:	61 f0       	breq	.+24     	; 0x2416 <__fp_splitA+0x20>
    23fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2400:	79 f0       	breq	.+30     	; 0x2420 <__fp_splitA+0x2a>
    2402:	87 95       	ror	r24
    2404:	08 95       	ret
    2406:	12 16       	cp	r1, r18
    2408:	13 06       	cpc	r1, r19
    240a:	14 06       	cpc	r1, r20
    240c:	55 1f       	adc	r21, r21
    240e:	f2 cf       	rjmp	.-28     	; 0x23f4 <__fp_split3+0xe>
    2410:	46 95       	lsr	r20
    2412:	f1 df       	rcall	.-30     	; 0x23f6 <__fp_splitA>
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <__fp_splitA+0x30>
    2416:	16 16       	cp	r1, r22
    2418:	17 06       	cpc	r1, r23
    241a:	18 06       	cpc	r1, r24
    241c:	99 1f       	adc	r25, r25
    241e:	f1 cf       	rjmp	.-30     	; 0x2402 <__fp_splitA+0xc>
    2420:	86 95       	lsr	r24
    2422:	71 05       	cpc	r23, r1
    2424:	61 05       	cpc	r22, r1
    2426:	08 94       	sec
    2428:	08 95       	ret

0000242a <__fp_zero>:
    242a:	e8 94       	clt

0000242c <__fp_szero>:
    242c:	bb 27       	eor	r27, r27
    242e:	66 27       	eor	r22, r22
    2430:	77 27       	eor	r23, r23
    2432:	cb 01       	movw	r24, r22
    2434:	97 f9       	bld	r25, 7
    2436:	08 95       	ret

00002438 <__gesf2>:
    2438:	0e 94 a7 11 	call	0x234e	; 0x234e <__fp_cmp>
    243c:	08 f4       	brcc	.+2      	; 0x2440 <__gesf2+0x8>
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	08 95       	ret

00002442 <__mulsf3>:
    2442:	0e 94 34 12 	call	0x2468	; 0x2468 <__mulsf3x>
    2446:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__fp_round>
    244a:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__fp_pscA>
    244e:	38 f0       	brcs	.+14     	; 0x245e <__mulsf3+0x1c>
    2450:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__fp_pscB>
    2454:	20 f0       	brcs	.+8      	; 0x245e <__mulsf3+0x1c>
    2456:	95 23       	and	r25, r21
    2458:	11 f0       	breq	.+4      	; 0x245e <__mulsf3+0x1c>
    245a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_inf>
    245e:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__fp_nan>
    2462:	11 24       	eor	r1, r1
    2464:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_szero>

00002468 <__mulsf3x>:
    2468:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_split3>
    246c:	70 f3       	brcs	.-36     	; 0x244a <__mulsf3+0x8>

0000246e <__mulsf3_pse>:
    246e:	95 9f       	mul	r25, r21
    2470:	c1 f3       	breq	.-16     	; 0x2462 <__mulsf3+0x20>
    2472:	95 0f       	add	r25, r21
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	55 1f       	adc	r21, r21
    2478:	62 9f       	mul	r22, r18
    247a:	f0 01       	movw	r30, r0
    247c:	72 9f       	mul	r23, r18
    247e:	bb 27       	eor	r27, r27
    2480:	f0 0d       	add	r31, r0
    2482:	b1 1d       	adc	r27, r1
    2484:	63 9f       	mul	r22, r19
    2486:	aa 27       	eor	r26, r26
    2488:	f0 0d       	add	r31, r0
    248a:	b1 1d       	adc	r27, r1
    248c:	aa 1f       	adc	r26, r26
    248e:	64 9f       	mul	r22, r20
    2490:	66 27       	eor	r22, r22
    2492:	b0 0d       	add	r27, r0
    2494:	a1 1d       	adc	r26, r1
    2496:	66 1f       	adc	r22, r22
    2498:	82 9f       	mul	r24, r18
    249a:	22 27       	eor	r18, r18
    249c:	b0 0d       	add	r27, r0
    249e:	a1 1d       	adc	r26, r1
    24a0:	62 1f       	adc	r22, r18
    24a2:	73 9f       	mul	r23, r19
    24a4:	b0 0d       	add	r27, r0
    24a6:	a1 1d       	adc	r26, r1
    24a8:	62 1f       	adc	r22, r18
    24aa:	83 9f       	mul	r24, r19
    24ac:	a0 0d       	add	r26, r0
    24ae:	61 1d       	adc	r22, r1
    24b0:	22 1f       	adc	r18, r18
    24b2:	74 9f       	mul	r23, r20
    24b4:	33 27       	eor	r19, r19
    24b6:	a0 0d       	add	r26, r0
    24b8:	61 1d       	adc	r22, r1
    24ba:	23 1f       	adc	r18, r19
    24bc:	84 9f       	mul	r24, r20
    24be:	60 0d       	add	r22, r0
    24c0:	21 1d       	adc	r18, r1
    24c2:	82 2f       	mov	r24, r18
    24c4:	76 2f       	mov	r23, r22
    24c6:	6a 2f       	mov	r22, r26
    24c8:	11 24       	eor	r1, r1
    24ca:	9f 57       	subi	r25, 0x7F	; 127
    24cc:	50 40       	sbci	r21, 0x00	; 0
    24ce:	9a f0       	brmi	.+38     	; 0x24f6 <__mulsf3_pse+0x88>
    24d0:	f1 f0       	breq	.+60     	; 0x250e <__mulsf3_pse+0xa0>
    24d2:	88 23       	and	r24, r24
    24d4:	4a f0       	brmi	.+18     	; 0x24e8 <__mulsf3_pse+0x7a>
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	bb 1f       	adc	r27, r27
    24dc:	66 1f       	adc	r22, r22
    24de:	77 1f       	adc	r23, r23
    24e0:	88 1f       	adc	r24, r24
    24e2:	91 50       	subi	r25, 0x01	; 1
    24e4:	50 40       	sbci	r21, 0x00	; 0
    24e6:	a9 f7       	brne	.-22     	; 0x24d2 <__mulsf3_pse+0x64>
    24e8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ea:	51 05       	cpc	r21, r1
    24ec:	80 f0       	brcs	.+32     	; 0x250e <__mulsf3_pse+0xa0>
    24ee:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__fp_inf>
    24f2:	0c 94 16 12 	jmp	0x242c	; 0x242c <__fp_szero>
    24f6:	5f 3f       	cpi	r21, 0xFF	; 255
    24f8:	e4 f3       	brlt	.-8      	; 0x24f2 <__mulsf3_pse+0x84>
    24fa:	98 3e       	cpi	r25, 0xE8	; 232
    24fc:	d4 f3       	brlt	.-12     	; 0x24f2 <__mulsf3_pse+0x84>
    24fe:	86 95       	lsr	r24
    2500:	77 95       	ror	r23
    2502:	67 95       	ror	r22
    2504:	b7 95       	ror	r27
    2506:	f7 95       	ror	r31
    2508:	e7 95       	ror	r30
    250a:	9f 5f       	subi	r25, 0xFF	; 255
    250c:	c1 f7       	brne	.-16     	; 0x24fe <__mulsf3_pse+0x90>
    250e:	fe 2b       	or	r31, r30
    2510:	88 0f       	add	r24, r24
    2512:	91 1d       	adc	r25, r1
    2514:	96 95       	lsr	r25
    2516:	87 95       	ror	r24
    2518:	97 f9       	bld	r25, 7
    251a:	08 95       	ret

0000251c <__divmodsi4>:
    251c:	05 2e       	mov	r0, r21
    251e:	97 fb       	bst	r25, 7
    2520:	1e f4       	brtc	.+6      	; 0x2528 <__divmodsi4+0xc>
    2522:	00 94       	com	r0
    2524:	0e 94 a5 12 	call	0x254a	; 0x254a <__negsi2>
    2528:	57 fd       	sbrc	r21, 7
    252a:	07 d0       	rcall	.+14     	; 0x253a <__divmodsi4_neg2>
    252c:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodsi4>
    2530:	07 fc       	sbrc	r0, 7
    2532:	03 d0       	rcall	.+6      	; 0x253a <__divmodsi4_neg2>
    2534:	4e f4       	brtc	.+18     	; 0x2548 <__divmodsi4_exit>
    2536:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__negsi2>

0000253a <__divmodsi4_neg2>:
    253a:	50 95       	com	r21
    253c:	40 95       	com	r20
    253e:	30 95       	com	r19
    2540:	21 95       	neg	r18
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	4f 4f       	sbci	r20, 0xFF	; 255
    2546:	5f 4f       	sbci	r21, 0xFF	; 255

00002548 <__divmodsi4_exit>:
    2548:	08 95       	ret

0000254a <__negsi2>:
    254a:	90 95       	com	r25
    254c:	80 95       	com	r24
    254e:	70 95       	com	r23
    2550:	61 95       	neg	r22
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	8f 4f       	sbci	r24, 0xFF	; 255
    2556:	9f 4f       	sbci	r25, 0xFF	; 255
    2558:	08 95       	ret

0000255a <__udivmodsi4>:
    255a:	a1 e2       	ldi	r26, 0x21	; 33
    255c:	1a 2e       	mov	r1, r26
    255e:	aa 1b       	sub	r26, r26
    2560:	bb 1b       	sub	r27, r27
    2562:	fd 01       	movw	r30, r26
    2564:	0d c0       	rjmp	.+26     	; 0x2580 <__udivmodsi4_ep>

00002566 <__udivmodsi4_loop>:
    2566:	aa 1f       	adc	r26, r26
    2568:	bb 1f       	adc	r27, r27
    256a:	ee 1f       	adc	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	a2 17       	cp	r26, r18
    2570:	b3 07       	cpc	r27, r19
    2572:	e4 07       	cpc	r30, r20
    2574:	f5 07       	cpc	r31, r21
    2576:	20 f0       	brcs	.+8      	; 0x2580 <__udivmodsi4_ep>
    2578:	a2 1b       	sub	r26, r18
    257a:	b3 0b       	sbc	r27, r19
    257c:	e4 0b       	sbc	r30, r20
    257e:	f5 0b       	sbc	r31, r21

00002580 <__udivmodsi4_ep>:
    2580:	66 1f       	adc	r22, r22
    2582:	77 1f       	adc	r23, r23
    2584:	88 1f       	adc	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	1a 94       	dec	r1
    258a:	69 f7       	brne	.-38     	; 0x2566 <__udivmodsi4_loop>
    258c:	60 95       	com	r22
    258e:	70 95       	com	r23
    2590:	80 95       	com	r24
    2592:	90 95       	com	r25
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	bd 01       	movw	r22, r26
    259a:	cf 01       	movw	r24, r30
    259c:	08 95       	ret

0000259e <do_rand>:
    259e:	8f 92       	push	r8
    25a0:	9f 92       	push	r9
    25a2:	af 92       	push	r10
    25a4:	bf 92       	push	r11
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	ec 01       	movw	r28, r24
    25b4:	68 81       	ld	r22, Y
    25b6:	79 81       	ldd	r23, Y+1	; 0x01
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	61 15       	cp	r22, r1
    25be:	71 05       	cpc	r23, r1
    25c0:	81 05       	cpc	r24, r1
    25c2:	91 05       	cpc	r25, r1
    25c4:	21 f4       	brne	.+8      	; 0x25ce <do_rand+0x30>
    25c6:	64 e2       	ldi	r22, 0x24	; 36
    25c8:	79 ed       	ldi	r23, 0xD9	; 217
    25ca:	8b e5       	ldi	r24, 0x5B	; 91
    25cc:	97 e0       	ldi	r25, 0x07	; 7
    25ce:	2d e1       	ldi	r18, 0x1D	; 29
    25d0:	33 ef       	ldi	r19, 0xF3	; 243
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	0e 94 8e 12 	call	0x251c	; 0x251c <__divmodsi4>
    25da:	49 01       	movw	r8, r18
    25dc:	5a 01       	movw	r10, r20
    25de:	9b 01       	movw	r18, r22
    25e0:	ac 01       	movw	r20, r24
    25e2:	a7 ea       	ldi	r26, 0xA7	; 167
    25e4:	b1 e4       	ldi	r27, 0x41	; 65
    25e6:	0e 94 29 13 	call	0x2652	; 0x2652 <__muluhisi3>
    25ea:	6b 01       	movw	r12, r22
    25ec:	7c 01       	movw	r14, r24
    25ee:	ac ee       	ldi	r26, 0xEC	; 236
    25f0:	b4 ef       	ldi	r27, 0xF4	; 244
    25f2:	a5 01       	movw	r20, r10
    25f4:	94 01       	movw	r18, r8
    25f6:	0e 94 37 13 	call	0x266e	; 0x266e <__mulohisi3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8c 0d       	add	r24, r12
    2600:	9d 1d       	adc	r25, r13
    2602:	ae 1d       	adc	r26, r14
    2604:	bf 1d       	adc	r27, r15
    2606:	b7 ff       	sbrs	r27, 7
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <do_rand+0x72>
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	a1 09       	sbc	r26, r1
    260e:	b0 48       	sbci	r27, 0x80	; 128
    2610:	88 83       	st	Y, r24
    2612:	99 83       	std	Y+1, r25	; 0x01
    2614:	aa 83       	std	Y+2, r26	; 0x02
    2616:	bb 83       	std	Y+3, r27	; 0x03
    2618:	9f 77       	andi	r25, 0x7F	; 127
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	df 90       	pop	r13
    2624:	cf 90       	pop	r12
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	9f 90       	pop	r9
    262c:	8f 90       	pop	r8
    262e:	08 95       	ret

00002630 <rand_r>:
    2630:	0c 94 cf 12 	jmp	0x259e	; 0x259e <do_rand>

00002634 <rand>:
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	0c 94 cf 12 	jmp	0x259e	; 0x259e <do_rand>

0000263c <srand>:
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2644:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2648:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    264c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2650:	08 95       	ret

00002652 <__muluhisi3>:
    2652:	0e 94 3c 13 	call	0x2678	; 0x2678 <__umulhisi3>
    2656:	a5 9f       	mul	r26, r21
    2658:	90 0d       	add	r25, r0
    265a:	b4 9f       	mul	r27, r20
    265c:	90 0d       	add	r25, r0
    265e:	a4 9f       	mul	r26, r20
    2660:	80 0d       	add	r24, r0
    2662:	91 1d       	adc	r25, r1
    2664:	11 24       	eor	r1, r1
    2666:	08 95       	ret

00002668 <__mulshisi3>:
    2668:	b7 ff       	sbrs	r27, 7
    266a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__muluhisi3>

0000266e <__mulohisi3>:
    266e:	0e 94 29 13 	call	0x2652	; 0x2652 <__muluhisi3>
    2672:	82 1b       	sub	r24, r18
    2674:	93 0b       	sbc	r25, r19
    2676:	08 95       	ret

00002678 <__umulhisi3>:
    2678:	a2 9f       	mul	r26, r18
    267a:	b0 01       	movw	r22, r0
    267c:	b3 9f       	mul	r27, r19
    267e:	c0 01       	movw	r24, r0
    2680:	a3 9f       	mul	r26, r19
    2682:	70 0d       	add	r23, r0
    2684:	81 1d       	adc	r24, r1
    2686:	11 24       	eor	r1, r1
    2688:	91 1d       	adc	r25, r1
    268a:	b2 9f       	mul	r27, r18
    268c:	70 0d       	add	r23, r0
    268e:	81 1d       	adc	r24, r1
    2690:	11 24       	eor	r1, r1
    2692:	91 1d       	adc	r25, r1
    2694:	08 95       	ret

00002696 <_exit>:
    2696:	f8 94       	cli

00002698 <__stop_program>:
    2698:	ff cf       	rjmp	.-2      	; 0x2698 <__stop_program>
