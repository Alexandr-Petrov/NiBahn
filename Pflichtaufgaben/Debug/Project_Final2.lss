
Project_Final2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  000027d6  0000286a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  008003a4  008003a4  00002b0e  2**0
                  ALLOC
  3 .stab         00002574  00000000  00000000  00002b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013be  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006442  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006454  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00007342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_17>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	32 2e       	mov	r3, r18
      8e:	31 31       	cpi	r19, 0x11	; 17
	...

00000091 <bot_lib_revision>:
	...

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e6 ed       	ldi	r30, 0xD6	; 214
      a6:	f7 e2       	ldi	r31, 0x27	; 39
      a8:	00 e0       	ldi	r16, 0x00	; 0
      aa:	0b bf       	out	0x3b, r16	; 59
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
      ae:	07 90       	elpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a4 3a       	cpi	r26, 0xA4	; 164
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
      b8:	24 e0       	ldi	r18, 0x04	; 4
      ba:	a4 ea       	ldi	r26, 0xA4	; 164
      bc:	b3 e0       	ldi	r27, 0x03	; 3
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a3 37       	cpi	r26, 0x73	; 115
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
      cc:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <findDirection>:
 *
 * Function for guiding the Nibo by determining the position of hindrances
 *
*/
void findDirection()
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <findDirection+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	int r;
	drive(); 	///Nibo goes forward
      de:	0e 94 6e 02 	call	0x4dc	; 0x4dc <drive>
	showNibo(); ///Shows Nibo on display
      e2:	0e 94 43 03 	call	0x686	; 0x686 <showNibo>



	///Tunnel
	///Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      e6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
      ea:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
      ee:	81 15       	cp	r24, r1
      f0:	95 4b       	sbci	r25, 0xB5	; 181
      f2:	a0 f0       	brcs	.+40     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 200 &&
      f4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
      f8:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>



	///Tunnel
	///Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      fc:	81 15       	cp	r24, r1
      fe:	99 4c       	sbci	r25, 0xC9	; 201
     100:	68 f0       	brcs	.+26     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 200 &&
		copro_distance[4]/256 > 180)
     102:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     106:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>


	///Tunnel
	///Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
		copro_distance[2]/256 > 200 &&
     10a:	81 15       	cp	r24, r1
     10c:	95 4b       	sbci	r25, 0xB5	; 181
     10e:	30 f0       	brcs	.+12     	; 0x11c <findDirection+0x48>
		copro_distance[4]/256 > 180)
		{
			flag=1; /// Set flag to 1
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
     118:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
		}
	///Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     11c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     120:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     124:	8f 3f       	cpi	r24, 0xFF	; 255
     126:	91 05       	cpc	r25, r1
     128:	81 f1       	breq	.+96     	; 0x18a <findDirection+0xb6>
     12a:	78 f1       	brcs	.+94     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
     12c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     130:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		copro_distance[4]/256 > 180)
		{
			flag=1; /// Set flag to 1
		}
	///Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     134:	81 15       	cp	r24, r1
     136:	93 43       	sbci	r25, 0x33	; 51
     138:	40 f1       	brcs	.+80     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
			{
				timer++; ///counter increases
     13a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     13e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     148:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     14c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     150:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	11 f5       	brne	.+68     	; 0x19c <findDirection+0xc8>
     158:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     15c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     160:	02 96       	adiw	r24, 0x02	; 2
     162:	e1 f0       	breq	.+56     	; 0x19c <findDirection+0xc8>
				{
					goBack(); ///Nibo goes back
     164:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <goBack>
					LEDShow('r', 0, 1); // Sets LEDs 0-1 to red
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e7       	ldi	r24, 0x72	; 114
     172:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
					timer--; ///counter decreases
     176:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     17a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     184:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     188:	09 c0       	rjmp	.+18     	; 0x19c <findDirection+0xc8>
				}
			}
	///if Nibo left the tunnel
	else
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
     19a:	01 c0       	rjmp	.+2      	; 0x19e <findDirection+0xca>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     19c:	00 00       	nop
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     19e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     1a2:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     1a6:	81 15       	cp	r24, r1
     1a8:	93 43       	sbci	r25, 0x33	; 51
     1aa:	40 f1       	brcs	.+80     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
     1ac:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     1b0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     1b4:	81 15       	cp	r24, r1
     1b6:	92 43       	sbci	r25, 0x32	; 50
     1b8:	08 f5       	brcc	.+66     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
		flag==1)
     1ba:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     1be:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
		copro_distance[4]/256 < 50 &&
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	d9 f4       	brne	.+54     	; 0x1fc <findDirection+0x128>
		flag==1)
		{
			copro_setTargetRel(-27, 27, 15); ///Sets target position for wheels. Nibo turns left
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	6b e1       	ldi	r22, 0x1B	; 27
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	85 ee       	ldi	r24, 0xE5	; 229
     1d0:	9f ef       	ldi	r25, 0xFF	; 255
     1d2:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	87 e6       	ldi	r24, 0x67	; 103
     1e0:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     1e4:	88 ee       	ldi	r24, 0xE8	; 232
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
			flag=0; /// Set flag to 0
     1ec:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     1f0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// Reset counter
     1f4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     1f8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     1fc:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     200:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     204:	81 15       	cp	r24, r1
     206:	93 43       	sbci	r25, 0x33	; 51
     208:	40 f1       	brcs	.+80     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
     20a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     20e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			flag=0; /// Set flag to 0
			timer=0; /// Reset counter

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     212:	81 15       	cp	r24, r1
     214:	92 43       	sbci	r25, 0x32	; 50
     216:	08 f5       	brcc	.+66     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
		flag==1)
     218:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     21c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0; /// Reset counter

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
		copro_distance[0]/256 < 50 &&
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	d9 f4       	brne	.+54     	; 0x25a <findDirection+0x186>
		flag==1)
		{
			copro_setTargetRel(27, -27, 15);///Sets target position for wheels. Nibo turns right
     224:	4f e0       	ldi	r20, 0x0F	; 15
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	65 ee       	ldi	r22, 0xE5	; 229
     22a:	7f ef       	ldi	r23, 0xFF	; 255
     22c:	8b e1       	ldi	r24, 0x1B	; 27
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	87 e6       	ldi	r24, 0x67	; 103
     23e:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     242:	88 ee       	ldi	r24, 0xE8	; 232
     244:	93 e0       	ldi	r25, 0x03	; 3
     246:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
			flag=0; ///  Set flag to 0
     24a:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     24e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// reset counter
     252:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     256:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     25a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     25e:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     262:	81 15       	cp	r24, r1
     264:	92 43       	sbci	r25, 0x32	; 50
     266:	08 f0       	brcs	.+2      	; 0x26a <findDirection+0x196>
     268:	41 c0       	rjmp	.+130    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
     26a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     26e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			delay(1000); /// wait 1 second, Nibo turns
			flag=0; ///  Set flag to 0
			timer=0; /// reset counter
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     272:	81 15       	cp	r24, r1
     274:	92 43       	sbci	r25, 0x32	; 50
     276:	d0 f5       	brcc	.+116    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
		flag==1)
     278:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     27c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			flag=0; ///  Set flag to 0
			timer=0; /// reset counter
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
		copro_distance[0]/256 < 50 &&
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f5       	brne	.+104    	; 0x2ec <findDirection+0x218>
		flag==1)
		{
			r = rand() % 2; ///generate a number between 0 and 1
     284:	0e 94 b8 13 	call	0x2770	; 0x2770 <rand>
     288:	81 70       	andi	r24, 0x01	; 1
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	99 23       	and	r25, r25
     28e:	24 f4       	brge	.+8      	; 0x298 <findDirection+0x1c4>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	8e 6f       	ori	r24, 0xFE	; 254
     294:	9f 6f       	ori	r25, 0xFF	; 255
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
			if(r==0){
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	89 2b       	or	r24, r25
     2a2:	49 f4       	brne	.+18     	; 0x2b6 <findDirection+0x1e2>
				copro_setTargetRel(-27, 27, 15);//Sets target position for wheels. Nibo turns left
     2a4:	4f e0       	ldi	r20, 0x0F	; 15
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	6b e1       	ldi	r22, 0x1B	; 27
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	85 ee       	ldi	r24, 0xE5	; 229
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
     2b0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <findDirection+0x1f2>
			}
			else{
				copro_setTargetRel(27, -27, 15); ///Sets target position for wheels. Nibo turns right
     2b6:	4f e0       	ldi	r20, 0x0F	; 15
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	65 ee       	ldi	r22, 0xE5	; 229
     2bc:	7f ef       	ldi	r23, 0xFF	; 255
     2be:	8b e1       	ldi	r24, 0x1B	; 27
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
			}
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e6       	ldi	r24, 0x67	; 103
     2d0:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     2d4:	88 ee       	ldi	r24, 0xE8	; 232
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
			flag=0; /// Set flag to 0
     2dc:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     2e0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0;/// reset counter
     2e4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     2e8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
     2ec:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     2f0:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     2f4:	81 15       	cp	r24, r1
     2f6:	97 49       	sbci	r25, 0x97	; 151
     2f8:	80 f1       	brcs	.+96     	; 0x35a <findDirection+0x286>
			copro_distance[1]/256 > 150 &&
     2fa:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     2fe:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
			delay(1000); /// wait 1 second, Nibo turns
			flag=0; /// Set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
     302:	81 15       	cp	r24, r1
     304:	97 49       	sbci	r25, 0x97	; 151
     306:	48 f1       	brcs	.+82     	; 0x35a <findDirection+0x286>
			copro_distance[1]/256 > 150 &&
			copro_distance[2]/256 > 170 &&
     308:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     30c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
			flag=0; /// Set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 150 &&
     310:	81 15       	cp	r24, r1
     312:	9b 4a       	sbci	r25, 0xAB	; 171
     314:	10 f1       	brcs	.+68     	; 0x35a <findDirection+0x286>
			copro_distance[2]/256 > 170 &&
			flag==0)
     316:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     31a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 150 &&
			copro_distance[2]/256 > 170 &&
     31e:	89 2b       	or	r24, r25
     320:	e1 f4       	brne	.+56     	; 0x35a <findDirection+0x286>
			flag==0)
		{
			LEDShow('r', 5, 7);
     322:	47 e0       	ldi	r20, 0x07	; 7
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	65 e0       	ldi	r22, 0x05	; 5
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	82 e7       	ldi	r24, 0x72	; 114
     32c:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnLeft();
     330:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <turnLeft>
			HindranceShow(40, 50);//Show the position of Hindrance
     334:	62 e3       	ldi	r22, 0x32	; 50
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
			HindranceShow(40, 30);
     340:	6e e1       	ldi	r22, 0x1E	; 30
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	88 e2       	ldi	r24, 0x28	; 40
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
			HindranceShow(65, 50);
     34c:	62 e3       	ldi	r22, 0x32	; 50
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	81 e4       	ldi	r24, 0x41	; 65
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
     358:	07 c0       	rjmp	.+14     	; 0x368 <findDirection+0x294>
		}
		else
		{
			LEDShow('g', 5, 7);
     35a:	47 e0       	ldi	r20, 0x07	; 7
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	65 e0       	ldi	r22, 0x05	; 5
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	87 e6       	ldi	r24, 0x67	; 103
     364:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
		}

		///Hindrance is top-right
		if ( copro_distance[1]/256 > 150 &&
     368:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     36c:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     370:	81 15       	cp	r24, r1
     372:	97 49       	sbci	r25, 0x97	; 151
     374:	b0 f0       	brcs	.+44     	; 0x3a2 <findDirection+0x2ce>
			flag==0 )
     376:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     37a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		{
			LEDShow('g', 5, 7);
		}

		///Hindrance is top-right
		if ( copro_distance[1]/256 > 150 &&
     37e:	89 2b       	or	r24, r25
     380:	81 f4       	brne	.+32     	; 0x3a2 <findDirection+0x2ce>
			flag==0 )
		{
			LEDShow('r', 6, 6);
     382:	46 e0       	ldi	r20, 0x06	; 6
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	66 e0       	ldi	r22, 0x06	; 6
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	82 e7       	ldi	r24, 0x72	; 114
     38c:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnHalfLeft();
     390:	0e 94 92 02 	call	0x524	; 0x524 <turnHalfLeft>
			HindranceShow(40, 50); ///Show the position of Hindrance
     394:	62 e3       	ldi	r22, 0x32	; 50
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	88 e2       	ldi	r24, 0x28	; 40
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <findDirection+0x2dc>
	     }
		else {LEDShow('g', 6, 6);}
     3a2:	46 e0       	ldi	r20, 0x06	; 6
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	66 e0       	ldi	r22, 0x06	; 6
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	87 e6       	ldi	r24, 0x67	; 103
     3ac:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     3b0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     3b4:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     3b8:	81 15       	cp	r24, r1
     3ba:	97 49       	sbci	r25, 0x97	; 151
     3bc:	80 f1       	brcs	.+96     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			copro_distance[3]/256 > 150 &&
     3be:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     3c2:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
			HindranceShow(40, 50); ///Show the position of Hindrance
	     }
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     3c6:	81 15       	cp	r24, r1
     3c8:	97 49       	sbci	r25, 0x97	; 151
     3ca:	48 f1       	brcs	.+82     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			copro_distance[3]/256 > 150 &&
			copro_distance[2]/256 > 170 &&
     3cc:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     3d0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
	     }
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 150 &&
     3d4:	81 15       	cp	r24, r1
     3d6:	9b 4a       	sbci	r25, 0xAB	; 171
     3d8:	10 f1       	brcs	.+68     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			copro_distance[2]/256 > 170 &&
			flag==0)
     3da:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     3de:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 150 &&
			copro_distance[2]/256 > 170 &&
     3e2:	89 2b       	or	r24, r25
     3e4:	e1 f4       	brne	.+56     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			flag==0)
		{
			LEDShow('r', 2, 4);
     3e6:	44 e0       	ldi	r20, 0x04	; 4
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	62 e0       	ldi	r22, 0x02	; 2
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	82 e7       	ldi	r24, 0x72	; 114
     3f0:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnRight();
     3f4:	0e 94 a8 02 	call	0x550	; 0x550 <turnRight>
			HindranceShow(90, 50);//Show the position of Hindrance
     3f8:	62 e3       	ldi	r22, 0x32	; 50
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	8a e5       	ldi	r24, 0x5A	; 90
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
			HindranceShow(90, 30);
     404:	6e e1       	ldi	r22, 0x1E	; 30
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8a e5       	ldi	r24, 0x5A	; 90
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
			HindranceShow(65, 50);
     410:	62 e3       	ldi	r22, 0x32	; 50
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	81 e4       	ldi	r24, 0x41	; 65
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
     41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		}
		else
		{
			LEDShow('g', 2, 4);
     41e:	44 e0       	ldi	r20, 0x04	; 4
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	62 e0       	ldi	r22, 0x02	; 2
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	87 e6       	ldi	r24, 0x67	; 103
     428:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 150 &&
     42c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     430:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     434:	81 15       	cp	r24, r1
     436:	97 49       	sbci	r25, 0x97	; 151
     438:	b0 f0       	brcs	.+44     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		    flag==0)
     43a:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     43e:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else
		{
			LEDShow('g', 2, 4);
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 150 &&
     442:	89 2b       	or	r24, r25
     444:	81 f4       	brne	.+32     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		    flag==0)
		{
			LEDShow('r', 3, 3);
     446:	43 e0       	ldi	r20, 0x03	; 3
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	63 e0       	ldi	r22, 0x03	; 3
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	82 e7       	ldi	r24, 0x72	; 114
     450:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnHalfRight();
     454:	0e 94 be 02 	call	0x57c	; 0x57c <turnHalfRight>
			HindranceShow(85, 50);//Show the position of Hindrance
     458:	62 e3       	ldi	r22, 0x32	; 50
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	85 e5       	ldi	r24, 0x55	; 85
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <HindranceShow>
     464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		 }
		else {LEDShow('g', 3, 3);}
     466:	43 e0       	ldi	r20, 0x03	; 3
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	63 e0       	ldi	r22, 0x03	; 3
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	87 e6       	ldi	r24, 0x67	; 103
     470:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>

		///Hindrance is ahead
		if (copro_distance[2]/256 > 100 && copro_distance[1]/256 > 60)
     474:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     478:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     47c:	81 15       	cp	r24, r1
     47e:	95 46       	sbci	r25, 0x65	; 101
     480:	80 f0       	brcs	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     482:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     486:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     48a:	81 15       	cp	r24, r1
     48c:	9d 43       	sbci	r25, 0x3D	; 61
     48e:	48 f0       	brcs	.+18     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			LEDShow('r', 4, 5);
     490:	45 e0       	ldi	r20, 0x05	; 5
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	82 e7       	ldi	r24, 0x72	; 114
     49a:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnLeft();
     49e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <turnLeft>
		}
		if (copro_distance[2]/256 > 100 && copro_distance[3]/256 > 60)
     4a2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     4a6:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     4aa:	81 15       	cp	r24, r1
     4ac:	95 46       	sbci	r25, 0x65	; 101
     4ae:	80 f0       	brcs	.+32     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4b0:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     4b4:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     4b8:	81 15       	cp	r24, r1
     4ba:	9d 43       	sbci	r25, 0x3D	; 61
     4bc:	48 f0       	brcs	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		{
			LEDShow('r', 4, 5);
     4be:	45 e0       	ldi	r20, 0x05	; 5
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	64 e0       	ldi	r22, 0x04	; 4
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	82 e7       	ldi	r24, 0x72	; 114
     4c8:	0e 94 0b 03 	call	0x616	; 0x616 <LEDShow>
			turnRight();
     4cc:	0e 94 a8 02 	call	0x550	; 0x550 <turnRight>
		}
}
     4d0:	00 00       	nop
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <drive>:
 * @brief
 *
 * Nibo goes forward
 */
void drive()
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(10, 10); ///Set same speed for the two motors. The wheels spin forward
     4e4:	6a e0       	ldi	r22, 0x0A	; 10
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	8a e0       	ldi	r24, 0x0A	; 10
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 48 10 	call	0x2090	; 0x2090 <copro_setSpeed>
}
     4f0:	00 00       	nop
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <turnLeft>:
 * @brief
 *
 * Nibo turns left
 */
void turnLeft()
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-27, 27, 15); ///rotate 90 degrees left with 15 ticks/s
     500:	4f e0       	ldi	r20, 0x0F	; 15
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	6b e1       	ldi	r22, 0x1B	; 27
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	85 ee       	ldi	r24, 0xE5	; 229
     50a:	9f ef       	ldi	r25, 0xFF	; 255
     50c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
	copro_resetOdometry(0, 0);//Reset odometry values to specified values (0)
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 95 10 	call	0x212a	; 0x212a <copro_resetOdometry>
}
     51c:	00 00       	nop
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <turnHalfLeft>:
 * @brief
 *
 * Nibo turns half left
 */
void turnHalfLeft()
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-13, 13, 15); ///rotate 45 degrees left with 15 ticks/s
     52c:	4f e0       	ldi	r20, 0x0F	; 15
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	6d e0       	ldi	r22, 0x0D	; 13
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	83 ef       	ldi	r24, 0xF3	; 243
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 95 10 	call	0x212a	; 0x212a <copro_resetOdometry>
}
     548:	00 00       	nop
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <turnRight>:
 * @brief
 *
 * Nibo turns right
 */
void turnRight()
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(27, -27, 15); ///rotate 90 degrees right with 15 ticks/s
     558:	4f e0       	ldi	r20, 0x0F	; 15
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	65 ee       	ldi	r22, 0xE5	; 229
     55e:	7f ef       	ldi	r23, 0xFF	; 255
     560:	8b e1       	ldi	r24, 0x1B	; 27
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 95 10 	call	0x212a	; 0x212a <copro_resetOdometry>
}
     574:	00 00       	nop
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <turnHalfRight>:
 * @brief
 *
 * Nibo turns half right
 */
void turnHalfRight()
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(13, -13, 15); ///rotate 45 degrees right with 15 ticks/s
     584:	4f e0       	ldi	r20, 0x0F	; 15
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	63 ef       	ldi	r22, 0xF3	; 243
     58a:	7f ef       	ldi	r23, 0xFF	; 255
     58c:	8d e0       	ldi	r24, 0x0D	; 13
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 6e 10 	call	0x20dc	; 0x20dc <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 95 10 	call	0x212a	; 0x212a <copro_resetOdometry>
}
     5a0:	00 00       	nop
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <goBack>:
 *  @brief
 *
 * Nibo goes back
 */
void goBack()
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(-10, -10); ///Set same speed for the two motors. The wheels spin back
     5b0:	66 ef       	ldi	r22, 0xF6	; 246
     5b2:	7f ef       	ldi	r23, 0xFF	; 255
     5b4:	86 ef       	ldi	r24, 0xF6	; 246
     5b6:	9f ef       	ldi	r25, 0xFF	; 255
     5b8:	0e 94 48 10 	call	0x2090	; 0x2090 <copro_setSpeed>
	copro_resetOdometry(0, 0);
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 95 10 	call	0x212a	; 0x212a <copro_resetOdometry>
}
     5c8:	00 00       	nop
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <main>:

/* @brief
 *
 * Main Function
*/
int main() {
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62

		/// turn on the interrupts. Needed for the PWM
		sei();
     5d8:	78 94       	sei

		/// initialization of the robot (always necessary)
		bot_init();
     5da:	0e 94 e6 10 	call	0x21cc	; 0x21cc <bot_init>

		/// Initialization of the SPI interface
		spi_init();
     5de:	0e 94 11 09 	call	0x1222	; 0x1222 <spi_init>

		/// Initialization of the speaker
		sound_init();
     5e2:	0e 94 43 11 	call	0x2286	; 0x2286 <sound_init>

		/// Initialization of the LEDs
		leds_init();
     5e6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <leds_init>

		/// Initialization of the pulse width modulation
		pwm_init();
     5ea:	0e 94 2c 08 	call	0x1058	; 0x1058 <pwm_init>

		/// Initialization of display and graphics functions
		display_init();
     5ee:	0e 94 ca 07 	call	0xf94	; 0xf94 <display_init>
		gfx_init();
     5f2:	0e 94 ad 0b 	call	0x175a	; 0x175a <gfx_init>

		/// Switch on distance measurement
		copro_ir_startMeasure();
     5f6:	0e 94 c9 10 	call	0x2192	; 0x2192 <copro_ir_startMeasure>

		/// Function for launching a program by a user
		start();
     5fa:	0e 94 63 06 	call	0xcc6	; 0xcc6 <start>

		/// endless loop
		while (1 == 1) {
			/// empty the display
			gfx_fill(0);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 2a 0a 	call	0x1454	; 0x1454 <gfx_fill>

			/// update coprocessor values
			copro_update();
     604:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <copro_update>
			/// Function for navigation
			findDirection();
     608:	0e 94 6a 00 	call	0xd4	; 0xd4 <findDirection>

			/// wait 0,5s
			delay(500);
     60c:	84 ef       	ldi	r24, 0xF4	; 244
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
		}
     614:	f4 cf       	rjmp	.-24     	; 0x5fe <main+0x2e>

00000616 <LEDShow>:
 *
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	27 97       	sbiw	r28, 0x07	; 7
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	7d 83       	std	Y+5, r23	; 0x05
     62e:	6c 83       	std	Y+4, r22	; 0x04
     630:	5f 83       	std	Y+7, r21	; 0x07
     632:	4e 83       	std	Y+6, r20	; 0x06
	for(int i=start; i<=end; i++){
     634:	8c 81       	ldd	r24, Y+4	; 0x04
     636:	9d 81       	ldd	r25, Y+5	; 0x05
     638:	9a 83       	std	Y+2, r25	; 0x02
     63a:	89 83       	std	Y+1, r24	; 0x01
     63c:	13 c0       	rjmp	.+38     	; 0x664 <LEDShow+0x4e>
		/// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///Set LED number i to red
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	82 37       	cpi	r24, 0x72	; 114
     642:	31 f4       	brne	.+12     	; 0x650 <LEDShow+0x3a>
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	68 2f       	mov	r22, r24
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
     64e:	05 c0       	rjmp	.+10     	; 0x65a <LEDShow+0x44>
		else leds_set_status(LEDS_GREEN, i); ///Set LED number i to green
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	68 2f       	mov	r22, r24
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
	for(int i=start; i<=end; i++){
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	9a 83       	std	Y+2, r25	; 0x02
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	29 81       	ldd	r18, Y+1	; 0x01
     666:	3a 81       	ldd	r19, Y+2	; 0x02
     668:	8e 81       	ldd	r24, Y+6	; 0x06
     66a:	9f 81       	ldd	r25, Y+7	; 0x07
     66c:	82 17       	cp	r24, r18
     66e:	93 07       	cpc	r25, r19
     670:	34 f7       	brge	.-52     	; 0x63e <LEDShow+0x28>
		/// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///Set LED number i to red
		else leds_set_status(LEDS_GREEN, i); ///Set LED number i to green
	}
}
     672:	00 00       	nop
     674:	27 96       	adiw	r28, 0x07	; 7
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <showNibo>:
 * @brief
 *
 * Function for showing Nibo on display
 */
void showNibo()
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
	/// Nibo's picture
	gfx_move(53, 12); ///Sets the point from which to draw
     68e:	6c e0       	ldi	r22, 0x0C	; 12
     690:	85 e3       	ldi	r24, 0x35	; 53
     692:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_box(4, 6);    ///Draws the box. First argument is width=4, second is height=6
     696:	66 e0       	ldi	r22, 0x06	; 6
     698:	84 e0       	ldi	r24, 0x04	; 4
     69a:	0e 94 08 0c 	call	0x1810	; 0x1810 <gfx_box>

	gfx_move(75, 12); ///Sets the point from which to draw
     69e:	6c e0       	ldi	r22, 0x0C	; 12
     6a0:	8b e4       	ldi	r24, 0x4B	; 75
     6a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_box(4, 6);	  ///Draws the box. First argument is width=4, second is height=6
     6a6:	66 e0       	ldi	r22, 0x06	; 6
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	0e 94 08 0c 	call	0x1810	; 0x1810 <gfx_box>

	gfx_move(59, 14); ///Sets the point from which to draw
     6ae:	6e e0       	ldi	r22, 0x0E	; 14
     6b0:	8b e3       	ldi	r24, 0x3B	; 59
     6b2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_box(14, 8);	  ///Draws the box. First argument is width=14, second is height=6
     6b6:	68 e0       	ldi	r22, 0x08	; 8
     6b8:	8e e0       	ldi	r24, 0x0E	; 14
     6ba:	0e 94 08 0c 	call	0x1810	; 0x1810 <gfx_box>

	gfx_move(61, 22); ///Sets the point from which to draw
     6be:	66 e1       	ldi	r22, 0x16	; 22
     6c0:	8d e3       	ldi	r24, 0x3D	; 61
     6c2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_box(10, 3);	  ///Draws the box. First argument is width=14, second is height=6
     6c6:	63 e0       	ldi	r22, 0x03	; 3
     6c8:	8a e0       	ldi	r24, 0x0A	; 10
     6ca:	0e 94 08 0c 	call	0x1810	; 0x1810 <gfx_box>
}
     6ce:	00 00       	nop
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <HindranceShow>:
 * Draws one triangle with an exclamation mark inside.
 *
 * @param x Abscissa starting point
 * @param y Ordinate starting point
 */
void HindranceShow(int x, int y){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	00 d0       	rcall	.+0      	; 0x6dc <HindranceShow+0x6>
     6dc:	00 d0       	rcall	.+0      	; 0x6de <HindranceShow+0x8>
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	7c 83       	std	Y+4, r23	; 0x04
     6e8:	6b 83       	std	Y+3, r22	; 0x03
	gfx_move(x, y); ///Sets the point from which to draw
     6ea:	9b 81       	ldd	r25, Y+3	; 0x03
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	69 2f       	mov	r22, r25
     6f0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_lineTo(x+7,y-17); ///Draws a line from x, y to x+7,y-17
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9f ee       	ldi	r25, 0xEF	; 239
     6f8:	98 0f       	add	r25, r24
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	89 5f       	subi	r24, 0xF9	; 249
     6fe:	69 2f       	mov	r22, r25
     700:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <gfx_lineTo>
	gfx_lineTo(x-7,y-17);///Draws a line from  x+7,y-17 to x-7,y-17
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9f ee       	ldi	r25, 0xEF	; 239
     708:	98 0f       	add	r25, r24
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	87 50       	subi	r24, 0x07	; 7
     70e:	69 2f       	mov	r22, r25
     710:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <gfx_lineTo>
	gfx_lineTo(x, y); ///Draws a line from x-7,y-17 to start point x,y
     714:	9b 81       	ldd	r25, Y+3	; 0x03
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	69 2f       	mov	r22, r25
     71a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <gfx_lineTo>
	gfx_move(x, y-7);///Sets the point from which to draw
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	99 ef       	ldi	r25, 0xF9	; 249
     722:	98 0f       	add	r25, r24
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	69 2f       	mov	r22, r25
     728:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_lineTo(x,y-13);///Draws a line from x,y-7 to start point x,y-13
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	93 ef       	ldi	r25, 0xF3	; 243
     730:	98 0f       	add	r25, r24
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	69 2f       	mov	r22, r25
     736:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <gfx_lineTo>
	gfx_move(x, y-15); ///Sets the point from which to draw
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	91 ef       	ldi	r25, 0xF1	; 241
     73e:	98 0f       	add	r25, r24
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	69 2f       	mov	r22, r25
     744:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_hline(1); ///Draws a horizontal line from the current position to the right - makes one point
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <gfx_hline>

}
     74e:	00 00       	nop
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <tone>:
/**
 * @brief
 *
 * Function from the Project "HelloSound" for creating sounds on the Nibo
 */
int tone(int frequency, int duration) {
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	c8 54       	subi	r28, 0x48	; 72
     76c:	d1 09       	sbc	r29, r1
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	9e 01       	movw	r18, r28
     77a:	2b 5b       	subi	r18, 0xBB	; 187
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	f9 01       	movw	r30, r18
     780:	91 83       	std	Z+1, r25	; 0x01
     782:	80 83       	st	Z, r24
     784:	ce 01       	movw	r24, r28
     786:	89 5b       	subi	r24, 0xB9	; 185
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	fc 01       	movw	r30, r24
     78c:	71 83       	std	Z+1, r23	; 0x01
     78e:	60 83       	st	Z, r22
	int interval = (50000 / frequency);
     790:	ce 01       	movw	r24, r28
     792:	8b 5b       	subi	r24, 0xBB	; 187
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	fc 01       	movw	r30, r24
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	9c 01       	movw	r18, r24
     79e:	99 0f       	add	r25, r25
     7a0:	44 0b       	sbc	r20, r20
     7a2:	55 0b       	sbc	r21, r21
     7a4:	80 e5       	ldi	r24, 0x50	; 80
     7a6:	93 ec       	ldi	r25, 0xC3	; 195
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	bc 01       	movw	r22, r24
     7ae:	cd 01       	movw	r24, r26
     7b0:	0e 94 2c 13 	call	0x2658	; 0x2658 <__divmodsi4>
     7b4:	da 01       	movw	r26, r20
     7b6:	c9 01       	movw	r24, r18
     7b8:	9c 83       	std	Y+4, r25	; 0x04
     7ba:	8b 83       	std	Y+3, r24	; 0x03
	duration = duration * 100;
     7bc:	ce 01       	movw	r24, r28
     7be:	89 5b       	subi	r24, 0xB9	; 185
     7c0:	9f 4f       	sbci	r25, 0xFF	; 255
     7c2:	9e 01       	movw	r18, r28
     7c4:	29 5b       	subi	r18, 0xB9	; 185
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	f9 01       	movw	r30, r18
     7ca:	40 81       	ld	r20, Z
     7cc:	51 81       	ldd	r21, Z+1	; 0x01
     7ce:	64 e6       	ldi	r22, 0x64	; 100
     7d0:	64 9f       	mul	r22, r20
     7d2:	90 01       	movw	r18, r0
     7d4:	65 9f       	mul	r22, r21
     7d6:	30 0d       	add	r19, r0
     7d8:	11 24       	eor	r1, r1
     7da:	fc 01       	movw	r30, r24
     7dc:	31 83       	std	Z+1, r19	; 0x01
     7de:	20 83       	st	Z, r18

	while (duration) {
     7e0:	5b c2       	rjmp	.+1206   	; 0xc98 <tone+0x53a>
		int i = interval;
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	89 83       	std	Y+1, r24	; 0x01
		clear_output_bit(IO_AUDIO);
     7ea:	88 e3       	ldi	r24, 0x38	; 56
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	28 e3       	ldi	r18, 0x38	; 56
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	2f 7e       	andi	r18, 0xEF	; 239
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
		while (duration && i) {
     7fc:	02 c1       	rjmp	.+516    	; 0xa02 <tone+0x2a4>
			duration--;
     7fe:	ce 01       	movw	r24, r28
     800:	89 5b       	subi	r24, 0xB9	; 185
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	9e 01       	movw	r18, r28
     806:	29 5b       	subi	r18, 0xB9	; 185
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	31 81       	ldd	r19, Z+1	; 0x01
     810:	21 50       	subi	r18, 0x01	; 1
     812:	31 09       	sbc	r19, r1
     814:	fc 01       	movw	r30, r24
     816:	31 83       	std	Z+1, r19	; 0x01
     818:	20 83       	st	Z, r18
			i--;
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a0 e2       	ldi	r26, 0x20	; 32
     82a:	b1 e4       	ldi	r27, 0x41	; 65
     82c:	89 87       	std	Y+9, r24	; 0x09
     82e:	9a 87       	std	Y+10, r25	; 0x0a
     830:	ab 87       	std	Y+11, r26	; 0x0b
     832:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     834:	2b ea       	ldi	r18, 0xAB	; 171
     836:	3a ea       	ldi	r19, 0xAA	; 170
     838:	4a ea       	ldi	r20, 0xAA	; 170
     83a:	50 e4       	ldi	r21, 0x40	; 64
     83c:	69 85       	ldd	r22, Y+9	; 0x09
     83e:	7a 85       	ldd	r23, Y+10	; 0x0a
     840:	8b 85       	ldd	r24, Y+11	; 0x0b
     842:	9c 85       	ldd	r25, Y+12	; 0x0c
     844:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	8d 87       	std	Y+13, r24	; 0x0d
     84e:	9e 87       	std	Y+14, r25	; 0x0e
     850:	af 87       	std	Y+15, r26	; 0x0f
     852:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	50 e4       	ldi	r21, 0x40	; 64
     85c:	69 85       	ldd	r22, Y+9	; 0x09
     85e:	7a 85       	ldd	r23, Y+10	; 0x0a
     860:	8b 85       	ldd	r24, Y+11	; 0x0b
     862:	9c 85       	ldd	r25, Y+12	; 0x0c
     864:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	89 8b       	std	Y+17, r24	; 0x11
     86e:	9a 8b       	std	Y+18, r25	; 0x12
     870:	ab 8b       	std	Y+19, r26	; 0x13
     872:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	5f e3       	ldi	r21, 0x3F	; 63
     87c:	6d 85       	ldd	r22, Y+13	; 0x0d
     87e:	7e 85       	ldd	r23, Y+14	; 0x0e
     880:	8f 85       	ldd	r24, Y+15	; 0x0f
     882:	98 89       	ldd	r25, Y+16	; 0x10
     884:	0e 94 9f 11 	call	0x233e	; 0x233e <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	1c f4       	brge	.+6      	; 0x892 <tone+0x134>
		__ticks = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	8d 8b       	std	Y+21, r24	; 0x15
     890:	b2 c0       	rjmp	.+356    	; 0x9f6 <tone+0x298>
	else if (__tmp2 > 65535)
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	3f ef       	ldi	r19, 0xFF	; 255
     896:	4f e7       	ldi	r20, 0x7F	; 127
     898:	57 e4       	ldi	r21, 0x47	; 71
     89a:	69 89       	ldd	r22, Y+17	; 0x11
     89c:	7a 89       	ldd	r23, Y+18	; 0x12
     89e:	8b 89       	ldd	r24, Y+19	; 0x13
     8a0:	9c 89       	ldd	r25, Y+20	; 0x14
     8a2:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     8a6:	18 16       	cp	r1, r24
     8a8:	0c f0       	brlt	.+2      	; 0x8ac <tone+0x14e>
     8aa:	7b c0       	rjmp	.+246    	; 0x9a2 <tone+0x244>
	{
		_delay_ms(__us / 1000.0);
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4a e7       	ldi	r20, 0x7A	; 122
     8b2:	54 e4       	ldi	r21, 0x44	; 68
     8b4:	69 85       	ldd	r22, Y+9	; 0x09
     8b6:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     8bc:	0e 94 a4 11 	call	0x2348	; 0x2348 <__divsf3>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	8e 8b       	std	Y+22, r24	; 0x16
     8c6:	9f 8b       	std	Y+23, r25	; 0x17
     8c8:	a8 8f       	std	Y+24, r26	; 0x18
     8ca:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4a e7       	ldi	r20, 0x7A	; 122
     8d2:	55 e4       	ldi	r21, 0x45	; 69
     8d4:	6e 89       	ldd	r22, Y+22	; 0x16
     8d6:	7f 89       	ldd	r23, Y+23	; 0x17
     8d8:	88 8d       	ldd	r24, Y+24	; 0x18
     8da:	99 8d       	ldd	r25, Y+25	; 0x19
     8dc:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	8a 8f       	std	Y+26, r24	; 0x1a
     8e6:	9b 8f       	std	Y+27, r25	; 0x1b
     8e8:	ac 8f       	std	Y+28, r26	; 0x1c
     8ea:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	40 e8       	ldi	r20, 0x80	; 128
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
     8f6:	7b 8d       	ldd	r23, Y+27	; 0x1b
     8f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8fc:	0e 94 9f 11 	call	0x233e	; 0x233e <__cmpsf2>
     900:	88 23       	and	r24, r24
     902:	2c f4       	brge	.+10     	; 0x90e <tone+0x1b0>
		__ticks = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9f 8f       	std	Y+31, r25	; 0x1f
     90a:	8e 8f       	std	Y+30, r24	; 0x1e
     90c:	3f c0       	rjmp	.+126    	; 0x98c <tone+0x22e>
	else if (__tmp > 65535)
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	3f ef       	ldi	r19, 0xFF	; 255
     912:	4f e7       	ldi	r20, 0x7F	; 127
     914:	57 e4       	ldi	r21, 0x47	; 71
     916:	6a 8d       	ldd	r22, Y+26	; 0x1a
     918:	7b 8d       	ldd	r23, Y+27	; 0x1b
     91a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     91c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     91e:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     922:	18 16       	cp	r1, r24
     924:	4c f5       	brge	.+82     	; 0x978 <tone+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e2       	ldi	r20, 0x20	; 32
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	6e 89       	ldd	r22, Y+22	; 0x16
     930:	7f 89       	ldd	r23, Y+23	; 0x17
     932:	88 8d       	ldd	r24, Y+24	; 0x18
     934:	99 8d       	ldd	r25, Y+25	; 0x19
     936:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	9f 8f       	std	Y+31, r25	; 0x1f
     94c:	8e 8f       	std	Y+30, r24	; 0x1e
     94e:	0f c0       	rjmp	.+30     	; 0x96e <tone+0x210>
     950:	80 e9       	ldi	r24, 0x90	; 144
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	99 a3       	std	Y+33, r25	; 0x21
     956:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     958:	88 a1       	ldd	r24, Y+32	; 0x20
     95a:	99 a1       	ldd	r25, Y+33	; 0x21
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <tone+0x1fe>
     960:	99 a3       	std	Y+33, r25	; 0x21
     962:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     964:	8e 8d       	ldd	r24, Y+30	; 0x1e
     966:	9f 8d       	ldd	r25, Y+31	; 0x1f
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	9f 8f       	std	Y+31, r25	; 0x1f
     96c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     96e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     970:	9f 8d       	ldd	r25, Y+31	; 0x1f
     972:	89 2b       	or	r24, r25
     974:	69 f7       	brne	.-38     	; 0x950 <tone+0x1f2>
     976:	3f c0       	rjmp	.+126    	; 0x9f6 <tone+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     978:	6a 8d       	ldd	r22, Y+26	; 0x1a
     97a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     97c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     97e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     980:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	9f 8f       	std	Y+31, r25	; 0x1f
     98a:	8e 8f       	std	Y+30, r24	; 0x1e
     98c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     98e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     990:	9b a3       	std	Y+35, r25	; 0x23
     992:	8a a3       	std	Y+34, r24	; 0x22
     994:	8a a1       	ldd	r24, Y+34	; 0x22
     996:	9b a1       	ldd	r25, Y+35	; 0x23
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <tone+0x23a>
     99c:	9b a3       	std	Y+35, r25	; 0x23
     99e:	8a a3       	std	Y+34, r24	; 0x22
     9a0:	2a c0       	rjmp	.+84     	; 0x9f6 <tone+0x298>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	4f e7       	ldi	r20, 0x7F	; 127
     9a8:	53 e4       	ldi	r21, 0x43	; 67
     9aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     9ac:	7e 85       	ldd	r23, Y+14	; 0x0e
     9ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     9b0:	98 89       	ldd	r25, Y+16	; 0x10
     9b2:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     9b6:	18 16       	cp	r1, r24
     9b8:	ac f4       	brge	.+42     	; 0x9e4 <tone+0x286>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     9ba:	69 89       	ldd	r22, Y+17	; 0x11
     9bc:	7a 89       	ldd	r23, Y+18	; 0x12
     9be:	8b 89       	ldd	r24, Y+19	; 0x13
     9c0:	9c 89       	ldd	r25, Y+20	; 0x14
     9c2:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	9d a3       	std	Y+37, r25	; 0x25
     9cc:	8c a3       	std	Y+36, r24	; 0x24
     9ce:	8c a1       	ldd	r24, Y+36	; 0x24
     9d0:	9d a1       	ldd	r25, Y+37	; 0x25
     9d2:	9f a3       	std	Y+39, r25	; 0x27
     9d4:	8e a3       	std	Y+38, r24	; 0x26
     9d6:	8e a1       	ldd	r24, Y+38	; 0x26
     9d8:	9f a1       	ldd	r25, Y+39	; 0x27
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <tone+0x27c>
     9de:	9f a3       	std	Y+39, r25	; 0x27
     9e0:	8e a3       	std	Y+38, r24	; 0x26
     9e2:	0f c0       	rjmp	.+30     	; 0xa02 <tone+0x2a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9e4:	6d 85       	ldd	r22, Y+13	; 0x0d
     9e6:	7e 85       	ldd	r23, Y+14	; 0x0e
     9e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     9ea:	98 89       	ldd	r25, Y+16	; 0x10
     9ec:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	8d 8b       	std	Y+21, r24	; 0x15
     9f6:	8d 89       	ldd	r24, Y+21	; 0x15
     9f8:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9fa:	88 a5       	ldd	r24, Y+40	; 0x28
     9fc:	8a 95       	dec	r24
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <tone+0x29e>
     a00:	88 a7       	std	Y+40, r24	; 0x28
	duration = duration * 100;

	while (duration) {
		int i = interval;
		clear_output_bit(IO_AUDIO);
		while (duration && i) {
     a02:	ce 01       	movw	r24, r28
     a04:	89 5b       	subi	r24, 0xB9	; 185
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	fc 01       	movw	r30, r24
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	89 2b       	or	r24, r25
     a10:	29 f0       	breq	.+10     	; 0xa1c <tone+0x2be>
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	89 2b       	or	r24, r25
     a18:	09 f0       	breq	.+2      	; 0xa1c <tone+0x2be>
     a1a:	f1 ce       	rjmp	.-542    	; 0x7fe <tone+0xa0>
			duration--;
			i--;
			delay_us(10);
		}
		i = interval;
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
		set_output_bit(IO_AUDIO);
     a24:	88 e3       	ldi	r24, 0x38	; 56
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	28 e3       	ldi	r18, 0x38	; 56
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	20 61       	ori	r18, 0x10	; 16
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18
		while (duration && i) {
     a36:	23 c1       	rjmp	.+582    	; 0xc7e <tone+0x520>
			duration--;
     a38:	ce 01       	movw	r24, r28
     a3a:	89 5b       	subi	r24, 0xB9	; 185
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	9e 01       	movw	r18, r28
     a40:	29 5b       	subi	r18, 0xB9	; 185
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	f9 01       	movw	r30, r18
     a46:	20 81       	ld	r18, Z
     a48:	31 81       	ldd	r19, Z+1	; 0x01
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	31 09       	sbc	r19, r1
     a4e:	fc 01       	movw	r30, r24
     a50:	31 83       	std	Z+1, r19	; 0x01
     a52:	20 83       	st	Z, r18
			i--;
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 e2       	ldi	r26, 0x20	; 32
     a64:	b1 e4       	ldi	r27, 0x41	; 65
     a66:	8d 83       	std	Y+5, r24	; 0x05
     a68:	9e 83       	std	Y+6, r25	; 0x06
     a6a:	af 83       	std	Y+7, r26	; 0x07
     a6c:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a6e:	2b ea       	ldi	r18, 0xAB	; 171
     a70:	3a ea       	ldi	r19, 0xAA	; 170
     a72:	4a ea       	ldi	r20, 0xAA	; 170
     a74:	50 e4       	ldi	r21, 0x40	; 64
     a76:	6d 81       	ldd	r22, Y+5	; 0x05
     a78:	7e 81       	ldd	r23, Y+6	; 0x06
     a7a:	8f 81       	ldd	r24, Y+7	; 0x07
     a7c:	98 85       	ldd	r25, Y+8	; 0x08
     a7e:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	89 a7       	std	Y+41, r24	; 0x29
     a88:	9a a7       	std	Y+42, r25	; 0x2a
     a8a:	ab a7       	std	Y+43, r26	; 0x2b
     a8c:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	50 e4       	ldi	r21, 0x40	; 64
     a96:	6d 81       	ldd	r22, Y+5	; 0x05
     a98:	7e 81       	ldd	r23, Y+6	; 0x06
     a9a:	8f 81       	ldd	r24, Y+7	; 0x07
     a9c:	98 85       	ldd	r25, Y+8	; 0x08
     a9e:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	8d a7       	std	Y+45, r24	; 0x2d
     aa8:	9e a7       	std	Y+46, r25	; 0x2e
     aaa:	af a7       	std	Y+47, r26	; 0x2f
     aac:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e8       	ldi	r20, 0x80	; 128
     ab4:	5f e3       	ldi	r21, 0x3F	; 63
     ab6:	69 a5       	ldd	r22, Y+41	; 0x29
     ab8:	7a a5       	ldd	r23, Y+42	; 0x2a
     aba:	8b a5       	ldd	r24, Y+43	; 0x2b
     abc:	9c a5       	ldd	r25, Y+44	; 0x2c
     abe:	0e 94 9f 11 	call	0x233e	; 0x233e <__cmpsf2>
     ac2:	88 23       	and	r24, r24
     ac4:	1c f4       	brge	.+6      	; 0xacc <tone+0x36e>
		__ticks = 1;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	89 ab       	std	Y+49, r24	; 0x31
     aca:	c6 c0       	rjmp	.+396    	; 0xc58 <tone+0x4fa>
	else if (__tmp2 > 65535)
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ad6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
     ada:	98 a9       	ldd	r25, Y+48	; 0x30
     adc:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	0c f0       	brlt	.+2      	; 0xae6 <tone+0x388>
     ae4:	7b c0       	rjmp	.+246    	; 0xbdc <tone+0x47e>
	{
		_delay_ms(__us / 1000.0);
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	4a e7       	ldi	r20, 0x7A	; 122
     aec:	54 e4       	ldi	r21, 0x44	; 68
     aee:	6d 81       	ldd	r22, Y+5	; 0x05
     af0:	7e 81       	ldd	r23, Y+6	; 0x06
     af2:	8f 81       	ldd	r24, Y+7	; 0x07
     af4:	98 85       	ldd	r25, Y+8	; 0x08
     af6:	0e 94 a4 11 	call	0x2348	; 0x2348 <__divsf3>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	8a ab       	std	Y+50, r24	; 0x32
     b00:	9b ab       	std	Y+51, r25	; 0x33
     b02:	ac ab       	std	Y+52, r26	; 0x34
     b04:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	4a e7       	ldi	r20, 0x7A	; 122
     b0c:	55 e4       	ldi	r21, 0x45	; 69
     b0e:	6a a9       	ldd	r22, Y+50	; 0x32
     b10:	7b a9       	ldd	r23, Y+51	; 0x33
     b12:	8c a9       	ldd	r24, Y+52	; 0x34
     b14:	9d a9       	ldd	r25, Y+53	; 0x35
     b16:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	8e ab       	std	Y+54, r24	; 0x36
     b20:	9f ab       	std	Y+55, r25	; 0x37
     b22:	a8 af       	std	Y+56, r26	; 0x38
     b24:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e8       	ldi	r20, 0x80	; 128
     b2c:	5f e3       	ldi	r21, 0x3F	; 63
     b2e:	6e a9       	ldd	r22, Y+54	; 0x36
     b30:	7f a9       	ldd	r23, Y+55	; 0x37
     b32:	88 ad       	ldd	r24, Y+56	; 0x38
     b34:	99 ad       	ldd	r25, Y+57	; 0x39
     b36:	0e 94 9f 11 	call	0x233e	; 0x233e <__cmpsf2>
     b3a:	88 23       	and	r24, r24
     b3c:	2c f4       	brge	.+10     	; 0xb48 <tone+0x3ea>
		__ticks = 1;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	9b af       	std	Y+59, r25	; 0x3b
     b44:	8a af       	std	Y+58, r24	; 0x3a
     b46:	3f c0       	rjmp	.+126    	; 0xbc6 <tone+0x468>
	else if (__tmp > 65535)
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	3f ef       	ldi	r19, 0xFF	; 255
     b4c:	4f e7       	ldi	r20, 0x7F	; 127
     b4e:	57 e4       	ldi	r21, 0x47	; 71
     b50:	6e a9       	ldd	r22, Y+54	; 0x36
     b52:	7f a9       	ldd	r23, Y+55	; 0x37
     b54:	88 ad       	ldd	r24, Y+56	; 0x38
     b56:	99 ad       	ldd	r25, Y+57	; 0x39
     b58:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     b5c:	18 16       	cp	r1, r24
     b5e:	4c f5       	brge	.+82     	; 0xbb2 <tone+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e2       	ldi	r20, 0x20	; 32
     b66:	51 e4       	ldi	r21, 0x41	; 65
     b68:	6a a9       	ldd	r22, Y+50	; 0x32
     b6a:	7b a9       	ldd	r23, Y+51	; 0x33
     b6c:	8c a9       	ldd	r24, Y+52	; 0x34
     b6e:	9d a9       	ldd	r25, Y+53	; 0x35
     b70:	0e 94 bf 12 	call	0x257e	; 0x257e <__mulsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	9b af       	std	Y+59, r25	; 0x3b
     b86:	8a af       	std	Y+58, r24	; 0x3a
     b88:	0f c0       	rjmp	.+30     	; 0xba8 <tone+0x44a>
     b8a:	80 e9       	ldi	r24, 0x90	; 144
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	9d af       	std	Y+61, r25	; 0x3d
     b90:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b92:	8c ad       	ldd	r24, Y+60	; 0x3c
     b94:	9d ad       	ldd	r25, Y+61	; 0x3d
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <tone+0x438>
     b9a:	9d af       	std	Y+61, r25	; 0x3d
     b9c:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9e:	8a ad       	ldd	r24, Y+58	; 0x3a
     ba0:	9b ad       	ldd	r25, Y+59	; 0x3b
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	9b af       	std	Y+59, r25	; 0x3b
     ba6:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba8:	8a ad       	ldd	r24, Y+58	; 0x3a
     baa:	9b ad       	ldd	r25, Y+59	; 0x3b
     bac:	89 2b       	or	r24, r25
     bae:	69 f7       	brne	.-38     	; 0xb8a <tone+0x42c>
     bb0:	53 c0       	rjmp	.+166    	; 0xc58 <tone+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb2:	6e a9       	ldd	r22, Y+54	; 0x36
     bb4:	7f a9       	ldd	r23, Y+55	; 0x37
     bb6:	88 ad       	ldd	r24, Y+56	; 0x38
     bb8:	99 ad       	ldd	r25, Y+57	; 0x39
     bba:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	9b af       	std	Y+59, r25	; 0x3b
     bc4:	8a af       	std	Y+58, r24	; 0x3a
     bc6:	8a ad       	ldd	r24, Y+58	; 0x3a
     bc8:	9b ad       	ldd	r25, Y+59	; 0x3b
     bca:	9f af       	std	Y+63, r25	; 0x3f
     bcc:	8e af       	std	Y+62, r24	; 0x3e
     bce:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd0:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <tone+0x474>
     bd6:	9f af       	std	Y+63, r25	; 0x3f
     bd8:	8e af       	std	Y+62, r24	; 0x3e
     bda:	3e c0       	rjmp	.+124    	; 0xc58 <tone+0x4fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	53 e4       	ldi	r21, 0x43	; 67
     be4:	69 a5       	ldd	r22, Y+41	; 0x29
     be6:	7a a5       	ldd	r23, Y+42	; 0x2a
     be8:	8b a5       	ldd	r24, Y+43	; 0x2b
     bea:	9c a5       	ldd	r25, Y+44	; 0x2c
     bec:	0e 94 ba 12 	call	0x2574	; 0x2574 <__gesf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <tone+0x4e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     bf4:	8e 01       	movw	r16, r28
     bf6:	00 5c       	subi	r16, 0xC0	; 192
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	6d a5       	ldd	r22, Y+45	; 0x2d
     bfc:	7e a5       	ldd	r23, Y+46	; 0x2e
     bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
     c00:	98 a9       	ldd	r25, Y+48	; 0x30
     c02:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	f8 01       	movw	r30, r16
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	80 83       	st	Z, r24
     c10:	ce 01       	movw	r24, r28
     c12:	8e 5b       	subi	r24, 0xBE	; 190
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	9e 01       	movw	r18, r28
     c18:	20 5c       	subi	r18, 0xC0	; 192
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	31 81       	ldd	r19, Z+1	; 0x01
     c22:	fc 01       	movw	r30, r24
     c24:	31 83       	std	Z+1, r19	; 0x01
     c26:	20 83       	st	Z, r18
     c28:	ce 01       	movw	r24, r28
     c2a:	8e 5b       	subi	r24, 0xBE	; 190
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <tone+0x4d6>
     c38:	9e 01       	movw	r18, r28
     c3a:	2e 5b       	subi	r18, 0xBE	; 190
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	f9 01       	movw	r30, r18
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	1c c0       	rjmp	.+56     	; 0xc7e <tone+0x520>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c46:	69 a5       	ldd	r22, Y+41	; 0x29
     c48:	7a a5       	ldd	r23, Y+42	; 0x2a
     c4a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c4c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c4e:	0e 94 16 12 	call	0x242c	; 0x242c <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	89 ab       	std	Y+49, r24	; 0x31
     c58:	ce 01       	movw	r24, r28
     c5a:	8c 5b       	subi	r24, 0xBC	; 188
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	29 a9       	ldd	r18, Y+49	; 0x31
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c64:	ce 01       	movw	r24, r28
     c66:	8c 5b       	subi	r24, 0xBC	; 188
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	28 2f       	mov	r18, r24
     c70:	2a 95       	dec	r18
     c72:	f1 f7       	brne	.-4      	; 0xc70 <tone+0x512>
     c74:	ce 01       	movw	r24, r28
     c76:	8c 5b       	subi	r24, 0xBC	; 188
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
			i--;
			delay_us(10);
		}
		i = interval;
		set_output_bit(IO_AUDIO);
		while (duration && i) {
     c7e:	ce 01       	movw	r24, r28
     c80:	89 5b       	subi	r24, 0xB9	; 185
     c82:	9f 4f       	sbci	r25, 0xFF	; 255
     c84:	fc 01       	movw	r30, r24
     c86:	80 81       	ld	r24, Z
     c88:	91 81       	ldd	r25, Z+1	; 0x01
     c8a:	89 2b       	or	r24, r25
     c8c:	29 f0       	breq	.+10     	; 0xc98 <tone+0x53a>
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	89 2b       	or	r24, r25
     c94:	09 f0       	breq	.+2      	; 0xc98 <tone+0x53a>
     c96:	d0 ce       	rjmp	.-608    	; 0xa38 <tone+0x2da>
 */
int tone(int frequency, int duration) {
	int interval = (50000 / frequency);
	duration = duration * 100;

	while (duration) {
     c98:	ce 01       	movw	r24, r28
     c9a:	89 5b       	subi	r24, 0xB9	; 185
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	fc 01       	movw	r30, r24
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	89 2b       	or	r24, r25
     ca6:	09 f0       	breq	.+2      	; 0xcaa <tone+0x54c>
     ca8:	9c cd       	rjmp	.-1224   	; 0x7e2 <tone+0x84>
			i--;
			delay_us(10);
		}
	}

	return 1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
}
     cae:	c8 5b       	subi	r28, 0xB8	; 184
     cb0:	df 4f       	sbci	r29, 0xFF	; 255
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	08 95       	ret

00000cc6 <start>:
 * @brief
 *
 * Function for visual and sound representation of a countdown.
 * After 4 signals (3 red and 1 green), the main program starts
*/
void start(){
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	00 d0       	rcall	.+0      	; 0xccc <start+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <start+0x8>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <start+0xa>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62

	/// Initialization of LEDs numbers
	int led1=2; ///start left LED
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
	int led2=7; ///start right LED
     cdc:	87 e0       	ldi	r24, 0x07	; 7
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	8b 83       	std	Y+3, r24	; 0x03

	leds_set_headlights(250); /// Turn on the two headlights.
     ce4:	8a ef       	ldi	r24, 0xFA	; 250
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 2f 11 	call	0x225e	; 0x225e <leds_set_headlights>

	/// Show user info
	gfx_move(4, 0);///Sets the point from which to write
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("To start the program,"); /// write the text to the display
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>
	gfx_move(4, 13);
     cfc:	6d e0       	ldi	r22, 0x0D	; 13
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("Press the S3 button");
     d04:	8a e1       	ldi	r24, 0x1A	; 26
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>
	gfx_move(50, 23);
     d0c:	67 e1       	ldi	r22, 0x17	; 23
     d0e:	82 e3       	ldi	r24, 0x32	; 50
     d10:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("----->");
     d14:	8e e2       	ldi	r24, 0x2E	; 46
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>
	gfx_move(4, 35);
     d1c:	63 e2       	ldi	r22, 0x23	; 35
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("To stop the program");
     d24:	85 e3       	ldi	r24, 0x35	; 53
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>
	gfx_move(4, 48);
     d2c:	60 e3       	ldi	r22, 0x30	; 48
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("Press the S2 button");
     d34:	89 e4       	ldi	r24, 0x49	; 73
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>
	gfx_move(50, 55);
     d3c:	67 e3       	ldi	r22, 0x37	; 55
     d3e:	82 e3       	ldi	r24, 0x32	; 50
     d40:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
	gfx_print_text("<-----");
     d44:	8d e5       	ldi	r24, 0x5D	; 93
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_print_text>

	deactivate_output_bit(IO_INPUT_1);
     d4c:	81 e3       	ldi	r24, 0x31	; 49
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	21 e3       	ldi	r18, 0x31	; 49
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	f9 01       	movw	r30, r18
     d56:	20 81       	ld	r18, Z
     d58:	2f 7e       	andi	r18, 0xEF	; 239
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
	while(get_input_bit(IO_INPUT_1)){ ///S3 start-button not pressed
     d5e:	00 00       	nop
     d60:	80 e3       	ldi	r24, 0x30	; 48
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	80 71       	andi	r24, 0x10	; 16
     d6e:	99 27       	eor	r25, r25
     d70:	89 2b       	or	r24, r25
     d72:	b1 f7       	brne	.-20     	; 0xd60 <start+0x9a>
	}

	if (!get_input_bit(IO_INPUT_1)) ///S3 start button pressed
     d74:	80 e3       	ldi	r24, 0x30	; 48
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	80 71       	andi	r24, 0x10	; 16
     d82:	99 27       	eor	r25, r25
     d84:	89 2b       	or	r24, r25
     d86:	09 f0       	breq	.+2      	; 0xd8a <start+0xc4>
     d88:	58 c0       	rjmp	.+176    	; 0xe3a <start+0x174>
	{
		delay(800); /// wait 0,8s before start of the countdown
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	93 e0       	ldi	r25, 0x03	; 3
     d8e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
		for(int i=4; i>0; i--){ /// 4 steps before the program will be start
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05
     d9a:	49 c0       	rjmp	.+146    	; 0xe2e <start+0x168>
			if(i>1){ /// for first 3 steps
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	02 97       	sbiw	r24, 0x02	; 2
     da2:	34 f1       	brlt	.+76     	; 0xdf0 <start+0x12a>
				leds_set_status(LEDS_RED, led1); /// Sets the left LED to red
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	68 2f       	mov	r22, r24
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				leds_set_status(LEDS_RED, led2); /// Sets the right LED to red
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	68 2f       	mov	r22, r24
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				cli();	/// Atomic state: so that the sounds are played correctly.
     db8:	f8 94       	cli
				tone(392, 100);
     dba:	64 e6       	ldi	r22, 0x64	; 100
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	88 e8       	ldi	r24, 0x88	; 136
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 af 03 	call	0x75e	; 0x75e <tone>
				sei(); /// End of Atomic state: interrupts are now possible again
     dc6:	78 94       	sei
				leds_set_status(LEDS_OFF, led1); /// Switch off left LED
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				leds_set_status(LEDS_OFF, led2);/// Switch off right LED
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	68 2f       	mov	r22, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				led1++; ///change the number of left LED
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
				led2--; ///change the number of right LED
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
			}

			if(i==1){ /// for the last step
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	91 f4       	brne	.+36     	; 0xe1c <start+0x156>
				leds_set_status(LEDS_GREEN, led1); /// Sets the left LED to green
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	68 2f       	mov	r22, r24
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				leds_set_status(LEDS_GREEN, led2); /// Sets the left LED to green
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	68 2f       	mov	r22, r24
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 01 11 	call	0x2202	; 0x2202 <leds_set_status>
				cli(); /// Atomic state: so that the sounds are played correctly.
     e0c:	f8 94       	cli
				tone(800, 100);
     e0e:	64 e6       	ldi	r22, 0x64	; 100
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e2       	ldi	r24, 0x20	; 32
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 af 03 	call	0x75e	; 0x75e <tone>
				sei(); /// End of Atomic state: interrupts are now possible again
     e1a:	78 94       	sei
			}
			delay(500); /// wait 0,5s
     e1c:	84 ef       	ldi	r24, 0xF4	; 244
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
	}

	if (!get_input_bit(IO_INPUT_1)) ///S3 start button pressed
	{
		delay(800); /// wait 0,8s before start of the countdown
		for(int i=4; i>0; i--){ /// 4 steps before the program will be start
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	9e 81       	ldd	r25, Y+6	; 0x06
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	8d 83       	std	Y+5, r24	; 0x05
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
     e30:	9e 81       	ldd	r25, Y+6	; 0x06
     e32:	18 16       	cp	r1, r24
     e34:	19 06       	cpc	r1, r25
     e36:	0c f4       	brge	.+2      	; 0xe3a <start+0x174>
     e38:	b1 cf       	rjmp	.-158    	; 0xd9c <start+0xd6>
				sei(); /// End of Atomic state: interrupts are now possible again
			}
			delay(500); /// wait 0,5s
		}
	}
	leds_set_headlights(0); /// switch off headlight
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 2f 11 	call	0x225e	; 0x225e <leds_set_headlights>
}
     e42:	00 00       	nop
     e44:	26 96       	adiw	r28, 0x06	; 6
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <display_write>:
     e56:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e5a:	38 2f       	mov	r19, r24
     e5c:	31 70       	andi	r19, 0x01	; 1
     e5e:	29 2f       	mov	r18, r25
     e60:	2e 7f       	andi	r18, 0xFE	; 254
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	93 27       	eor	r25, r19
     e66:	92 2b       	or	r25, r18
     e68:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e6c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e70:	9d 7f       	andi	r25, 0xFD	; 253
     e72:	31 11       	cpse	r19, r1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <display_write+0x24>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <display_write+0x26>
     e7a:	22 e0       	ldi	r18, 0x02	; 2
     e7c:	92 2b       	or	r25, r18
     e7e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e82:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e86:	97 7f       	andi	r25, 0xF7	; 247
     e88:	81 fd       	sbrc	r24, 1
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <display_write+0x3a>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <display_write+0x3c>
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	89 2b       	or	r24, r25
     e94:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e98:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e9c:	8f 7e       	andi	r24, 0xEF	; 239
     e9e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	8a bb       	out	0x1a, r24	; 26
     ea6:	6b bb       	out	0x1b, r22	; 27
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	8a 95       	dec	r24
     eac:	f1 f7       	brne	.-4      	; 0xeaa <display_write+0x54>
     eae:	00 00       	nop
     eb0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	8a 95       	dec	r24
     ebe:	f1 f7       	brne	.-4      	; 0xebc <display_write+0x66>
     ec0:	00 00       	nop
     ec2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ec6:	8b 7f       	andi	r24, 0xFB	; 251
     ec8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ecc:	85 e0       	ldi	r24, 0x05	; 5
     ece:	8a 95       	dec	r24
     ed0:	f1 f7       	brne	.-4      	; 0xece <display_write+0x78>
     ed2:	00 00       	nop
     ed4:	1b ba       	out	0x1b, r1	; 27
     ed6:	1a ba       	out	0x1a, r1	; 26
     ed8:	08 95       	ret

00000eda <display_read>:
     eda:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ede:	38 2f       	mov	r19, r24
     ee0:	31 70       	andi	r19, 0x01	; 1
     ee2:	29 2f       	mov	r18, r25
     ee4:	2e 7f       	andi	r18, 0xFE	; 254
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	93 27       	eor	r25, r19
     eea:	92 2b       	or	r25, r18
     eec:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ef0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ef4:	9d 7f       	andi	r25, 0xFD	; 253
     ef6:	31 11       	cpse	r19, r1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <display_read+0x24>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <display_read+0x26>
     efe:	22 e0       	ldi	r18, 0x02	; 2
     f00:	92 2b       	or	r25, r18
     f02:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f06:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f0a:	97 7f       	andi	r25, 0xF7	; 247
     f0c:	81 fd       	sbrc	r24, 1
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <display_read+0x3a>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <display_read+0x3c>
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	89 2b       	or	r24, r25
     f18:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f1c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f20:	80 61       	ori	r24, 0x10	; 16
     f22:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f26:	1a ba       	out	0x1a, r1	; 26
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	8a 95       	dec	r24
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <display_read+0x50>
     f2e:	00 00       	nop
     f30:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f3a:	95 e1       	ldi	r25, 0x15	; 21
     f3c:	9a 95       	dec	r25
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <display_read+0x62>
     f40:	00 00       	nop
     f42:	89 b3       	in	r24, 0x19	; 25
     f44:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f48:	9b 7f       	andi	r25, 0xFB	; 251
     f4a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f4e:	95 e0       	ldi	r25, 0x05	; 5
     f50:	9a 95       	dec	r25
     f52:	f1 f7       	brne	.-4      	; 0xf50 <display_read+0x76>
     f54:	00 00       	nop
     f56:	08 95       	ret

00000f58 <display_wait>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <display_type>
     f62:	91 11       	cpse	r25, r1
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <display_wait+0x12>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	11 c0       	rjmp	.+34     	; 0xf8c <display_wait+0x34>
     f6a:	c8 2f       	mov	r28, r24
     f6c:	c1 70       	andi	r28, 0x01	; 1
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	10 e0       	ldi	r17, 0x00	; 0
     f72:	8c 2f       	mov	r24, r28
     f74:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
     f78:	0f 5f       	subi	r16, 0xFF	; 255
     f7a:	1f 4f       	sbci	r17, 0xFF	; 255
     f7c:	87 ff       	sbrs	r24, 7
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <display_wait+0x32>
     f80:	0f 3f       	cpi	r16, 0xFF	; 255
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	18 07       	cpc	r17, r24
     f86:	a9 f7       	brne	.-22     	; 0xf72 <display_wait+0x1a>
     f88:	ee cf       	rjmp	.-36     	; 0xf66 <display_wait+0xe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <display_init>:
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     f9a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fa4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fa8:	80 61       	ori	r24, 0x10	; 16
     faa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fb8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fc2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     fcc:	b8 9a       	sbi	0x17, 0	; 23
     fce:	1a ba       	out	0x1a, r1	; 26
     fd0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fda:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fe4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fe8:	8b 7f       	andi	r24, 0xFB	; 251
     fea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     fee:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ff2:	8e 7f       	andi	r24, 0xFE	; 254
     ff4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ff8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     ffc:	8d 7f       	andi	r24, 0xFD	; 253
     ffe:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
    1002:	c0 98       	cbi	0x18, 0	; 24
    1004:	97 9b       	sbis	0x12, 7	; 18
    1006:	09 c0       	rjmp	.+18     	; 0x101a <display_init+0x86>
    1008:	97 98       	cbi	0x12, 7	; 18
    100a:	8f e9       	ldi	r24, 0x9F	; 159
    100c:	9f e0       	ldi	r25, 0x0F	; 15
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <display_init+0x7a>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <display_init+0x80>
    1014:	00 00       	nop
    1016:	97 9a       	sbi	0x12, 7	; 18
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <display_init+0x92>
    101a:	8f e9       	ldi	r24, 0x9F	; 159
    101c:	9f e0       	ldi	r25, 0x0F	; 15
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <display_init+0x8a>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <display_init+0x90>
    1024:	00 00       	nop
    1026:	c0 9a       	sbi	0x18, 0	; 24
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    102e:	88 23       	and	r24, r24
    1030:	51 f0       	breq	.+20     	; 0x1046 <display_init+0xb2>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1038:	88 23       	and	r24, r24
    103a:	11 f0       	breq	.+4      	; 0x1040 <display_init+0xac>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <display_init+0xae>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
    1046:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
    104a:	8f 3f       	cpi	r24, 0xFF	; 255
    104c:	11 f4       	brne	.+4      	; 0x1052 <display_init+0xbe>
    104e:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <display_type>
    1052:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
    1056:	08 95       	ret

00001058 <pwm_init>:
    1058:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <pwm_timer_sub+0x1>
    105c:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <pwm_timer_sub>
    1060:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <pwm_timer_ms+0x1>
    1064:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <pwm_timer_ms>
    1068:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <pwm_timer_sec>
    106c:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <pwm_timer_sec+0x1>
    1070:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <pwm_timer_sec+0x2>
    1074:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <pwm_timer_sec+0x3>
    1078:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <pwm_channel_A+0x1>
    107c:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <pwm_channel_A>
    1080:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <pwm_channel_B+0x1>
    1084:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <pwm_channel_B>
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    1090:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    1094:	c5 98       	cbi	0x18, 5	; 24
    1096:	c6 98       	cbi	0x18, 6	; 24
    1098:	bd 9a       	sbi	0x17, 5	; 23
    109a:	be 9a       	sbi	0x17, 6	; 23
    109c:	bf 9a       	sbi	0x17, 7	; 23
    109e:	c7 9a       	sbi	0x18, 7	; 24
    10a0:	1d bc       	out	0x2d, r1	; 45
    10a2:	1c bc       	out	0x2c, r1	; 44
    10a4:	8a ea       	ldi	r24, 0xAA	; 170
    10a6:	8f bd       	out	0x2f, r24	; 47
    10a8:	82 e1       	ldi	r24, 0x12	; 18
    10aa:	8e bd       	out	0x2e, r24	; 46
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	97 bd       	out	0x27, r25	; 39
    10b2:	86 bd       	out	0x26, r24	; 38
    10b4:	87 b7       	in	r24, 0x37	; 55
    10b6:	84 60       	ori	r24, 0x04	; 4
    10b8:	87 bf       	out	0x37, r24	; 55
    10ba:	08 95       	ret

000010bc <__vector_14>:
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pwm_timer_sub>
    10d8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pwm_timer_sub+0x1>
    10dc:	9c 01       	movw	r18, r24
    10de:	28 5e       	subi	r18, 0xE8	; 232
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	28 3e       	cpi	r18, 0xE8	; 232
    10e4:	43 e0       	ldi	r20, 0x03	; 3
    10e6:	34 07       	cpc	r19, r20
    10e8:	28 f4       	brcc	.+10     	; 0x10f4 <__vector_14+0x38>
    10ea:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <pwm_timer_sub+0x1>
    10ee:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <pwm_timer_sub>
    10f2:	0f c0       	rjmp	.+30     	; 0x1112 <__stack+0x13>
    10f4:	80 5d       	subi	r24, 0xD0	; 208
    10f6:	93 40       	sbci	r25, 0x03	; 3
    10f8:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <pwm_timer_sub+0x1>
    10fc:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <pwm_timer_sub>
    1100:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1104:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    110e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    1112:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1116:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    111a:	9c 01       	movw	r18, r24
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	28 3e       	cpi	r18, 0xE8	; 232
    1122:	43 e0       	ldi	r20, 0x03	; 3
    1124:	34 07       	cpc	r19, r20
    1126:	28 f4       	brcc	.+10     	; 0x1132 <__stack+0x33>
    1128:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <pwm_timer_ms+0x1>
    112c:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <pwm_timer_ms>
    1130:	19 c0       	rjmp	.+50     	; 0x1164 <__stack+0x65>
    1132:	87 5e       	subi	r24, 0xE7	; 231
    1134:	93 40       	sbci	r25, 0x03	; 3
    1136:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    113a:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    113e:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <pwm_timer_sec>
    1142:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <pwm_timer_sec+0x1>
    1146:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <pwm_timer_sec+0x2>
    114a:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <pwm_timer_sec+0x3>
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <pwm_timer_sec>
    1158:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <pwm_timer_sec+0x1>
    115c:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <pwm_timer_sec+0x2>
    1160:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <pwm_timer_sec+0x3>
    1164:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    1168:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	23 e0       	ldi	r18, 0x03	; 3
    1170:	92 07       	cpc	r25, r18
    1172:	10 f0       	brcs	.+4      	; 0x1178 <__stack+0x79>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	94 e0       	ldi	r25, 0x04	; 4
    1178:	9b bd       	out	0x2b, r25	; 43
    117a:	8a bd       	out	0x2a, r24	; 42
    117c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    1180:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	43 e0       	ldi	r20, 0x03	; 3
    1188:	94 07       	cpc	r25, r20
    118a:	10 f0       	brcs	.+4      	; 0x1190 <__stack+0x91>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	94 e0       	ldi	r25, 0x04	; 4
    1190:	99 bd       	out	0x29, r25	; 41
    1192:	88 bd       	out	0x28, r24	; 40
    1194:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    1198:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	23 e0       	ldi	r18, 0x03	; 3
    11a0:	92 07       	cpc	r25, r18
    11a2:	10 f0       	brcs	.+4      	; 0x11a8 <__stack+0xa9>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	94 e0       	ldi	r25, 0x04	; 4
    11a8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    11ac:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <delay>:
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	41 f0       	breq	.+16     	; 0x11dc <delay+0x14>
    11cc:	ef e9       	ldi	r30, 0x9F	; 159
    11ce:	ff e0       	ldi	r31, 0x0F	; 15
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <delay+0x8>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <delay+0xe>
    11d6:	00 00       	nop
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f6 cf       	rjmp	.-20     	; 0x11c8 <delay>
    11dc:	08 95       	ret

000011de <spi_tx>:
    11de:	8f b9       	out	0x0f, r24	; 15
    11e0:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <spi_tx_chk>
    11e4:	89 27       	eor	r24, r25
    11e6:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <spi_tx_chk>
    11ea:	08 95       	ret

000011ec <spi_restart_transmission>:
    11ec:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <spi_pos>
    11f0:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <spi_tx_size>
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	98 0f       	add	r25, r24
    11f8:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <spi_size>
    11fc:	96 e9       	ldi	r25, 0x96	; 150
    11fe:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <spi_tx_chk>
    1202:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    1206:	f8 94       	cli
    1208:	b0 99       	sbic	0x16, 0	; 22
    120a:	03 c0       	rjmp	.+6      	; 0x1212 <spi_restart_transmission+0x26>
    120c:	78 94       	sei
    120e:	00 00       	nop
    1210:	fa cf       	rjmp	.-12     	; 0x1206 <spi_restart_transmission+0x1a>
    1212:	90 ec       	ldi	r25, 0xC0	; 192
    1214:	9d b9       	out	0x0d, r25	; 13
    1216:	0e 94 ef 08 	call	0x11de	; 0x11de <spi_tx>
    121a:	77 9a       	sbi	0x0e, 7	; 14
    121c:	78 94       	sei
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	08 95       	ret

00001222 <spi_init>:
    1222:	b8 98       	cbi	0x17, 0	; 23
    1224:	c0 98       	cbi	0x18, 0	; 24
    1226:	bb 9a       	sbi	0x17, 3	; 23
    1228:	c3 9a       	sbi	0x18, 3	; 24
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <spi_restart_transmission>

00001230 <__vector_17>:
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
    1256:	8f b1       	in	r24, 0x0f	; 15
    1258:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <spi_rx_chk>
    125c:	98 27       	eor	r25, r24
    125e:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    1262:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <spi_pos>
    1266:	e1 11       	cpse	r30, r1
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <__vector_17+0x66>
    126a:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <spi_rx_size>
    126e:	8c 31       	cpi	r24, 0x1C	; 28
    1270:	30 f0       	brcs	.+12     	; 0x127e <__vector_17+0x4e>
    1272:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <spi_tx_size>
    1276:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <__vector_17+0x60>
    127e:	48 2f       	mov	r20, r24
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <spi_size>
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	42 17       	cp	r20, r18
    128a:	53 07       	cpc	r21, r19
    128c:	fc f0       	brlt	.+62     	; 0x12cc <__vector_17+0x9c>
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <spi_size>
    1294:	1b c0       	rjmp	.+54     	; 0x12cc <__vector_17+0x9c>
    1296:	2e 2f       	mov	r18, r30
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <spi_rx_size>
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	42 17       	cp	r20, r18
    12a2:	53 07       	cpc	r21, r19
    12a4:	2c f0       	brlt	.+10     	; 0x12b0 <__vector_17+0x80>
    12a6:	d9 01       	movw	r26, r18
    12a8:	ab 51       	subi	r26, 0x1B	; 27
    12aa:	bc 4f       	sbci	r27, 0xFC	; 252
    12ac:	8c 93       	st	X, r24
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <__vector_17+0x9c>
    12b0:	21 50       	subi	r18, 0x01	; 1
    12b2:	31 09       	sbc	r19, r1
    12b4:	42 17       	cp	r20, r18
    12b6:	53 07       	cpc	r21, r19
    12b8:	49 f4       	brne	.+18     	; 0x12cc <__vector_17+0x9c>
    12ba:	99 23       	and	r25, r25
    12bc:	39 f0       	breq	.+14     	; 0x12cc <__vector_17+0x9c>
    12be:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <spi_err_cnt>
    12c2:	8f 5f       	subi	r24, 0xFF	; 255
    12c4:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <spi_err_cnt>
    12c8:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    12cc:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <spi_tx_size>
    12d0:	e8 17       	cp	r30, r24
    12d2:	28 f4       	brcc	.+10     	; 0x12de <__vector_17+0xae>
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	ea 53       	subi	r30, 0x3A	; 58
    12d8:	fc 4f       	sbci	r31, 0xFC	; 252
    12da:	80 81       	ld	r24, Z
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <__vector_17+0xc2>
    12de:	e8 13       	cpse	r30, r24
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <__vector_17+0xb8>
    12e2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <spi_tx_chk>
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <__vector_17+0xc2>
    12e8:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <spi_size>
    12ec:	e8 17       	cp	r30, r24
    12ee:	48 f4       	brcc	.+18     	; 0x1302 <__vector_17+0xd2>
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	0e 94 ef 08 	call	0x11de	; 0x11de <spi_tx>
    12f6:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <spi_pos>
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <spi_pos>
    1300:	11 c0       	rjmp	.+34     	; 0x1324 <__vector_17+0xf4>
    1302:	b8 98       	cbi	0x17, 0	; 23
    1304:	c0 98       	cbi	0x18, 0	; 24
    1306:	1d b8       	out	0x0d, r1	; 13
    1308:	b8 98       	cbi	0x17, 0	; 23
    130a:	c0 98       	cbi	0x18, 0	; 24
    130c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <spi_frame_cnt>
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <spi_frame_cnt>
    1316:	78 94       	sei
    1318:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <spi_rx_size>
    131c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <spi_finished_callback>
    1320:	0e 94 f6 08 	call	0x11ec	; 0x11ec <spi_restart_transmission>
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0b be       	out	0x3b, r0	; 59
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <gfx_store_disp_tile>:
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	c8 2f       	mov	r28, r24
    1350:	d8 eb       	ldi	r29, 0xB8	; 184
    1352:	d6 0f       	add	r29, r22
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	00 f5       	brcc	.+64     	; 0x1398 <gfx_store_disp_tile+0x4e>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    135e:	6d 2f       	mov	r22, r29
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    136c:	6c 2f       	mov	r22, r28
    136e:	66 0f       	add	r22, r22
    1370:	66 0f       	add	r22, r22
    1372:	66 0f       	add	r22, r22
    1374:	60 5c       	subi	r22, 0xC0	; 192
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    137c:	c8 e0       	ldi	r28, 0x08	; 8
    137e:	d4 e0       	ldi	r29, 0x04	; 4
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1386:	69 91       	ld	r22, Y+
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	c0 31       	cpi	r28, 0x10	; 16
    1392:	d8 07       	cpc	r29, r24
    1394:	a9 f7       	brne	.-22     	; 0x1380 <gfx_store_disp_tile+0x36>
    1396:	20 c0       	rjmp	.+64     	; 0x13d8 <gfx_store_disp_tile+0x8e>
    1398:	c8 50       	subi	r28, 0x08	; 8
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    13a0:	6d 2f       	mov	r22, r29
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    13ae:	cc 0f       	add	r28, r28
    13b0:	cc 0f       	add	r28, r28
    13b2:	cc 0f       	add	r28, r28
    13b4:	60 e4       	ldi	r22, 0x40	; 64
    13b6:	6c 0f       	add	r22, r28
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    13be:	c8 e0       	ldi	r28, 0x08	; 8
    13c0:	d4 e0       	ldi	r29, 0x04	; 4
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    13c8:	69 91       	ld	r22, Y+
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    13d0:	84 e0       	ldi	r24, 0x04	; 4
    13d2:	c0 31       	cpi	r28, 0x10	; 16
    13d4:	d8 07       	cpc	r29, r24
    13d6:	a9 f7       	brne	.-22     	; 0x13c2 <gfx_store_disp_tile+0x78>
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	08 95       	ret

000013de <gfx_get_x>:
    13de:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    13e2:	08 95       	ret

000013e4 <gfx_get_y>:
    13e4:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    13e8:	08 95       	ret

000013ea <gfx_draw_mode>:
    13ea:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    13ee:	08 95       	ret

000013f0 <gfx_move>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	d8 2f       	mov	r29, r24
    13f6:	c6 2f       	mov	r28, r22
    13f8:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    13fc:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <gfx_y>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    140c:	c6 95       	lsr	r28
    140e:	c6 95       	lsr	r28
    1410:	c6 95       	lsr	r28
    1412:	c8 54       	subi	r28, 0x48	; 72
    1414:	6c 2f       	mov	r22, r28
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    141c:	6c 2f       	mov	r22, r28
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1430:	60 e4       	ldi	r22, 0x40	; 64
    1432:	d1 34       	cpi	r29, 0x41	; 65
    1434:	28 f0       	brcs	.+10     	; 0x1440 <gfx_move+0x50>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    143c:	6d 2f       	mov	r22, r29
    143e:	05 c0       	rjmp	.+10     	; 0x144a <gfx_move+0x5a>
    1440:	6d 0f       	add	r22, r29
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1448:	60 e4       	ldi	r22, 0x40	; 64
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <display_write>

00001454 <gfx_fill>:
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	18 2f       	mov	r17, r24
    145c:	c8 eb       	ldi	r28, 0xB8	; 184
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    146a:	6c 2f       	mov	r22, r28
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1472:	6c 2f       	mov	r22, r28
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    147a:	d0 e4       	ldi	r29, 0x40	; 64
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1488:	61 2f       	mov	r22, r17
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1490:	61 2f       	mov	r22, r17
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1498:	d1 50       	subi	r29, 0x01	; 1
    149a:	81 f7       	brne	.-32     	; 0x147c <gfx_fill+0x28>
    149c:	cf 5f       	subi	r28, 0xFF	; 255
    149e:	c0 3c       	cpi	r28, 0xC0	; 192
    14a0:	f1 f6       	brne	.-68     	; 0x145e <gfx_fill+0xa>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    14ae:	68 eb       	ldi	r22, 0xB8	; 184
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    14b6:	68 eb       	ldi	r22, 0xB8	; 184
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <display_write>

000014c4 <gfx_display_write2>:
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	d8 2f       	mov	r29, r24
    14ce:	c6 2f       	mov	r28, r22
    14d0:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    14d4:	87 fd       	sbrc	r24, 7
    14d6:	37 c0       	rjmp	.+110    	; 0x1546 <gfx_display_write2+0x82>
    14d8:	11 e0       	ldi	r17, 0x01	; 1
    14da:	80 34       	cpi	r24, 0x40	; 64
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <gfx_display_write2+0x1c>
    14de:	10 e0       	ldi	r17, 0x00	; 0
    14e0:	81 2f       	mov	r24, r17
    14e2:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    14e6:	02 e0       	ldi	r16, 0x02	; 2
    14e8:	01 0f       	add	r16, r17
    14ea:	80 2f       	mov	r24, r16
    14ec:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    14f0:	80 2f       	mov	r24, r16
    14f2:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    14f6:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <gfx_dm>
    14fa:	92 ff       	sbrs	r25, 2
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <gfx_display_write2+0x3e>
    14fe:	d0 95       	com	r29
    1500:	9b 7f       	andi	r25, 0xFB	; 251
    1502:	dc 23       	and	r29, r28
    1504:	91 11       	cpse	r25, r1
    1506:	02 c0       	rjmp	.+4      	; 0x150c <gfx_display_write2+0x48>
    1508:	c8 2f       	mov	r28, r24
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <gfx_display_write2+0x50>
    150c:	91 30       	cpi	r25, 0x01	; 1
    150e:	21 f4       	brne	.+8      	; 0x1518 <gfx_display_write2+0x54>
    1510:	c0 95       	com	r28
    1512:	c8 23       	and	r28, r24
    1514:	cd 2b       	or	r28, r29
    1516:	02 c0       	rjmp	.+4      	; 0x151c <gfx_display_write2+0x58>
    1518:	c8 2f       	mov	r28, r24
    151a:	cd 27       	eor	r28, r29
    151c:	81 2f       	mov	r24, r17
    151e:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1522:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <gfx_x>
    1526:	60 64       	ori	r22, 0x40	; 64
    1528:	81 2f       	mov	r24, r17
    152a:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    152e:	81 2f       	mov	r24, r17
    1530:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1534:	6c 2f       	mov	r22, r28
    1536:	80 2f       	mov	r24, r16
    1538:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    153c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <gfx_char_width>:
    1550:	90 ee       	ldi	r25, 0xE0	; 224
    1552:	98 0f       	add	r25, r24
    1554:	90 36       	cpi	r25, 0x60	; 96
    1556:	08 f0       	brcs	.+2      	; 0x155a <gfx_char_width+0xa>
    1558:	80 e8       	ldi	r24, 0x80	; 128
    155a:	80 52       	subi	r24, 0x20	; 32
    155c:	96 e0       	ldi	r25, 0x06	; 6
    155e:	89 9f       	mul	r24, r25
    1560:	f0 01       	movw	r30, r0
    1562:	11 24       	eor	r1, r1
    1564:	ec 59       	subi	r30, 0x9C	; 156
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	90 81       	ld	r25, Z
    156a:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    156e:	81 11       	cpse	r24, r1
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <gfx_char_width+0x24>
    1572:	9f e1       	ldi	r25, 0x1F	; 31
    1574:	25 e0       	ldi	r18, 0x05	; 5
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 fd       	sbrc	r25, 0
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	96 95       	lsr	r25
    157e:	21 50       	subi	r18, 0x01	; 1
    1580:	d9 f7       	brne	.-10     	; 0x1578 <gfx_char_width+0x28>
    1582:	08 95       	ret

00001584 <gfx_print_char_base>:
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	c6 2f       	mov	r28, r22
    15a0:	90 ee       	ldi	r25, 0xE0	; 224
    15a2:	98 0f       	add	r25, r24
    15a4:	90 36       	cpi	r25, 0x60	; 96
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <gfx_print_char_base+0x26>
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	80 52       	subi	r24, 0x20	; 32
    15ac:	26 e0       	ldi	r18, 0x06	; 6
    15ae:	82 9f       	mul	r24, r18
    15b0:	c0 01       	movw	r24, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	fc 01       	movw	r30, r24
    15b6:	eb 59       	subi	r30, 0x9B	; 155
    15b8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ba:	7f 01       	movw	r14, r30
    15bc:	fc 01       	movw	r30, r24
    15be:	ec 59       	subi	r30, 0x9C	; 156
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	90 80       	ld	r9, Z
    15c4:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    15c8:	81 11       	cpse	r24, r1
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <gfx_print_char_base+0x4c>
    15cc:	9f e1       	ldi	r25, 0x1F	; 31
    15ce:	99 2e       	mov	r9, r25
    15d0:	ac 2e       	mov	r10, r28
    15d2:	0c 2e       	mov	r0, r28
    15d4:	00 0c       	add	r0, r0
    15d6:	bb 08       	sbc	r11, r11
    15d8:	6f ef       	ldi	r22, 0xFF	; 255
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	6b 01       	movw	r12, r22
    15de:	0c 2e       	mov	r0, r28
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <gfx_print_char_base+0x60>
    15e2:	cc 0c       	add	r12, r12
    15e4:	0a 94       	dec	r0
    15e6:	ea f7       	brpl	.-6      	; 0x15e2 <gfx_print_char_base+0x5e>
    15e8:	8c 2c       	mov	r8, r12
    15ea:	00 27       	eor	r16, r16
    15ec:	11 27       	eor	r17, r17
    15ee:	0a 19       	sub	r16, r10
    15f0:	1b 09       	sbc	r17, r11
    15f2:	00 2e       	mov	r0, r16
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <gfx_print_char_base+0x76>
    15f6:	75 95       	asr	r23
    15f8:	67 95       	ror	r22
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <gfx_print_char_base+0x72>
    15fe:	d6 2f       	mov	r29, r22
    1600:	85 e0       	ldi	r24, 0x05	; 5
    1602:	78 2e       	mov	r7, r24
    1604:	90 fe       	sbrs	r9, 0
    1606:	15 c0       	rjmp	.+42     	; 0x1632 <gfx_print_char_base+0xae>
    1608:	f7 01       	movw	r30, r14
    160a:	80 81       	ld	r24, Z
    160c:	c7 fd       	sbrc	r28, 7
    160e:	07 c0       	rjmp	.+14     	; 0x161e <gfx_print_char_base+0x9a>
    1610:	68 2d       	mov	r22, r8
    1612:	0a 2c       	mov	r0, r10
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <gfx_print_char_base+0x94>
    1616:	88 0f       	add	r24, r24
    1618:	0a 94       	dec	r0
    161a:	ea f7       	brpl	.-6      	; 0x1616 <gfx_print_char_base+0x92>
    161c:	08 c0       	rjmp	.+16     	; 0x162e <gfx_print_char_base+0xaa>
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	00 2e       	mov	r0, r16
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <gfx_print_char_base+0xa4>
    1624:	95 95       	asr	r25
    1626:	87 95       	ror	r24
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <gfx_print_char_base+0xa0>
    162c:	6d 2f       	mov	r22, r29
    162e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <gfx_display_write2>
    1632:	96 94       	lsr	r9
    1634:	ff ef       	ldi	r31, 0xFF	; 255
    1636:	ef 1a       	sub	r14, r31
    1638:	ff 0a       	sbc	r15, r31
    163a:	7a 94       	dec	r7
    163c:	71 10       	cpse	r7, r1
    163e:	e2 cf       	rjmp	.-60     	; 0x1604 <gfx_print_char_base+0x80>
    1640:	c7 fd       	sbrc	r28, 7
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <gfx_print_char_base+0xc4>
    1644:	6c 2d       	mov	r22, r12
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <gfx_print_char_base+0xd2>
    1648:	6f ef       	ldi	r22, 0xFF	; 255
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <gfx_print_char_base+0xce>
    164e:	75 95       	asr	r23
    1650:	67 95       	ror	r22
    1652:	0a 95       	dec	r16
    1654:	e2 f7       	brpl	.-8      	; 0x164e <gfx_print_char_base+0xca>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	cf 90       	pop	r12
    1668:	bf 90       	pop	r11
    166a:	af 90       	pop	r10
    166c:	9f 90       	pop	r9
    166e:	8f 90       	pop	r8
    1670:	7f 90       	pop	r7
    1672:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <gfx_display_write2>

00001676 <gfx_print_char>:
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	d8 2f       	mov	r29, r24
    167e:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <gfx_x>
    1682:	c0 91 10 04 	lds	r28, 0x0410	; 0x800410 <gfx_y>
    1686:	c7 70       	andi	r28, 0x07	; 7
    1688:	6c 2f       	mov	r22, r28
    168a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gfx_print_char_base>
    168e:	cc 23       	and	r28, r28
    1690:	a9 f0       	breq	.+42     	; 0x16bc <gfx_print_char+0x46>
    1692:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    1696:	68 5f       	subi	r22, 0xF8	; 248
    1698:	81 2f       	mov	r24, r17
    169a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    169e:	68 ef       	ldi	r22, 0xF8	; 248
    16a0:	6c 0f       	add	r22, r28
    16a2:	8d 2f       	mov	r24, r29
    16a4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <gfx_print_char_base>
    16a8:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    16ac:	68 50       	subi	r22, 0x08	; 8
    16ae:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <gfx_move>
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	08 95       	ret

000016c4 <gfx_print_text>:
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	89 91       	ld	r24, Y+
    16cc:	88 23       	and	r24, r24
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <gfx_print_text+0x12>
    16d0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <gfx_print_char>
    16d4:	fa cf       	rjmp	.-12     	; 0x16ca <gfx_print_text+0x6>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <gfx_text_width>:
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	8c 01       	movw	r16, r24
    16e4:	c0 e0       	ldi	r28, 0x00	; 0
    16e6:	f8 01       	movw	r30, r16
    16e8:	81 91       	ld	r24, Z+
    16ea:	8f 01       	movw	r16, r30
    16ec:	88 23       	and	r24, r24
    16ee:	31 f0       	breq	.+12     	; 0x16fc <gfx_text_width+0x20>
    16f0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <gfx_char_width>
    16f4:	8c 0f       	add	r24, r28
    16f6:	c1 e0       	ldi	r28, 0x01	; 1
    16f8:	c8 0f       	add	r28, r24
    16fa:	f5 cf       	rjmp	.-22     	; 0x16e6 <gfx_text_width+0xa>
    16fc:	8c 2f       	mov	r24, r28
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <gfx_print_text_P>:
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
    170c:	ce 01       	movw	r24, r28
    170e:	fe 01       	movw	r30, r28
    1710:	24 91       	lpm	r18, Z
    1712:	22 23       	and	r18, r18
    1714:	31 f0       	breq	.+12     	; 0x1722 <gfx_print_text_P+0x1c>
    1716:	21 96       	adiw	r28, 0x01	; 1
    1718:	fc 01       	movw	r30, r24
    171a:	84 91       	lpm	r24, Z
    171c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <gfx_print_char>
    1720:	f5 cf       	rjmp	.-22     	; 0x170c <gfx_print_text_P+0x6>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <gfx_text_width_P>:
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	8c 01       	movw	r16, r24
    1730:	c0 e0       	ldi	r28, 0x00	; 0
    1732:	c8 01       	movw	r24, r16
    1734:	f8 01       	movw	r30, r16
    1736:	24 91       	lpm	r18, Z
    1738:	22 23       	and	r18, r18
    173a:	51 f0       	breq	.+20     	; 0x1750 <gfx_text_width_P+0x28>
    173c:	0f 5f       	subi	r16, 0xFF	; 255
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	fc 01       	movw	r30, r24
    1742:	84 91       	lpm	r24, Z
    1744:	0e 94 a8 0a 	call	0x1550	; 0x1550 <gfx_char_width>
    1748:	8c 0f       	add	r24, r28
    174a:	c1 e0       	ldi	r28, 0x01	; 1
    174c:	c8 0f       	add	r28, r24
    174e:	f1 cf       	rjmp	.-30     	; 0x1732 <gfx_text_width_P+0xa>
    1750:	8c 2f       	mov	r24, r28
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <gfx_init>:
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1760:	6f e3       	ldi	r22, 0x3F	; 63
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    176e:	60 ec       	ldi	r22, 0xC0	; 192
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    177c:	60 e4       	ldi	r22, 0x40	; 64
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    178a:	68 eb       	ldi	r22, 0xB8	; 184
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1798:	6f e3       	ldi	r22, 0x3F	; 63
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    17a6:	60 ec       	ldi	r22, 0xC0	; 192
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    17b4:	60 e4       	ldi	r22, 0x40	; 64
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    17c2:	68 eb       	ldi	r22, 0xB8	; 184
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <gfx_fill>
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    17d6:	08 95       	ret

000017d8 <gfx_set_proportional>:
    17d8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <gfx_proportional>
    17dc:	08 95       	ret

000017de <gfx_get_proportional>:
    17de:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    17e2:	08 95       	ret

000017e4 <gfx_hline>:
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    17ec:	97 70       	andi	r25, 0x07	; 7
    17ee:	c1 e0       	ldi	r28, 0x01	; 1
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <gfx_hline+0x10>
    17f2:	cc 0f       	add	r28, r28
    17f4:	9a 95       	dec	r25
    17f6:	ea f7       	brpl	.-6      	; 0x17f2 <gfx_hline+0xe>
    17f8:	d8 2f       	mov	r29, r24
    17fa:	dd 23       	and	r29, r29
    17fc:	31 f0       	breq	.+12     	; 0x180a <gfx_hline+0x26>
    17fe:	6c 2f       	mov	r22, r28
    1800:	8c 2f       	mov	r24, r28
    1802:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <gfx_display_write2>
    1806:	d1 50       	subi	r29, 0x01	; 1
    1808:	f8 cf       	rjmp	.-16     	; 0x17fa <gfx_hline+0x16>
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <gfx_box>:
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	b8 2e       	mov	r11, r24
    1826:	c6 2f       	mov	r28, r22
    1828:	e0 90 07 04 	lds	r14, 0x0407	; 0x800407 <gfx_x>
    182c:	10 91 10 04 	lds	r17, 0x0410	; 0x800410 <gfx_y>
    1830:	81 2f       	mov	r24, r17
    1832:	87 70       	andi	r24, 0x07	; 7
    1834:	df ef       	ldi	r29, 0xFF	; 255
    1836:	01 c0       	rjmp	.+2      	; 0x183a <gfx_box+0x2a>
    1838:	dd 0f       	add	r29, r29
    183a:	8a 95       	dec	r24
    183c:	ea f7       	brpl	.-6      	; 0x1838 <gfx_box+0x28>
    183e:	88 e0       	ldi	r24, 0x08	; 8
    1840:	a8 2e       	mov	r10, r24
    1842:	cc 24       	eor	r12, r12
    1844:	ca 94       	dec	r12
    1846:	d1 2c       	mov	r13, r1
    1848:	cc 23       	and	r28, r28
    184a:	21 f1       	breq	.+72     	; 0x1894 <gfx_box+0x84>
    184c:	81 2f       	mov	r24, r17
    184e:	87 70       	andi	r24, 0x07	; 7
    1850:	0a 2d       	mov	r16, r10
    1852:	08 1b       	sub	r16, r24
    1854:	c0 17       	cp	r28, r16
    1856:	48 f4       	brcc	.+18     	; 0x186a <gfx_box+0x5a>
    1858:	80 2f       	mov	r24, r16
    185a:	8c 1b       	sub	r24, r28
    185c:	96 01       	movw	r18, r12
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <gfx_box+0x54>
    1860:	35 95       	asr	r19
    1862:	27 95       	ror	r18
    1864:	8a 95       	dec	r24
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <gfx_box+0x50>
    1868:	d2 23       	and	r29, r18
    186a:	fb 2c       	mov	r15, r11
    186c:	ff 20       	and	r15, r15
    186e:	31 f0       	breq	.+12     	; 0x187c <gfx_box+0x6c>
    1870:	6d 2f       	mov	r22, r29
    1872:	8d 2f       	mov	r24, r29
    1874:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <gfx_display_write2>
    1878:	fa 94       	dec	r15
    187a:	f8 cf       	rjmp	.-16     	; 0x186c <gfx_box+0x5c>
    187c:	8c 2f       	mov	r24, r28
    187e:	0c 17       	cp	r16, r28
    1880:	08 f4       	brcc	.+2      	; 0x1884 <gfx_box+0x74>
    1882:	80 2f       	mov	r24, r16
    1884:	c8 1b       	sub	r28, r24
    1886:	18 0f       	add	r17, r24
    1888:	61 2f       	mov	r22, r17
    188a:	8e 2d       	mov	r24, r14
    188c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1890:	df ef       	ldi	r29, 0xFF	; 255
    1892:	da cf       	rjmp	.-76     	; 0x1848 <gfx_box+0x38>
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	bf 90       	pop	r11
    18a6:	af 90       	pop	r10
    18a8:	08 95       	ret

000018aa <gfx_vline>:
    18aa:	68 2f       	mov	r22, r24
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <gfx_box>

000018b2 <gfx_draw_xbm>:
    18b2:	2f 92       	push	r2
    18b4:	3f 92       	push	r3
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	48 2e       	mov	r4, r24
    18d8:	d6 2f       	mov	r29, r22
    18da:	5a 01       	movw	r10, r20
    18dc:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    18e0:	80 90 10 04 	lds	r8, 0x0410	; 0x800410 <gfx_y>
    18e4:	88 2d       	mov	r24, r8
    18e6:	87 70       	andi	r24, 0x07	; 7
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
    18ea:	99 2e       	mov	r9, r25
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <gfx_draw_xbm+0x3e>
    18ee:	99 0c       	add	r9, r9
    18f0:	8a 95       	dec	r24
    18f2:	ea f7       	brpl	.-6      	; 0x18ee <gfx_draw_xbm+0x3c>
    18f4:	24 2d       	mov	r18, r4
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	c9 01       	movw	r24, r18
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	97 fd       	sbrc	r25, 7
    18fe:	07 96       	adiw	r24, 0x07	; 7
    1900:	23 e0       	ldi	r18, 0x03	; 3
    1902:	95 95       	asr	r25
    1904:	87 95       	ror	r24
    1906:	2a 95       	dec	r18
    1908:	e1 f7       	brne	.-8      	; 0x1902 <gfx_draw_xbm+0x50>
    190a:	c1 e0       	ldi	r28, 0x01	; 1
    190c:	c8 0f       	add	r28, r24
    190e:	ec 2e       	mov	r14, r28
    1910:	f1 2c       	mov	r15, r1
    1912:	67 01       	movw	r12, r14
    1914:	33 e0       	ldi	r19, 0x03	; 3
    1916:	cc 0c       	add	r12, r12
    1918:	dd 1c       	adc	r13, r13
    191a:	3a 95       	dec	r19
    191c:	e1 f7       	brne	.-8      	; 0x1916 <gfx_draw_xbm+0x64>
    191e:	51 2c       	mov	r5, r1
    1920:	48 e0       	ldi	r20, 0x08	; 8
    1922:	24 2e       	mov	r2, r20
    1924:	dd 23       	and	r29, r29
    1926:	09 f4       	brne	.+2      	; 0x192a <gfx_draw_xbm+0x78>
    1928:	56 c0       	rjmp	.+172    	; 0x19d6 <gfx_draw_xbm+0x124>
    192a:	88 2d       	mov	r24, r8
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	72 2c       	mov	r7, r2
    1930:	78 1a       	sub	r7, r24
    1932:	d7 15       	cp	r29, r7
    1934:	50 f4       	brcc	.+20     	; 0x194a <gfx_draw_xbm+0x98>
    1936:	87 2d       	mov	r24, r7
    1938:	8d 1b       	sub	r24, r29
    193a:	2f ef       	ldi	r18, 0xFF	; 255
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <gfx_draw_xbm+0x92>
    1940:	35 95       	asr	r19
    1942:	27 95       	ror	r18
    1944:	8a 95       	dec	r24
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <gfx_draw_xbm+0x8e>
    1948:	92 22       	and	r9, r18
    194a:	05 2d       	mov	r16, r5
    194c:	07 0d       	add	r16, r7
    194e:	c0 9f       	mul	r28, r16
    1950:	80 01       	movw	r16, r0
    1952:	11 24       	eor	r1, r1
    1954:	61 2c       	mov	r6, r1
    1956:	64 14       	cp	r6, r4
    1958:	81 f1       	breq	.+96     	; 0x19ba <gfx_draw_xbm+0x108>
    195a:	86 2d       	mov	r24, r6
    195c:	87 70       	andi	r24, 0x07	; 7
    195e:	59 f0       	breq	.+22     	; 0x1976 <gfx_draw_xbm+0xc4>
    1960:	e8 2f       	mov	r30, r24
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	e8 5f       	subi	r30, 0xF8	; 248
    1966:	fb 4f       	sbci	r31, 0xFB	; 251
    1968:	80 81       	ld	r24, Z
    196a:	69 2d       	mov	r22, r9
    196c:	89 21       	and	r24, r9
    196e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <gfx_display_write2>
    1972:	63 94       	inc	r6
    1974:	f0 cf       	rjmp	.-32     	; 0x1956 <gfx_draw_xbm+0xa4>
    1976:	96 2d       	mov	r25, r6
    1978:	96 95       	lsr	r25
    197a:	96 95       	lsr	r25
    197c:	96 95       	lsr	r25
    197e:	f8 01       	movw	r30, r16
    1980:	e9 0f       	add	r30, r25
    1982:	f1 1d       	adc	r31, r1
    1984:	ec 19       	sub	r30, r12
    1986:	fd 09       	sbc	r31, r13
    1988:	ea 0d       	add	r30, r10
    198a:	fb 1d       	adc	r31, r11
    198c:	28 e0       	ldi	r18, 0x08	; 8
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 81       	ld	r20, Z
    1992:	a8 e0       	ldi	r26, 0x08	; 8
    1994:	b4 e0       	ldi	r27, 0x04	; 4
    1996:	9c 91       	ld	r25, X
    1998:	96 95       	lsr	r25
    199a:	40 fd       	sbrc	r20, 0
    199c:	90 68       	ori	r25, 0x80	; 128
    199e:	9c 93       	st	X, r25
    19a0:	46 95       	lsr	r20
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	60 e1       	ldi	r22, 0x10	; 16
    19a6:	74 e0       	ldi	r23, 0x04	; 4
    19a8:	6a 17       	cp	r22, r26
    19aa:	7b 07       	cpc	r23, r27
    19ac:	a1 f7       	brne	.-24     	; 0x1996 <gfx_draw_xbm+0xe4>
    19ae:	ee 0d       	add	r30, r14
    19b0:	ff 1d       	adc	r31, r15
    19b2:	21 50       	subi	r18, 0x01	; 1
    19b4:	31 09       	sbc	r19, r1
    19b6:	61 f7       	brne	.-40     	; 0x1990 <gfx_draw_xbm+0xde>
    19b8:	d3 cf       	rjmp	.-90     	; 0x1960 <gfx_draw_xbm+0xae>
    19ba:	8d 2f       	mov	r24, r29
    19bc:	7d 16       	cp	r7, r29
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <gfx_draw_xbm+0x110>
    19c0:	87 2d       	mov	r24, r7
    19c2:	d8 1b       	sub	r29, r24
    19c4:	88 0e       	add	r8, r24
    19c6:	58 0e       	add	r5, r24
    19c8:	68 2d       	mov	r22, r8
    19ca:	83 2d       	mov	r24, r3
    19cc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    19d0:	99 24       	eor	r9, r9
    19d2:	9a 94       	dec	r9
    19d4:	a7 cf       	rjmp	.-178    	; 0x1924 <gfx_draw_xbm+0x72>
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	3f 90       	pop	r3
    19f8:	2f 90       	pop	r2
    19fa:	08 95       	ret

000019fc <gfx_draw_xbm_P>:
    19fc:	2f 92       	push	r2
    19fe:	3f 92       	push	r3
    1a00:	4f 92       	push	r4
    1a02:	5f 92       	push	r5
    1a04:	6f 92       	push	r6
    1a06:	7f 92       	push	r7
    1a08:	8f 92       	push	r8
    1a0a:	9f 92       	push	r9
    1a0c:	af 92       	push	r10
    1a0e:	bf 92       	push	r11
    1a10:	cf 92       	push	r12
    1a12:	df 92       	push	r13
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	48 2e       	mov	r4, r24
    1a22:	d6 2f       	mov	r29, r22
    1a24:	4a 01       	movw	r8, r20
    1a26:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    1a2a:	00 91 10 04 	lds	r16, 0x0410	; 0x800410 <gfx_y>
    1a2e:	80 2f       	mov	r24, r16
    1a30:	87 70       	andi	r24, 0x07	; 7
    1a32:	1f ef       	ldi	r17, 0xFF	; 255
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <gfx_draw_xbm_P+0x3c>
    1a36:	11 0f       	add	r17, r17
    1a38:	8a 95       	dec	r24
    1a3a:	ea f7       	brpl	.-6      	; 0x1a36 <gfx_draw_xbm_P+0x3a>
    1a3c:	24 2d       	mov	r18, r4
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	c9 01       	movw	r24, r18
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	97 fd       	sbrc	r25, 7
    1a46:	07 96       	adiw	r24, 0x07	; 7
    1a48:	23 e0       	ldi	r18, 0x03	; 3
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	2a 95       	dec	r18
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <gfx_draw_xbm_P+0x4e>
    1a52:	c1 e0       	ldi	r28, 0x01	; 1
    1a54:	c8 0f       	add	r28, r24
    1a56:	cc 2e       	mov	r12, r28
    1a58:	d1 2c       	mov	r13, r1
    1a5a:	56 01       	movw	r10, r12
    1a5c:	33 e0       	ldi	r19, 0x03	; 3
    1a5e:	aa 0c       	add	r10, r10
    1a60:	bb 1c       	adc	r11, r11
    1a62:	3a 95       	dec	r19
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <gfx_draw_xbm_P+0x62>
    1a66:	51 2c       	mov	r5, r1
    1a68:	48 e0       	ldi	r20, 0x08	; 8
    1a6a:	24 2e       	mov	r2, r20
    1a6c:	dd 23       	and	r29, r29
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <gfx_draw_xbm_P+0x76>
    1a70:	55 c0       	rjmp	.+170    	; 0x1b1c <gfx_draw_xbm_P+0x120>
    1a72:	80 2f       	mov	r24, r16
    1a74:	87 70       	andi	r24, 0x07	; 7
    1a76:	72 2c       	mov	r7, r2
    1a78:	78 1a       	sub	r7, r24
    1a7a:	d7 15       	cp	r29, r7
    1a7c:	50 f4       	brcc	.+20     	; 0x1a92 <gfx_draw_xbm_P+0x96>
    1a7e:	87 2d       	mov	r24, r7
    1a80:	8d 1b       	sub	r24, r29
    1a82:	2f ef       	ldi	r18, 0xFF	; 255
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <gfx_draw_xbm_P+0x90>
    1a88:	35 95       	asr	r19
    1a8a:	27 95       	ror	r18
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <gfx_draw_xbm_P+0x8c>
    1a90:	12 23       	and	r17, r18
    1a92:	e5 2c       	mov	r14, r5
    1a94:	e7 0c       	add	r14, r7
    1a96:	ce 9d       	mul	r28, r14
    1a98:	70 01       	movw	r14, r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	61 2c       	mov	r6, r1
    1a9e:	64 14       	cp	r6, r4
    1aa0:	81 f1       	breq	.+96     	; 0x1b02 <gfx_draw_xbm_P+0x106>
    1aa2:	86 2d       	mov	r24, r6
    1aa4:	87 70       	andi	r24, 0x07	; 7
    1aa6:	59 f0       	breq	.+22     	; 0x1abe <gfx_draw_xbm_P+0xc2>
    1aa8:	e8 2f       	mov	r30, r24
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	e8 5f       	subi	r30, 0xF8	; 248
    1aae:	fb 4f       	sbci	r31, 0xFB	; 251
    1ab0:	80 81       	ld	r24, Z
    1ab2:	61 2f       	mov	r22, r17
    1ab4:	81 23       	and	r24, r17
    1ab6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <gfx_display_write2>
    1aba:	63 94       	inc	r6
    1abc:	f0 cf       	rjmp	.-32     	; 0x1a9e <gfx_draw_xbm_P+0xa2>
    1abe:	96 2d       	mov	r25, r6
    1ac0:	96 95       	lsr	r25
    1ac2:	96 95       	lsr	r25
    1ac4:	96 95       	lsr	r25
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	e9 0f       	add	r30, r25
    1aca:	f1 1d       	adc	r31, r1
    1acc:	ea 19       	sub	r30, r10
    1ace:	fb 09       	sbc	r31, r11
    1ad0:	e8 0d       	add	r30, r8
    1ad2:	f9 1d       	adc	r31, r9
    1ad4:	28 e0       	ldi	r18, 0x08	; 8
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	44 91       	lpm	r20, Z
    1ada:	a8 e0       	ldi	r26, 0x08	; 8
    1adc:	b4 e0       	ldi	r27, 0x04	; 4
    1ade:	9c 91       	ld	r25, X
    1ae0:	96 95       	lsr	r25
    1ae2:	40 fd       	sbrc	r20, 0
    1ae4:	90 68       	ori	r25, 0x80	; 128
    1ae6:	9c 93       	st	X, r25
    1ae8:	46 95       	lsr	r20
    1aea:	11 96       	adiw	r26, 0x01	; 1
    1aec:	60 e1       	ldi	r22, 0x10	; 16
    1aee:	74 e0       	ldi	r23, 0x04	; 4
    1af0:	6a 17       	cp	r22, r26
    1af2:	7b 07       	cpc	r23, r27
    1af4:	a1 f7       	brne	.-24     	; 0x1ade <gfx_draw_xbm_P+0xe2>
    1af6:	ec 0d       	add	r30, r12
    1af8:	fd 1d       	adc	r31, r13
    1afa:	21 50       	subi	r18, 0x01	; 1
    1afc:	31 09       	sbc	r19, r1
    1afe:	61 f7       	brne	.-40     	; 0x1ad8 <gfx_draw_xbm_P+0xdc>
    1b00:	d3 cf       	rjmp	.-90     	; 0x1aa8 <gfx_draw_xbm_P+0xac>
    1b02:	8d 2f       	mov	r24, r29
    1b04:	7d 16       	cp	r7, r29
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <gfx_draw_xbm_P+0x10e>
    1b08:	87 2d       	mov	r24, r7
    1b0a:	d8 1b       	sub	r29, r24
    1b0c:	08 0f       	add	r16, r24
    1b0e:	58 0e       	add	r5, r24
    1b10:	60 2f       	mov	r22, r16
    1b12:	83 2d       	mov	r24, r3
    1b14:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1b18:	1f ef       	ldi	r17, 0xFF	; 255
    1b1a:	a8 cf       	rjmp	.-176    	; 0x1a6c <gfx_draw_xbm_P+0x70>
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	7f 90       	pop	r7
    1b36:	6f 90       	pop	r6
    1b38:	5f 90       	pop	r5
    1b3a:	4f 90       	pop	r4
    1b3c:	3f 90       	pop	r3
    1b3e:	2f 90       	pop	r2
    1b40:	08 95       	ret

00001b42 <gfx_pixel>:
    1b42:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    1b46:	97 70       	andi	r25, 0x07	; 7
    1b48:	21 e0       	ldi	r18, 0x01	; 1
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <gfx_pixel+0xe>
    1b4e:	22 0f       	add	r18, r18
    1b50:	9a 95       	dec	r25
    1b52:	ea f7       	brpl	.-6      	; 0x1b4e <gfx_pixel+0xc>
    1b54:	88 23       	and	r24, r24
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <gfx_pixel+0x1a>
    1b58:	62 2f       	mov	r22, r18
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <gfx_pixel+0x1c>
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	82 2f       	mov	r24, r18
    1b60:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <gfx_display_write2>

00001b64 <gfx_lineTo>:
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	18 2f       	mov	r17, r24
    1b78:	06 2f       	mov	r16, r22
    1b7a:	d0 91 07 04 	lds	r29, 0x0407	; 0x800407 <gfx_x>
    1b7e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1b82:	d1 13       	cpse	r29, r17
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <gfx_lineTo+0x40>
    1b86:	86 17       	cp	r24, r22
    1b88:	20 f4       	brcc	.+8      	; 0x1b92 <gfx_lineTo+0x2e>
    1b8a:	96 2f       	mov	r25, r22
    1b8c:	98 1b       	sub	r25, r24
    1b8e:	89 2f       	mov	r24, r25
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <gfx_lineTo+0x3a>
    1b92:	c8 2f       	mov	r28, r24
    1b94:	c6 1b       	sub	r28, r22
    1b96:	81 2f       	mov	r24, r17
    1b98:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1b9c:	8c 2f       	mov	r24, r28
    1b9e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <gfx_vline>
    1ba2:	5a c0       	rjmp	.+180    	; 0x1c58 <gfx_lineTo+0xf4>
    1ba4:	f8 2e       	mov	r15, r24
    1ba6:	68 13       	cpse	r22, r24
    1ba8:	0d c0       	rjmp	.+26     	; 0x1bc4 <gfx_lineTo+0x60>
    1baa:	d1 17       	cp	r29, r17
    1bac:	18 f4       	brcc	.+6      	; 0x1bb4 <gfx_lineTo+0x50>
    1bae:	81 2f       	mov	r24, r17
    1bb0:	8d 1b       	sub	r24, r29
    1bb2:	05 c0       	rjmp	.+10     	; 0x1bbe <gfx_lineTo+0x5a>
    1bb4:	d1 1b       	sub	r29, r17
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1bbc:	8d 2f       	mov	r24, r29
    1bbe:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <gfx_hline>
    1bc2:	4a c0       	rjmp	.+148    	; 0x1c58 <gfx_lineTo+0xf4>
    1bc4:	1d 17       	cp	r17, r29
    1bc6:	28 f4       	brcc	.+10     	; 0x1bd2 <gfx_lineTo+0x6e>
    1bc8:	dd 2e       	mov	r13, r29
    1bca:	d1 1a       	sub	r13, r17
    1bcc:	cc 24       	eor	r12, r12
    1bce:	ca 94       	dec	r12
    1bd0:	09 c0       	rjmp	.+18     	; 0x1be4 <gfx_lineTo+0x80>
    1bd2:	d1 17       	cp	r29, r17
    1bd4:	28 f4       	brcc	.+10     	; 0x1be0 <gfx_lineTo+0x7c>
    1bd6:	d1 2e       	mov	r13, r17
    1bd8:	dd 1a       	sub	r13, r29
    1bda:	cc 24       	eor	r12, r12
    1bdc:	c3 94       	inc	r12
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <gfx_lineTo+0x80>
    1be0:	c1 2c       	mov	r12, r1
    1be2:	d1 2c       	mov	r13, r1
    1be4:	08 17       	cp	r16, r24
    1be6:	28 f4       	brcc	.+10     	; 0x1bf2 <gfx_lineTo+0x8e>
    1be8:	c8 2f       	mov	r28, r24
    1bea:	c0 1b       	sub	r28, r16
    1bec:	bb 24       	eor	r11, r11
    1bee:	ba 94       	dec	r11
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <gfx_lineTo+0xa0>
    1bf2:	80 17       	cp	r24, r16
    1bf4:	28 f4       	brcc	.+10     	; 0x1c00 <gfx_lineTo+0x9c>
    1bf6:	c0 2f       	mov	r28, r16
    1bf8:	c8 1b       	sub	r28, r24
    1bfa:	bb 24       	eor	r11, r11
    1bfc:	b3 94       	inc	r11
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <gfx_lineTo+0xa0>
    1c00:	b1 2c       	mov	r11, r1
    1c02:	c0 e0       	ldi	r28, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <gfx_pixel>
    1c0a:	cd 15       	cp	r28, r13
    1c0c:	98 f4       	brcc	.+38     	; 0x1c34 <gfx_lineTo+0xd0>
    1c0e:	ed 2c       	mov	r14, r13
    1c10:	e6 94       	lsr	r14
    1c12:	e1 94       	neg	r14
    1c14:	ec 0e       	add	r14, r28
    1c16:	dc 0d       	add	r29, r12
    1c18:	1e 14       	cp	r1, r14
    1c1a:	14 f4       	brge	.+4      	; 0x1c20 <gfx_lineTo+0xbc>
    1c1c:	ed 18       	sub	r14, r13
    1c1e:	fb 0c       	add	r15, r11
    1c20:	6f 2d       	mov	r22, r15
    1c22:	8d 2f       	mov	r24, r29
    1c24:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <gfx_pixel>
    1c2e:	1d 13       	cpse	r17, r29
    1c30:	f1 cf       	rjmp	.-30     	; 0x1c14 <gfx_lineTo+0xb0>
    1c32:	12 c0       	rjmp	.+36     	; 0x1c58 <gfx_lineTo+0xf4>
    1c34:	ec 2e       	mov	r14, r28
    1c36:	e6 94       	lsr	r14
    1c38:	e1 94       	neg	r14
    1c3a:	ed 0c       	add	r14, r13
    1c3c:	fb 0c       	add	r15, r11
    1c3e:	1e 14       	cp	r1, r14
    1c40:	14 f4       	brge	.+4      	; 0x1c46 <gfx_lineTo+0xe2>
    1c42:	ec 1a       	sub	r14, r28
    1c44:	dc 0d       	add	r29, r12
    1c46:	6f 2d       	mov	r22, r15
    1c48:	8d 2f       	mov	r24, r29
    1c4a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <gfx_pixel>
    1c54:	0f 11       	cpse	r16, r15
    1c56:	f1 cf       	rjmp	.-30     	; 0x1c3a <gfx_lineTo+0xd6>
    1c58:	60 2f       	mov	r22, r16
    1c5a:	81 2f       	mov	r24, r17
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <gfx_move>

00001c72 <gfx_term_clear>:
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 2a 0a 	call	0x1454	; 0x1454 <gfx_fill>
    1c78:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <gfx_term_row>
    1c7c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1c80:	08 95       	ret

00001c82 <gfx_term_goto>:
    1c82:	86 31       	cpi	r24, 0x16	; 22
    1c84:	30 f4       	brcc	.+12     	; 0x1c92 <gfx_term_goto+0x10>
    1c86:	68 30       	cpi	r22, 0x08	; 8
    1c88:	20 f4       	brcc	.+8      	; 0x1c92 <gfx_term_goto+0x10>
    1c8a:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <gfx_term_row>
    1c8e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1c92:	08 95       	ret

00001c94 <gfx_term_scroll>:
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	c9 eb       	ldi	r28, 0xB9	; 185
    1ca6:	20 e1       	ldi	r18, 0x10	; 16
    1ca8:	c2 2e       	mov	r12, r18
    1caa:	24 e0       	ldi	r18, 0x04	; 4
    1cac:	d2 2e       	mov	r13, r18
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	d0 e0       	ldi	r29, 0x00	; 0
    1cb2:	07 e4       	ldi	r16, 0x47	; 71
    1cb4:	0c 0f       	add	r16, r28
    1cb6:	d8 30       	cpi	r29, 0x08	; 8
    1cb8:	50 f5       	brcc	.+84     	; 0x1d0e <gfx_term_scroll+0x7a>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1cc0:	6c 2f       	mov	r22, r28
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1cce:	60 e4       	ldi	r22, 0x40	; 64
    1cd0:	61 0f       	add	r22, r17
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    1cde:	98 e0       	ldi	r25, 0x08	; 8
    1ce0:	e9 2e       	mov	r14, r25
    1ce2:	94 e0       	ldi	r25, 0x04	; 4
    1ce4:	f9 2e       	mov	r15, r25
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    1cec:	f7 01       	movw	r30, r14
    1cee:	81 93       	st	Z+, r24
    1cf0:	7f 01       	movw	r14, r30
    1cf2:	f0 e1       	ldi	r31, 0x10	; 16
    1cf4:	ef 16       	cp	r14, r31
    1cf6:	f4 e0       	ldi	r31, 0x04	; 4
    1cf8:	ff 06       	cpc	r15, r31
    1cfa:	a9 f7       	brne	.-22     	; 0x1ce6 <gfx_term_scroll+0x52>
    1cfc:	60 2f       	mov	r22, r16
    1cfe:	8d 2f       	mov	r24, r29
    1d00:	0e 94 a5 09 	call	0x134a	; 0x134a <gfx_store_disp_tile>
    1d04:	df 5f       	subi	r29, 0xFF	; 255
    1d06:	18 5f       	subi	r17, 0xF8	; 248
    1d08:	d0 31       	cpi	r29, 0x10	; 16
    1d0a:	a9 f6       	brne	.-86     	; 0x1cb6 <gfx_term_scroll+0x22>
    1d0c:	1f c0       	rjmp	.+62     	; 0x1d4c <gfx_term_scroll+0xb8>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1d14:	6c 2f       	mov	r22, r28
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 ac 07 	call	0xf58	; 0xf58 <display_wait>
    1d22:	61 2f       	mov	r22, r17
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	0e 94 2b 07 	call	0xe56	; 0xe56 <display_write>
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    1d30:	88 e0       	ldi	r24, 0x08	; 8
    1d32:	e8 2e       	mov	r14, r24
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	f8 2e       	mov	r15, r24
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	0e 94 6d 07 	call	0xeda	; 0xeda <display_read>
    1d3e:	f7 01       	movw	r30, r14
    1d40:	81 93       	st	Z+, r24
    1d42:	7f 01       	movw	r14, r30
    1d44:	ce 16       	cp	r12, r30
    1d46:	df 06       	cpc	r13, r31
    1d48:	b9 f7       	brne	.-18     	; 0x1d38 <gfx_term_scroll+0xa4>
    1d4a:	d8 cf       	rjmp	.-80     	; 0x1cfc <gfx_term_scroll+0x68>
    1d4c:	cf 5f       	subi	r28, 0xFF	; 255
    1d4e:	c0 3c       	cpi	r28, 0xC0	; 192
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <gfx_term_scroll+0xc0>
    1d52:	ad cf       	rjmp	.-166    	; 0x1cae <gfx_term_scroll+0x1a>
    1d54:	e8 e0       	ldi	r30, 0x08	; 8
    1d56:	f4 e0       	ldi	r31, 0x04	; 4
    1d58:	80 e1       	ldi	r24, 0x10	; 16
    1d5a:	94 e0       	ldi	r25, 0x04	; 4
    1d5c:	11 92       	st	Z+, r1
    1d5e:	8e 17       	cp	r24, r30
    1d60:	9f 07       	cpc	r25, r31
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <gfx_term_scroll+0xc8>
    1d64:	c0 e0       	ldi	r28, 0x00	; 0
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	8c 2f       	mov	r24, r28
    1d6a:	0e 94 a5 09 	call	0x134a	; 0x134a <gfx_store_disp_tile>
    1d6e:	cf 5f       	subi	r28, 0xFF	; 255
    1d70:	c0 31       	cpi	r28, 0x10	; 16
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <gfx_term_scroll+0xd2>
    1d74:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <gfx_term_scroll+0xee>
    1d7c:	81 50       	subi	r24, 0x01	; 1
    1d7e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	08 95       	ret

00001d94 <gfx_term_print>:
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <gfx_proportional>
    1d9e:	8c 01       	movw	r16, r24
    1da0:	f8 01       	movw	r30, r16
    1da2:	c1 91       	ld	r28, Z+
    1da4:	8f 01       	movw	r16, r30
    1da6:	cc 23       	and	r28, r28
    1da8:	b9 f1       	breq	.+110    	; 0x1e18 <gfx_term_print+0x84>
    1daa:	ca 30       	cpi	r28, 0x0A	; 10
    1dac:	69 f4       	brne	.+26     	; 0x1dc8 <gfx_term_print+0x34>
    1dae:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1db2:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1dbc:	88 30       	cpi	r24, 0x08	; 8
    1dbe:	81 f7       	brne	.-32     	; 0x1da0 <gfx_term_print+0xc>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <gfx_term_scroll>
    1dc6:	ec cf       	rjmp	.-40     	; 0x1da0 <gfx_term_print+0xc>
    1dc8:	cd 30       	cpi	r28, 0x0D	; 13
    1dca:	51 f3       	breq	.-44     	; 0x1da0 <gfx_term_print+0xc>
    1dcc:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1dd0:	85 31       	cpi	r24, 0x15	; 21
    1dd2:	60 f0       	brcs	.+24     	; 0x1dec <gfx_term_print+0x58>
    1dd4:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1dd8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1de2:	88 30       	cpi	r24, 0x08	; 8
    1de4:	19 f4       	brne	.+6      	; 0x1dec <gfx_term_print+0x58>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <gfx_term_scroll>
    1dec:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <gfx_term_row>
    1df0:	66 0f       	add	r22, r22
    1df2:	66 0f       	add	r22, r22
    1df4:	66 0f       	add	r22, r22
    1df6:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	99 0f       	add	r25, r25
    1dfe:	89 0f       	add	r24, r25
    1e00:	88 0f       	add	r24, r24
    1e02:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <gfx_move>
    1e06:	8c 2f       	mov	r24, r28
    1e08:	0e 94 3b 0b 	call	0x1676	; 0x1676 <gfx_print_char>
    1e0c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1e10:	8f 5f       	subi	r24, 0xFF	; 255
    1e12:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1e16:	c4 cf       	rjmp	.-120    	; 0x1da0 <gfx_term_print+0xc>
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	08 95       	ret

00001e20 <wait_copro>:
    1e20:	78 94       	sei
    1e22:	20 e1       	ldi	r18, 0x10	; 16
    1e24:	37 e2       	ldi	r19, 0x27	; 39
    1e26:	97 e0       	ldi	r25, 0x07	; 7
    1e28:	89 9f       	mul	r24, r25
    1e2a:	f0 01       	movw	r30, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	e8 5e       	subi	r30, 0xE8	; 232
    1e30:	fb 4f       	sbci	r31, 0xFB	; 251
    1e32:	21 50       	subi	r18, 0x01	; 1
    1e34:	31 09       	sbc	r19, r1
    1e36:	19 f0       	breq	.+6      	; 0x1e3e <wait_copro+0x1e>
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3c:	d1 f7       	brne	.-12     	; 0x1e32 <wait_copro+0x12>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	23 2b       	or	r18, r19
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <wait_copro+0x26>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	08 95       	ret

00001e48 <spi_finished_callback>:
    1e48:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <copro_seq>
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <copro_seq>
    1e52:	8b 31       	cpi	r24, 0x1B	; 27
    1e54:	41 f4       	brne	.+16     	; 0x1e66 <spi_finished_callback+0x1e>
    1e56:	e6 ee       	ldi	r30, 0xE6	; 230
    1e58:	f3 e0       	ldi	r31, 0x03	; 3
    1e5a:	af e4       	ldi	r26, 0x4F	; 79
    1e5c:	b4 e0       	ldi	r27, 0x04	; 4
    1e5e:	01 90       	ld	r0, Z+
    1e60:	0d 92       	st	X+, r0
    1e62:	8a 95       	dec	r24
    1e64:	e1 f7       	brne	.-8      	; 0x1e5e <spi_finished_callback+0x16>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <spi_tx_buf+0xe>
    1e6c:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <spi_tx_buf+0x7>
    1e70:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <spi_tx_buf>
    1e74:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <copro_commands>
    1e78:	9f 3f       	cpi	r25, 0xFF	; 255
    1e7a:	69 f0       	breq	.+26     	; 0x1e96 <spi_finished_callback+0x4e>
    1e7c:	97 e0       	ldi	r25, 0x07	; 7
    1e7e:	e8 e1       	ldi	r30, 0x18	; 24
    1e80:	f4 e0       	ldi	r31, 0x04	; 4
    1e82:	a6 ec       	ldi	r26, 0xC6	; 198
    1e84:	b3 e0       	ldi	r27, 0x03	; 3
    1e86:	01 90       	ld	r0, Z+
    1e88:	0d 92       	st	X+, r0
    1e8a:	9a 95       	dec	r25
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <spi_finished_callback+0x3e>
    1e8e:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1e92:	87 e0       	ldi	r24, 0x07	; 7
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <spi_finished_callback+0x50>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <copro_commands+0x7>
    1e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <spi_finished_callback+0x76>
    1ea0:	a8 2f       	mov	r26, r24
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	aa 53       	subi	r26, 0x3A	; 58
    1ea6:	bc 4f       	sbci	r27, 0xFC	; 252
    1ea8:	97 e0       	ldi	r25, 0x07	; 7
    1eaa:	ef e1       	ldi	r30, 0x1F	; 31
    1eac:	f4 e0       	ldi	r31, 0x04	; 4
    1eae:	01 90       	ld	r0, Z+
    1eb0:	0d 92       	st	X+, r0
    1eb2:	9a 95       	dec	r25
    1eb4:	e1 f7       	brne	.-8      	; 0x1eae <spi_finished_callback+0x66>
    1eb6:	9f ef       	ldi	r25, 0xFF	; 255
    1eb8:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <copro_commands+0x7>
    1ebc:	89 5f       	subi	r24, 0xF9	; 249
    1ebe:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <copro_commands+0xe>
    1ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <spi_finished_callback+0x9c>
    1ec6:	a8 2f       	mov	r26, r24
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	aa 53       	subi	r26, 0x3A	; 58
    1ecc:	bc 4f       	sbci	r27, 0xFC	; 252
    1ece:	87 e0       	ldi	r24, 0x07	; 7
    1ed0:	e6 e2       	ldi	r30, 0x26	; 38
    1ed2:	f4 e0       	ldi	r31, 0x04	; 4
    1ed4:	01 90       	ld	r0, Z+
    1ed6:	0d 92       	st	X+, r0
    1ed8:	8a 95       	dec	r24
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <spi_finished_callback+0x8c>
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <copro_commands+0xe>
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <spi_finished_callback+0xa4>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <spi_finished_callback+0xa4>
    1ee8:	87 e0       	ldi	r24, 0x07	; 7
    1eea:	08 95       	ret
    1eec:	85 e1       	ldi	r24, 0x15	; 21
    1eee:	08 95       	ret

00001ef0 <_copro_check_busy>:
    1ef0:	27 e0       	ldi	r18, 0x07	; 7
    1ef2:	82 9f       	mul	r24, r18
    1ef4:	c0 01       	movw	r24, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e8 5e       	subi	r30, 0xE8	; 232
    1efc:	fb 4f       	sbci	r31, 0xFB	; 251
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 81       	ld	r25, Z
    1f02:	9f 3f       	cpi	r25, 0xFF	; 255
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <_copro_check_busy+0x18>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	08 95       	ret

00001f0a <copro_update>:
    1f0a:	f8 94       	cli
    1f0c:	a1 e3       	ldi	r26, 0x31	; 49
    1f0e:	b4 e0       	ldi	r27, 0x04	; 4
    1f10:	ef e4       	ldi	r30, 0x4F	; 79
    1f12:	f4 e0       	ldi	r31, 0x04	; 4
    1f14:	81 81       	ldd	r24, Z+1	; 0x01
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	98 2f       	mov	r25, r24
    1f1a:	88 27       	eor	r24, r24
    1f1c:	20 81       	ld	r18, Z
    1f1e:	82 0f       	add	r24, r18
    1f20:	91 1d       	adc	r25, r1
    1f22:	11 96       	adiw	r26, 0x01	; 1
    1f24:	9c 93       	st	X, r25
    1f26:	8e 93       	st	-X, r24
    1f28:	83 81       	ldd	r24, Z+3	; 0x03
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	98 2f       	mov	r25, r24
    1f2e:	88 27       	eor	r24, r24
    1f30:	22 81       	ldd	r18, Z+2	; 0x02
    1f32:	82 0f       	add	r24, r18
    1f34:	91 1d       	adc	r25, r1
    1f36:	13 96       	adiw	r26, 0x03	; 3
    1f38:	9c 93       	st	X, r25
    1f3a:	8e 93       	st	-X, r24
    1f3c:	12 97       	sbiw	r26, 0x02	; 2
    1f3e:	85 81       	ldd	r24, Z+5	; 0x05
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	98 2f       	mov	r25, r24
    1f44:	88 27       	eor	r24, r24
    1f46:	24 81       	ldd	r18, Z+4	; 0x04
    1f48:	82 0f       	add	r24, r18
    1f4a:	91 1d       	adc	r25, r1
    1f4c:	15 96       	adiw	r26, 0x05	; 5
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
    1f52:	14 97       	sbiw	r26, 0x04	; 4
    1f54:	87 81       	ldd	r24, Z+7	; 0x07
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	98 2f       	mov	r25, r24
    1f5a:	88 27       	eor	r24, r24
    1f5c:	26 81       	ldd	r18, Z+6	; 0x06
    1f5e:	82 0f       	add	r24, r18
    1f60:	91 1d       	adc	r25, r1
    1f62:	17 96       	adiw	r26, 0x07	; 7
    1f64:	9c 93       	st	X, r25
    1f66:	8e 93       	st	-X, r24
    1f68:	16 97       	sbiw	r26, 0x06	; 6
    1f6a:	81 85       	ldd	r24, Z+9	; 0x09
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	98 2f       	mov	r25, r24
    1f70:	88 27       	eor	r24, r24
    1f72:	20 85       	ldd	r18, Z+8	; 0x08
    1f74:	82 0f       	add	r24, r18
    1f76:	91 1d       	adc	r25, r1
    1f78:	19 96       	adiw	r26, 0x09	; 9
    1f7a:	9c 93       	st	X, r25
    1f7c:	8e 93       	st	-X, r24
    1f7e:	18 97       	sbiw	r26, 0x08	; 8
    1f80:	78 94       	sei
    1f82:	f8 94       	cli
    1f84:	22 85       	ldd	r18, Z+10	; 0x0a
    1f86:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1f8a:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    1f8e:	ac 01       	movw	r20, r24
    1f90:	42 0f       	add	r20, r18
    1f92:	51 1d       	adc	r21, r1
    1f94:	93 85       	ldd	r25, Z+11	; 0x0b
    1f96:	89 2f       	mov	r24, r25
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	88 27       	eor	r24, r24
    1f9e:	84 0f       	add	r24, r20
    1fa0:	95 1f       	adc	r25, r21
    1fa2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    1fa6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    1faa:	24 85       	ldd	r18, Z+12	; 0x0c
    1fac:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <copro_ticks_offset_r>
    1fb0:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    1fb4:	ac 01       	movw	r20, r24
    1fb6:	42 0f       	add	r20, r18
    1fb8:	51 1d       	adc	r21, r1
    1fba:	95 85       	ldd	r25, Z+13	; 0x0d
    1fbc:	89 2f       	mov	r24, r25
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	88 27       	eor	r24, r24
    1fc4:	84 0f       	add	r24, r20
    1fc6:	95 1f       	adc	r25, r21
    1fc8:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <copro_ticks_r+0x1>
    1fcc:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <copro_ticks_r>
    1fd0:	87 85       	ldd	r24, Z+15	; 0x0f
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	88 27       	eor	r24, r24
    1fd8:	26 85       	ldd	r18, Z+14	; 0x0e
    1fda:	82 0f       	add	r24, r18
    1fdc:	91 1d       	adc	r25, r1
    1fde:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <copro_speed_l+0x1>
    1fe2:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <copro_speed_l>
    1fe6:	81 89       	ldd	r24, Z+17	; 0x11
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	98 2f       	mov	r25, r24
    1fec:	88 27       	eor	r24, r24
    1fee:	20 89       	ldd	r18, Z+16	; 0x10
    1ff0:	82 0f       	add	r24, r18
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <copro_speed_r+0x1>
    1ff8:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <copro_speed_r>
    1ffc:	83 89       	ldd	r24, Z+19	; 0x13
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 2f       	mov	r25, r24
    2002:	88 27       	eor	r24, r24
    2004:	22 89       	ldd	r18, Z+18	; 0x12
    2006:	82 0f       	add	r24, r18
    2008:	91 1d       	adc	r25, r1
    200a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <copro_current_l+0x1>
    200e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <copro_current_l>
    2012:	85 89       	ldd	r24, Z+21	; 0x15
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 2f       	mov	r25, r24
    2018:	88 27       	eor	r24, r24
    201a:	24 89       	ldd	r18, Z+20	; 0x14
    201c:	82 0f       	add	r24, r18
    201e:	91 1d       	adc	r25, r1
    2020:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <copro_current_r+0x1>
    2024:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <copro_current_r>
    2028:	78 94       	sei
    202a:	f8 94       	cli
    202c:	80 8d       	ldd	r24, Z+24	; 0x18
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	98 2f       	mov	r25, r24
    2032:	88 27       	eor	r24, r24
    2034:	27 89       	ldd	r18, Z+23	; 0x17
    2036:	82 0f       	add	r24, r18
    2038:	91 1d       	adc	r25, r1
    203a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <copro_rc5_cmd+0x1>
    203e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <copro_rc5_cmd>
    2042:	82 8d       	ldd	r24, Z+26	; 0x1a
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	98 2f       	mov	r25, r24
    2048:	88 27       	eor	r24, r24
    204a:	21 8d       	ldd	r18, Z+25	; 0x19
    204c:	82 0f       	add	r24, r18
    204e:	91 1d       	adc	r25, r1
    2050:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <copro_target_distance+0x1>
    2054:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <copro_target_distance>
    2058:	78 94       	sei
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	08 95       	ret

0000205e <copro_stop>:
    205e:	f8 94       	cli
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    2066:	78 94       	sei
    2068:	08 95       	ret

0000206a <copro_stopImmediate>:
    206a:	f8 94       	cli
    206c:	8a e0       	ldi	r24, 0x0A	; 10
    206e:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    2072:	78 94       	sei
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	08 95       	ret

00002078 <copro_setPWM>:
    2078:	f8 94       	cli
    207a:	e8 e1       	ldi	r30, 0x18	; 24
    207c:	f4 e0       	ldi	r31, 0x04	; 4
    207e:	25 e0       	ldi	r18, 0x05	; 5
    2080:	20 83       	st	Z, r18
    2082:	81 83       	std	Z+1, r24	; 0x01
    2084:	92 83       	std	Z+2, r25	; 0x02
    2086:	63 83       	std	Z+3, r22	; 0x03
    2088:	74 83       	std	Z+4, r23	; 0x04
    208a:	78 94       	sei
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	08 95       	ret

00002090 <copro_setSpeed>:
    2090:	f8 94       	cli
    2092:	e8 e1       	ldi	r30, 0x18	; 24
    2094:	f4 e0       	ldi	r31, 0x04	; 4
    2096:	22 e0       	ldi	r18, 0x02	; 2
    2098:	20 83       	st	Z, r18
    209a:	81 83       	std	Z+1, r24	; 0x01
    209c:	92 83       	std	Z+2, r25	; 0x02
    209e:	63 83       	std	Z+3, r22	; 0x03
    20a0:	74 83       	std	Z+4, r23	; 0x04
    20a2:	78 94       	sei
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	08 95       	ret

000020a8 <copro_setTargetAbs>:
    20a8:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <copro_ticks_offset_l>
    20ac:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    20b0:	82 1b       	sub	r24, r18
    20b2:	93 0b       	sbc	r25, r19
    20b4:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <copro_ticks_offset_r>
    20b8:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    20bc:	62 1b       	sub	r22, r18
    20be:	73 0b       	sbc	r23, r19
    20c0:	f8 94       	cli
    20c2:	e8 e1       	ldi	r30, 0x18	; 24
    20c4:	f4 e0       	ldi	r31, 0x04	; 4
    20c6:	23 e0       	ldi	r18, 0x03	; 3
    20c8:	20 83       	st	Z, r18
    20ca:	81 83       	std	Z+1, r24	; 0x01
    20cc:	92 83       	std	Z+2, r25	; 0x02
    20ce:	63 83       	std	Z+3, r22	; 0x03
    20d0:	74 83       	std	Z+4, r23	; 0x04
    20d2:	45 83       	std	Z+5, r20	; 0x05
    20d4:	56 83       	std	Z+6, r21	; 0x06
    20d6:	78 94       	sei
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	08 95       	ret

000020dc <copro_setTargetRel>:
    20dc:	f8 94       	cli
    20de:	e8 e1       	ldi	r30, 0x18	; 24
    20e0:	f4 e0       	ldi	r31, 0x04	; 4
    20e2:	24 e0       	ldi	r18, 0x04	; 4
    20e4:	20 83       	st	Z, r18
    20e6:	81 83       	std	Z+1, r24	; 0x01
    20e8:	92 83       	std	Z+2, r25	; 0x02
    20ea:	63 83       	std	Z+3, r22	; 0x03
    20ec:	74 83       	std	Z+4, r23	; 0x04
    20ee:	45 83       	std	Z+5, r20	; 0x05
    20f0:	56 83       	std	Z+6, r21	; 0x06
    20f2:	78 94       	sei
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	08 95       	ret

000020f8 <copro_setSpeedParameters>:
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	18 2f       	mov	r17, r24
    2100:	d6 2f       	mov	r29, r22
    2102:	c4 2f       	mov	r28, r20
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <wait_copro>
    210a:	f8 94       	cli
    210c:	e8 e1       	ldi	r30, 0x18	; 24
    210e:	f4 e0       	ldi	r31, 0x04	; 4
    2110:	86 e0       	ldi	r24, 0x06	; 6
    2112:	86 87       	std	Z+14, r24	; 0x0e
    2114:	17 87       	std	Z+15, r17	; 0x0f
    2116:	d0 8b       	std	Z+16, r29	; 0x10
    2118:	c1 8b       	std	Z+17, r28	; 0x11
    211a:	78 94       	sei
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	08 95       	ret

00002126 <copro_setPositionParameters>:
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	08 95       	ret

0000212a <copro_resetOdometry>:
    212a:	f8 94       	cli
    212c:	ef e4       	ldi	r30, 0x4F	; 79
    212e:	f4 e0       	ldi	r31, 0x04	; 4
    2130:	25 85       	ldd	r18, Z+13	; 0x0d
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	32 2f       	mov	r19, r18
    2136:	22 27       	eor	r18, r18
    2138:	44 85       	ldd	r20, Z+12	; 0x0c
    213a:	24 0f       	add	r18, r20
    213c:	31 1d       	adc	r19, r1
    213e:	43 85       	ldd	r20, Z+11	; 0x0b
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	54 2f       	mov	r21, r20
    2144:	44 27       	eor	r20, r20
    2146:	e2 85       	ldd	r30, Z+10	; 0x0a
    2148:	4e 0f       	add	r20, r30
    214a:	51 1d       	adc	r21, r1
    214c:	fc 01       	movw	r30, r24
    214e:	e4 1b       	sub	r30, r20
    2150:	f5 0b       	sbc	r31, r21
    2152:	f0 93 15 04 	sts	0x0415, r31	; 0x800415 <copro_ticks_offset_l+0x1>
    2156:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <copro_ticks_offset_l>
    215a:	ab 01       	movw	r20, r22
    215c:	42 1b       	sub	r20, r18
    215e:	53 0b       	sbc	r21, r19
    2160:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <copro_ticks_offset_r+0x1>
    2164:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <copro_ticks_offset_r>
    2168:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    216c:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    2170:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <copro_ticks_r+0x1>
    2174:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <copro_ticks_r>
    2178:	78 94       	sei
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	08 95       	ret

0000217e <copro_ir_stop>:
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <wait_copro>
    2184:	f8 94       	cli
    2186:	88 e0       	ldi	r24, 0x08	; 8
    2188:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    218c:	78 94       	sei
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	08 95       	ret

00002192 <copro_ir_startMeasure>:
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <wait_copro>
    2198:	f8 94       	cli
    219a:	87 e0       	ldi	r24, 0x07	; 7
    219c:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    21a0:	78 94       	sei
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	08 95       	ret

000021a6 <copro_transmitRC5>:
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	d8 2f       	mov	r29, r24
    21ac:	c9 2f       	mov	r28, r25
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <wait_copro>
    21b4:	f8 94       	cli
    21b6:	e8 e1       	ldi	r30, 0x18	; 24
    21b8:	f4 e0       	ldi	r31, 0x04	; 4
    21ba:	89 e0       	ldi	r24, 0x09	; 9
    21bc:	87 83       	std	Z+7, r24	; 0x07
    21be:	d0 87       	std	Z+8, r29	; 0x08
    21c0:	c1 87       	std	Z+9, r28	; 0x09
    21c2:	78 94       	sei
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <bot_init>:
    21cc:	8f 9a       	sbi	0x11, 7	; 17
    21ce:	97 98       	cbi	0x12, 7	; 18
    21d0:	8a e0       	ldi	r24, 0x0A	; 10
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <delay>
    21d8:	97 9a       	sbi	0x12, 7	; 18
    21da:	84 e6       	ldi	r24, 0x64	; 100
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <delay>

000021e2 <bot_update>:
    21e2:	87 e0       	ldi	r24, 0x07	; 7
    21e4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <adc_read>
    21e8:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <bot_supply+0x1>
    21ec:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <bot_supply>
    21f0:	08 95       	ret

000021f2 <leds_init>:
    21f2:	bf 9a       	sbi	0x17, 7	; 23
    21f4:	c7 9a       	sbi	0x18, 7	; 24
    21f6:	bd 9a       	sbi	0x17, 5	; 23
    21f8:	be 9a       	sbi	0x17, 6	; 23
    21fa:	8f ef       	ldi	r24, 0xFF	; 255
    21fc:	82 b9       	out	0x02, r24	; 2
    21fe:	84 bb       	out	0x14, r24	; 20
    2200:	08 95       	ret

00002202 <leds_set_status>:
    2202:	95 b3       	in	r25, 0x15	; 21
    2204:	21 e0       	ldi	r18, 0x01	; 1
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	06 2e       	mov	r0, r22
    220a:	01 c0       	rjmp	.+2      	; 0x220e <leds_set_status+0xc>
    220c:	22 0f       	add	r18, r18
    220e:	0a 94       	dec	r0
    2210:	ea f7       	brpl	.-6      	; 0x220c <leds_set_status+0xa>
    2212:	80 ff       	sbrs	r24, 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <leds_set_status+0x18>
    2216:	29 2b       	or	r18, r25
    2218:	02 c0       	rjmp	.+4      	; 0x221e <leds_set_status+0x1c>
    221a:	20 95       	com	r18
    221c:	29 23       	and	r18, r25
    221e:	25 bb       	out	0x15, r18	; 21
    2220:	23 b1       	in	r18, 0x03	; 3
    2222:	81 ff       	sbrs	r24, 1
    2224:	08 c0       	rjmp	.+16     	; 0x2236 <leds_set_status+0x34>
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	01 c0       	rjmp	.+2      	; 0x222e <leds_set_status+0x2c>
    222c:	88 0f       	add	r24, r24
    222e:	6a 95       	dec	r22
    2230:	ea f7       	brpl	.-6      	; 0x222c <leds_set_status+0x2a>
    2232:	82 2b       	or	r24, r18
    2234:	08 c0       	rjmp	.+16     	; 0x2246 <leds_set_status+0x44>
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	01 c0       	rjmp	.+2      	; 0x223e <leds_set_status+0x3c>
    223c:	88 0f       	add	r24, r24
    223e:	6a 95       	dec	r22
    2240:	ea f7       	brpl	.-6      	; 0x223c <leds_set_status+0x3a>
    2242:	80 95       	com	r24
    2244:	82 23       	and	r24, r18
    2246:	83 b9       	out	0x03, r24	; 3
    2248:	08 95       	ret

0000224a <leds_set_status_intensity>:
    224a:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    224e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    2252:	08 95       	ret

00002254 <leds_get_status_intensity>:
    2254:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    2258:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    225c:	08 95       	ret

0000225e <leds_set_headlights>:
    225e:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <pwm_channel_A+0x1>
    2262:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <pwm_channel_A>
    2266:	08 95       	ret

00002268 <leds_get_headlights>:
    2268:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    226c:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    2270:	08 95       	ret

00002272 <leds_set_displaylight>:
    2272:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <pwm_channel_B+0x1>
    2276:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <pwm_channel_B>
    227a:	08 95       	ret

0000227c <leds_get_displaylight>:
    227c:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    2280:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    2284:	08 95       	ret

00002286 <sound_init>:
    2286:	bc 9a       	sbi	0x17, 4	; 23
    2288:	08 95       	ret

0000228a <sound_tone>:
    228a:	61 15       	cp	r22, r1
    228c:	71 05       	cpc	r23, r1
    228e:	09 f1       	breq	.+66     	; 0x22d2 <sound_tone+0x48>
    2290:	c4 98       	cbi	0x18, 4	; 24
    2292:	9b 01       	movw	r18, r22
    2294:	28 1b       	sub	r18, r24
    2296:	39 0b       	sbc	r19, r25
    2298:	62 17       	cp	r22, r18
    229a:	73 07       	cpc	r23, r19
    229c:	49 f0       	breq	.+18     	; 0x22b0 <sound_tone+0x26>
    229e:	61 50       	subi	r22, 0x01	; 1
    22a0:	71 09       	sbc	r23, r1
    22a2:	45 e3       	ldi	r20, 0x35	; 53
    22a4:	4a 95       	dec	r20
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <sound_tone+0x1a>
    22a8:	00 00       	nop
    22aa:	61 15       	cp	r22, r1
    22ac:	71 05       	cpc	r23, r1
    22ae:	a1 f7       	brne	.-24     	; 0x2298 <sound_tone+0xe>
    22b0:	c4 9a       	sbi	0x18, 4	; 24
    22b2:	9b 01       	movw	r18, r22
    22b4:	28 1b       	sub	r18, r24
    22b6:	39 0b       	sbc	r19, r25
    22b8:	61 15       	cp	r22, r1
    22ba:	71 05       	cpc	r23, r1
    22bc:	31 f3       	breq	.-52     	; 0x228a <sound_tone>
    22be:	62 17       	cp	r22, r18
    22c0:	73 07       	cpc	r23, r19
    22c2:	19 f3       	breq	.-58     	; 0x228a <sound_tone>
    22c4:	61 50       	subi	r22, 0x01	; 1
    22c6:	71 09       	sbc	r23, r1
    22c8:	45 e3       	ldi	r20, 0x35	; 53
    22ca:	4a 95       	dec	r20
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <sound_tone+0x40>
    22ce:	00 00       	nop
    22d0:	f3 cf       	rjmp	.-26     	; 0x22b8 <sound_tone+0x2e>
    22d2:	08 95       	ret

000022d4 <adc_init>:
    22d4:	e1 e6       	ldi	r30, 0x61	; 97
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	90 81       	ld	r25, Z
    22da:	21 e0       	ldi	r18, 0x01	; 1
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <adc_init+0xe>
    22e0:	22 0f       	add	r18, r18
    22e2:	8a 95       	dec	r24
    22e4:	ea f7       	brpl	.-6      	; 0x22e0 <adc_init+0xc>
    22e6:	20 95       	com	r18
    22e8:	92 23       	and	r25, r18
    22ea:	90 83       	st	Z, r25
    22ec:	e2 e6       	ldi	r30, 0x62	; 98
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	28 23       	and	r18, r24
    22f4:	20 83       	st	Z, r18
    22f6:	08 95       	ret

000022f8 <adc_read>:
    22f8:	90 e4       	ldi	r25, 0x40	; 64
    22fa:	97 b9       	out	0x07, r25	; 7
    22fc:	97 b1       	in	r25, 0x07	; 7
    22fe:	87 70       	andi	r24, 0x07	; 7
    2300:	98 2b       	or	r25, r24
    2302:	97 b9       	out	0x07, r25	; 7
    2304:	87 ec       	ldi	r24, 0xC7	; 199
    2306:	86 b9       	out	0x06, r24	; 6
    2308:	36 9b       	sbis	0x06, 6	; 6
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <adc_read+0x18>
    230c:	00 00       	nop
    230e:	fc cf       	rjmp	.-8      	; 0x2308 <adc_read+0x10>
    2310:	24 b1       	in	r18, 0x04	; 4
    2312:	85 b1       	in	r24, 0x05	; 5
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	98 2f       	mov	r25, r24
    2318:	88 27       	eor	r24, r24
    231a:	82 0f       	add	r24, r18
    231c:	91 1d       	adc	r25, r1
    231e:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <adc_random_seed>
    2322:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <adc_random_seed+0x1>
    2326:	28 0f       	add	r18, r24
    2328:	39 1f       	adc	r19, r25
    232a:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <adc_random_seed+0x1>
    232e:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <adc_random_seed>
    2332:	08 95       	ret

00002334 <adc_get_random_seed>:
    2334:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <adc_random_seed>
    2338:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <adc_random_seed+0x1>
    233c:	08 95       	ret

0000233e <__cmpsf2>:
    233e:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_cmp>
    2342:	08 f4       	brcc	.+2      	; 0x2346 <__cmpsf2+0x8>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	08 95       	ret

00002348 <__divsf3>:
    2348:	0e 94 b8 11 	call	0x2370	; 0x2370 <__divsf3x>
    234c:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__fp_round>
    2350:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__fp_pscB>
    2354:	58 f0       	brcs	.+22     	; 0x236c <__divsf3+0x24>
    2356:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_pscA>
    235a:	40 f0       	brcs	.+16     	; 0x236c <__divsf3+0x24>
    235c:	29 f4       	brne	.+10     	; 0x2368 <__divsf3+0x20>
    235e:	5f 3f       	cpi	r21, 0xFF	; 255
    2360:	29 f0       	breq	.+10     	; 0x236c <__divsf3+0x24>
    2362:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__fp_inf>
    2366:	51 11       	cpse	r21, r1
    2368:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_szero>
    236c:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_nan>

00002370 <__divsf3x>:
    2370:	0e 94 91 12 	call	0x2522	; 0x2522 <__fp_split3>
    2374:	68 f3       	brcs	.-38     	; 0x2350 <__divsf3+0x8>

00002376 <__divsf3_pse>:
    2376:	99 23       	and	r25, r25
    2378:	b1 f3       	breq	.-20     	; 0x2366 <__divsf3+0x1e>
    237a:	55 23       	and	r21, r21
    237c:	91 f3       	breq	.-28     	; 0x2362 <__divsf3+0x1a>
    237e:	95 1b       	sub	r25, r21
    2380:	55 0b       	sbc	r21, r21
    2382:	bb 27       	eor	r27, r27
    2384:	aa 27       	eor	r26, r26
    2386:	62 17       	cp	r22, r18
    2388:	73 07       	cpc	r23, r19
    238a:	84 07       	cpc	r24, r20
    238c:	38 f0       	brcs	.+14     	; 0x239c <__divsf3_pse+0x26>
    238e:	9f 5f       	subi	r25, 0xFF	; 255
    2390:	5f 4f       	sbci	r21, 0xFF	; 255
    2392:	22 0f       	add	r18, r18
    2394:	33 1f       	adc	r19, r19
    2396:	44 1f       	adc	r20, r20
    2398:	aa 1f       	adc	r26, r26
    239a:	a9 f3       	breq	.-22     	; 0x2386 <__divsf3_pse+0x10>
    239c:	35 d0       	rcall	.+106    	; 0x2408 <__divsf3_pse+0x92>
    239e:	0e 2e       	mov	r0, r30
    23a0:	3a f0       	brmi	.+14     	; 0x23b0 <__divsf3_pse+0x3a>
    23a2:	e0 e8       	ldi	r30, 0x80	; 128
    23a4:	32 d0       	rcall	.+100    	; 0x240a <__divsf3_pse+0x94>
    23a6:	91 50       	subi	r25, 0x01	; 1
    23a8:	50 40       	sbci	r21, 0x00	; 0
    23aa:	e6 95       	lsr	r30
    23ac:	00 1c       	adc	r0, r0
    23ae:	ca f7       	brpl	.-14     	; 0x23a2 <__divsf3_pse+0x2c>
    23b0:	2b d0       	rcall	.+86     	; 0x2408 <__divsf3_pse+0x92>
    23b2:	fe 2f       	mov	r31, r30
    23b4:	29 d0       	rcall	.+82     	; 0x2408 <__divsf3_pse+0x92>
    23b6:	66 0f       	add	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	88 1f       	adc	r24, r24
    23bc:	bb 1f       	adc	r27, r27
    23be:	26 17       	cp	r18, r22
    23c0:	37 07       	cpc	r19, r23
    23c2:	48 07       	cpc	r20, r24
    23c4:	ab 07       	cpc	r26, r27
    23c6:	b0 e8       	ldi	r27, 0x80	; 128
    23c8:	09 f0       	breq	.+2      	; 0x23cc <__divsf3_pse+0x56>
    23ca:	bb 0b       	sbc	r27, r27
    23cc:	80 2d       	mov	r24, r0
    23ce:	bf 01       	movw	r22, r30
    23d0:	ff 27       	eor	r31, r31
    23d2:	93 58       	subi	r25, 0x83	; 131
    23d4:	5f 4f       	sbci	r21, 0xFF	; 255
    23d6:	3a f0       	brmi	.+14     	; 0x23e6 <__divsf3_pse+0x70>
    23d8:	9e 3f       	cpi	r25, 0xFE	; 254
    23da:	51 05       	cpc	r21, r1
    23dc:	78 f0       	brcs	.+30     	; 0x23fc <__divsf3_pse+0x86>
    23de:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__fp_inf>
    23e2:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_szero>
    23e6:	5f 3f       	cpi	r21, 0xFF	; 255
    23e8:	e4 f3       	brlt	.-8      	; 0x23e2 <__divsf3_pse+0x6c>
    23ea:	98 3e       	cpi	r25, 0xE8	; 232
    23ec:	d4 f3       	brlt	.-12     	; 0x23e2 <__divsf3_pse+0x6c>
    23ee:	86 95       	lsr	r24
    23f0:	77 95       	ror	r23
    23f2:	67 95       	ror	r22
    23f4:	b7 95       	ror	r27
    23f6:	f7 95       	ror	r31
    23f8:	9f 5f       	subi	r25, 0xFF	; 255
    23fa:	c9 f7       	brne	.-14     	; 0x23ee <__divsf3_pse+0x78>
    23fc:	88 0f       	add	r24, r24
    23fe:	91 1d       	adc	r25, r1
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	97 f9       	bld	r25, 7
    2406:	08 95       	ret
    2408:	e1 e0       	ldi	r30, 0x01	; 1
    240a:	66 0f       	add	r22, r22
    240c:	77 1f       	adc	r23, r23
    240e:	88 1f       	adc	r24, r24
    2410:	bb 1f       	adc	r27, r27
    2412:	62 17       	cp	r22, r18
    2414:	73 07       	cpc	r23, r19
    2416:	84 07       	cpc	r24, r20
    2418:	ba 07       	cpc	r27, r26
    241a:	20 f0       	brcs	.+8      	; 0x2424 <__divsf3_pse+0xae>
    241c:	62 1b       	sub	r22, r18
    241e:	73 0b       	sbc	r23, r19
    2420:	84 0b       	sbc	r24, r20
    2422:	ba 0b       	sbc	r27, r26
    2424:	ee 1f       	adc	r30, r30
    2426:	88 f7       	brcc	.-30     	; 0x240a <__divsf3_pse+0x94>
    2428:	e0 95       	com	r30
    242a:	08 95       	ret

0000242c <__fixunssfsi>:
    242c:	0e 94 99 12 	call	0x2532	; 0x2532 <__fp_splitA>
    2430:	88 f0       	brcs	.+34     	; 0x2454 <__fixunssfsi+0x28>
    2432:	9f 57       	subi	r25, 0x7F	; 127
    2434:	98 f0       	brcs	.+38     	; 0x245c <__fixunssfsi+0x30>
    2436:	b9 2f       	mov	r27, r25
    2438:	99 27       	eor	r25, r25
    243a:	b7 51       	subi	r27, 0x17	; 23
    243c:	b0 f0       	brcs	.+44     	; 0x246a <__fixunssfsi+0x3e>
    243e:	e1 f0       	breq	.+56     	; 0x2478 <__fixunssfsi+0x4c>
    2440:	66 0f       	add	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	1a f0       	brmi	.+6      	; 0x2450 <__fixunssfsi+0x24>
    244a:	ba 95       	dec	r27
    244c:	c9 f7       	brne	.-14     	; 0x2440 <__fixunssfsi+0x14>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <__fixunssfsi+0x4c>
    2450:	b1 30       	cpi	r27, 0x01	; 1
    2452:	91 f0       	breq	.+36     	; 0x2478 <__fixunssfsi+0x4c>
    2454:	0e 94 b3 12 	call	0x2566	; 0x2566 <__fp_zero>
    2458:	b1 e0       	ldi	r27, 0x01	; 1
    245a:	08 95       	ret
    245c:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__fp_zero>
    2460:	67 2f       	mov	r22, r23
    2462:	78 2f       	mov	r23, r24
    2464:	88 27       	eor	r24, r24
    2466:	b8 5f       	subi	r27, 0xF8	; 248
    2468:	39 f0       	breq	.+14     	; 0x2478 <__fixunssfsi+0x4c>
    246a:	b9 3f       	cpi	r27, 0xF9	; 249
    246c:	cc f3       	brlt	.-14     	; 0x2460 <__fixunssfsi+0x34>
    246e:	86 95       	lsr	r24
    2470:	77 95       	ror	r23
    2472:	67 95       	ror	r22
    2474:	b3 95       	inc	r27
    2476:	d9 f7       	brne	.-10     	; 0x246e <__fixunssfsi+0x42>
    2478:	3e f4       	brtc	.+14     	; 0x2488 <__fixunssfsi+0x5c>
    247a:	90 95       	com	r25
    247c:	80 95       	com	r24
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	08 95       	ret

0000248a <__fp_cmp>:
    248a:	99 0f       	add	r25, r25
    248c:	00 08       	sbc	r0, r0
    248e:	55 0f       	add	r21, r21
    2490:	aa 0b       	sbc	r26, r26
    2492:	e0 e8       	ldi	r30, 0x80	; 128
    2494:	fe ef       	ldi	r31, 0xFE	; 254
    2496:	16 16       	cp	r1, r22
    2498:	17 06       	cpc	r1, r23
    249a:	e8 07       	cpc	r30, r24
    249c:	f9 07       	cpc	r31, r25
    249e:	c0 f0       	brcs	.+48     	; 0x24d0 <__fp_cmp+0x46>
    24a0:	12 16       	cp	r1, r18
    24a2:	13 06       	cpc	r1, r19
    24a4:	e4 07       	cpc	r30, r20
    24a6:	f5 07       	cpc	r31, r21
    24a8:	98 f0       	brcs	.+38     	; 0x24d0 <__fp_cmp+0x46>
    24aa:	62 1b       	sub	r22, r18
    24ac:	73 0b       	sbc	r23, r19
    24ae:	84 0b       	sbc	r24, r20
    24b0:	95 0b       	sbc	r25, r21
    24b2:	39 f4       	brne	.+14     	; 0x24c2 <__fp_cmp+0x38>
    24b4:	0a 26       	eor	r0, r26
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <__fp_cmp+0x46>
    24b8:	23 2b       	or	r18, r19
    24ba:	24 2b       	or	r18, r20
    24bc:	25 2b       	or	r18, r21
    24be:	21 f4       	brne	.+8      	; 0x24c8 <__fp_cmp+0x3e>
    24c0:	08 95       	ret
    24c2:	0a 26       	eor	r0, r26
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <__fp_cmp+0x3e>
    24c6:	a1 40       	sbci	r26, 0x01	; 1
    24c8:	a6 95       	lsr	r26
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	81 1d       	adc	r24, r1
    24ce:	81 1d       	adc	r24, r1
    24d0:	08 95       	ret

000024d2 <__fp_inf>:
    24d2:	97 f9       	bld	r25, 7
    24d4:	9f 67       	ori	r25, 0x7F	; 127
    24d6:	80 e8       	ldi	r24, 0x80	; 128
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	08 95       	ret

000024de <__fp_nan>:
    24de:	9f ef       	ldi	r25, 0xFF	; 255
    24e0:	80 ec       	ldi	r24, 0xC0	; 192
    24e2:	08 95       	ret

000024e4 <__fp_pscA>:
    24e4:	00 24       	eor	r0, r0
    24e6:	0a 94       	dec	r0
    24e8:	16 16       	cp	r1, r22
    24ea:	17 06       	cpc	r1, r23
    24ec:	18 06       	cpc	r1, r24
    24ee:	09 06       	cpc	r0, r25
    24f0:	08 95       	ret

000024f2 <__fp_pscB>:
    24f2:	00 24       	eor	r0, r0
    24f4:	0a 94       	dec	r0
    24f6:	12 16       	cp	r1, r18
    24f8:	13 06       	cpc	r1, r19
    24fa:	14 06       	cpc	r1, r20
    24fc:	05 06       	cpc	r0, r21
    24fe:	08 95       	ret

00002500 <__fp_round>:
    2500:	09 2e       	mov	r0, r25
    2502:	03 94       	inc	r0
    2504:	00 0c       	add	r0, r0
    2506:	11 f4       	brne	.+4      	; 0x250c <__fp_round+0xc>
    2508:	88 23       	and	r24, r24
    250a:	52 f0       	brmi	.+20     	; 0x2520 <__fp_round+0x20>
    250c:	bb 0f       	add	r27, r27
    250e:	40 f4       	brcc	.+16     	; 0x2520 <__fp_round+0x20>
    2510:	bf 2b       	or	r27, r31
    2512:	11 f4       	brne	.+4      	; 0x2518 <__fp_round+0x18>
    2514:	60 ff       	sbrs	r22, 0
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <__fp_round+0x20>
    2518:	6f 5f       	subi	r22, 0xFF	; 255
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	8f 4f       	sbci	r24, 0xFF	; 255
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	08 95       	ret

00002522 <__fp_split3>:
    2522:	57 fd       	sbrc	r21, 7
    2524:	90 58       	subi	r25, 0x80	; 128
    2526:	44 0f       	add	r20, r20
    2528:	55 1f       	adc	r21, r21
    252a:	59 f0       	breq	.+22     	; 0x2542 <__fp_splitA+0x10>
    252c:	5f 3f       	cpi	r21, 0xFF	; 255
    252e:	71 f0       	breq	.+28     	; 0x254c <__fp_splitA+0x1a>
    2530:	47 95       	ror	r20

00002532 <__fp_splitA>:
    2532:	88 0f       	add	r24, r24
    2534:	97 fb       	bst	r25, 7
    2536:	99 1f       	adc	r25, r25
    2538:	61 f0       	breq	.+24     	; 0x2552 <__fp_splitA+0x20>
    253a:	9f 3f       	cpi	r25, 0xFF	; 255
    253c:	79 f0       	breq	.+30     	; 0x255c <__fp_splitA+0x2a>
    253e:	87 95       	ror	r24
    2540:	08 95       	ret
    2542:	12 16       	cp	r1, r18
    2544:	13 06       	cpc	r1, r19
    2546:	14 06       	cpc	r1, r20
    2548:	55 1f       	adc	r21, r21
    254a:	f2 cf       	rjmp	.-28     	; 0x2530 <__fp_split3+0xe>
    254c:	46 95       	lsr	r20
    254e:	f1 df       	rcall	.-30     	; 0x2532 <__fp_splitA>
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <__fp_splitA+0x30>
    2552:	16 16       	cp	r1, r22
    2554:	17 06       	cpc	r1, r23
    2556:	18 06       	cpc	r1, r24
    2558:	99 1f       	adc	r25, r25
    255a:	f1 cf       	rjmp	.-30     	; 0x253e <__fp_splitA+0xc>
    255c:	86 95       	lsr	r24
    255e:	71 05       	cpc	r23, r1
    2560:	61 05       	cpc	r22, r1
    2562:	08 94       	sec
    2564:	08 95       	ret

00002566 <__fp_zero>:
    2566:	e8 94       	clt

00002568 <__fp_szero>:
    2568:	bb 27       	eor	r27, r27
    256a:	66 27       	eor	r22, r22
    256c:	77 27       	eor	r23, r23
    256e:	cb 01       	movw	r24, r22
    2570:	97 f9       	bld	r25, 7
    2572:	08 95       	ret

00002574 <__gesf2>:
    2574:	0e 94 45 12 	call	0x248a	; 0x248a <__fp_cmp>
    2578:	08 f4       	brcc	.+2      	; 0x257c <__gesf2+0x8>
    257a:	8f ef       	ldi	r24, 0xFF	; 255
    257c:	08 95       	ret

0000257e <__mulsf3>:
    257e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__mulsf3x>
    2582:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__fp_round>
    2586:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__fp_pscA>
    258a:	38 f0       	brcs	.+14     	; 0x259a <__mulsf3+0x1c>
    258c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__fp_pscB>
    2590:	20 f0       	brcs	.+8      	; 0x259a <__mulsf3+0x1c>
    2592:	95 23       	and	r25, r21
    2594:	11 f0       	breq	.+4      	; 0x259a <__mulsf3+0x1c>
    2596:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__fp_inf>
    259a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__fp_nan>
    259e:	11 24       	eor	r1, r1
    25a0:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_szero>

000025a4 <__mulsf3x>:
    25a4:	0e 94 91 12 	call	0x2522	; 0x2522 <__fp_split3>
    25a8:	70 f3       	brcs	.-36     	; 0x2586 <__mulsf3+0x8>

000025aa <__mulsf3_pse>:
    25aa:	95 9f       	mul	r25, r21
    25ac:	c1 f3       	breq	.-16     	; 0x259e <__mulsf3+0x20>
    25ae:	95 0f       	add	r25, r21
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	55 1f       	adc	r21, r21
    25b4:	62 9f       	mul	r22, r18
    25b6:	f0 01       	movw	r30, r0
    25b8:	72 9f       	mul	r23, r18
    25ba:	bb 27       	eor	r27, r27
    25bc:	f0 0d       	add	r31, r0
    25be:	b1 1d       	adc	r27, r1
    25c0:	63 9f       	mul	r22, r19
    25c2:	aa 27       	eor	r26, r26
    25c4:	f0 0d       	add	r31, r0
    25c6:	b1 1d       	adc	r27, r1
    25c8:	aa 1f       	adc	r26, r26
    25ca:	64 9f       	mul	r22, r20
    25cc:	66 27       	eor	r22, r22
    25ce:	b0 0d       	add	r27, r0
    25d0:	a1 1d       	adc	r26, r1
    25d2:	66 1f       	adc	r22, r22
    25d4:	82 9f       	mul	r24, r18
    25d6:	22 27       	eor	r18, r18
    25d8:	b0 0d       	add	r27, r0
    25da:	a1 1d       	adc	r26, r1
    25dc:	62 1f       	adc	r22, r18
    25de:	73 9f       	mul	r23, r19
    25e0:	b0 0d       	add	r27, r0
    25e2:	a1 1d       	adc	r26, r1
    25e4:	62 1f       	adc	r22, r18
    25e6:	83 9f       	mul	r24, r19
    25e8:	a0 0d       	add	r26, r0
    25ea:	61 1d       	adc	r22, r1
    25ec:	22 1f       	adc	r18, r18
    25ee:	74 9f       	mul	r23, r20
    25f0:	33 27       	eor	r19, r19
    25f2:	a0 0d       	add	r26, r0
    25f4:	61 1d       	adc	r22, r1
    25f6:	23 1f       	adc	r18, r19
    25f8:	84 9f       	mul	r24, r20
    25fa:	60 0d       	add	r22, r0
    25fc:	21 1d       	adc	r18, r1
    25fe:	82 2f       	mov	r24, r18
    2600:	76 2f       	mov	r23, r22
    2602:	6a 2f       	mov	r22, r26
    2604:	11 24       	eor	r1, r1
    2606:	9f 57       	subi	r25, 0x7F	; 127
    2608:	50 40       	sbci	r21, 0x00	; 0
    260a:	9a f0       	brmi	.+38     	; 0x2632 <__mulsf3_pse+0x88>
    260c:	f1 f0       	breq	.+60     	; 0x264a <__mulsf3_pse+0xa0>
    260e:	88 23       	and	r24, r24
    2610:	4a f0       	brmi	.+18     	; 0x2624 <__mulsf3_pse+0x7a>
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	bb 1f       	adc	r27, r27
    2618:	66 1f       	adc	r22, r22
    261a:	77 1f       	adc	r23, r23
    261c:	88 1f       	adc	r24, r24
    261e:	91 50       	subi	r25, 0x01	; 1
    2620:	50 40       	sbci	r21, 0x00	; 0
    2622:	a9 f7       	brne	.-22     	; 0x260e <__mulsf3_pse+0x64>
    2624:	9e 3f       	cpi	r25, 0xFE	; 254
    2626:	51 05       	cpc	r21, r1
    2628:	80 f0       	brcs	.+32     	; 0x264a <__mulsf3_pse+0xa0>
    262a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__fp_inf>
    262e:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_szero>
    2632:	5f 3f       	cpi	r21, 0xFF	; 255
    2634:	e4 f3       	brlt	.-8      	; 0x262e <__mulsf3_pse+0x84>
    2636:	98 3e       	cpi	r25, 0xE8	; 232
    2638:	d4 f3       	brlt	.-12     	; 0x262e <__mulsf3_pse+0x84>
    263a:	86 95       	lsr	r24
    263c:	77 95       	ror	r23
    263e:	67 95       	ror	r22
    2640:	b7 95       	ror	r27
    2642:	f7 95       	ror	r31
    2644:	e7 95       	ror	r30
    2646:	9f 5f       	subi	r25, 0xFF	; 255
    2648:	c1 f7       	brne	.-16     	; 0x263a <__mulsf3_pse+0x90>
    264a:	fe 2b       	or	r31, r30
    264c:	88 0f       	add	r24, r24
    264e:	91 1d       	adc	r25, r1
    2650:	96 95       	lsr	r25
    2652:	87 95       	ror	r24
    2654:	97 f9       	bld	r25, 7
    2656:	08 95       	ret

00002658 <__divmodsi4>:
    2658:	05 2e       	mov	r0, r21
    265a:	97 fb       	bst	r25, 7
    265c:	1e f4       	brtc	.+6      	; 0x2664 <__divmodsi4+0xc>
    265e:	00 94       	com	r0
    2660:	0e 94 43 13 	call	0x2686	; 0x2686 <__negsi2>
    2664:	57 fd       	sbrc	r21, 7
    2666:	07 d0       	rcall	.+14     	; 0x2676 <__divmodsi4_neg2>
    2668:	0e 94 4b 13 	call	0x2696	; 0x2696 <__udivmodsi4>
    266c:	07 fc       	sbrc	r0, 7
    266e:	03 d0       	rcall	.+6      	; 0x2676 <__divmodsi4_neg2>
    2670:	4e f4       	brtc	.+18     	; 0x2684 <__divmodsi4_exit>
    2672:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__negsi2>

00002676 <__divmodsi4_neg2>:
    2676:	50 95       	com	r21
    2678:	40 95       	com	r20
    267a:	30 95       	com	r19
    267c:	21 95       	neg	r18
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	4f 4f       	sbci	r20, 0xFF	; 255
    2682:	5f 4f       	sbci	r21, 0xFF	; 255

00002684 <__divmodsi4_exit>:
    2684:	08 95       	ret

00002686 <__negsi2>:
    2686:	90 95       	com	r25
    2688:	80 95       	com	r24
    268a:	70 95       	com	r23
    268c:	61 95       	neg	r22
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	08 95       	ret

00002696 <__udivmodsi4>:
    2696:	a1 e2       	ldi	r26, 0x21	; 33
    2698:	1a 2e       	mov	r1, r26
    269a:	aa 1b       	sub	r26, r26
    269c:	bb 1b       	sub	r27, r27
    269e:	fd 01       	movw	r30, r26
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <__udivmodsi4_ep>

000026a2 <__udivmodsi4_loop>:
    26a2:	aa 1f       	adc	r26, r26
    26a4:	bb 1f       	adc	r27, r27
    26a6:	ee 1f       	adc	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	a2 17       	cp	r26, r18
    26ac:	b3 07       	cpc	r27, r19
    26ae:	e4 07       	cpc	r30, r20
    26b0:	f5 07       	cpc	r31, r21
    26b2:	20 f0       	brcs	.+8      	; 0x26bc <__udivmodsi4_ep>
    26b4:	a2 1b       	sub	r26, r18
    26b6:	b3 0b       	sbc	r27, r19
    26b8:	e4 0b       	sbc	r30, r20
    26ba:	f5 0b       	sbc	r31, r21

000026bc <__udivmodsi4_ep>:
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	1a 94       	dec	r1
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <__udivmodsi4_loop>
    26c8:	60 95       	com	r22
    26ca:	70 95       	com	r23
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	9b 01       	movw	r18, r22
    26d2:	ac 01       	movw	r20, r24
    26d4:	bd 01       	movw	r22, r26
    26d6:	cf 01       	movw	r24, r30
    26d8:	08 95       	ret

000026da <do_rand>:
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	68 81       	ld	r22, Y
    26f2:	79 81       	ldd	r23, Y+1	; 0x01
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	61 15       	cp	r22, r1
    26fa:	71 05       	cpc	r23, r1
    26fc:	81 05       	cpc	r24, r1
    26fe:	91 05       	cpc	r25, r1
    2700:	21 f4       	brne	.+8      	; 0x270a <do_rand+0x30>
    2702:	64 e2       	ldi	r22, 0x24	; 36
    2704:	79 ed       	ldi	r23, 0xD9	; 217
    2706:	8b e5       	ldi	r24, 0x5B	; 91
    2708:	97 e0       	ldi	r25, 0x07	; 7
    270a:	2d e1       	ldi	r18, 0x1D	; 29
    270c:	33 ef       	ldi	r19, 0xF3	; 243
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	0e 94 2c 13 	call	0x2658	; 0x2658 <__divmodsi4>
    2716:	49 01       	movw	r8, r18
    2718:	5a 01       	movw	r10, r20
    271a:	9b 01       	movw	r18, r22
    271c:	ac 01       	movw	r20, r24
    271e:	a7 ea       	ldi	r26, 0xA7	; 167
    2720:	b1 e4       	ldi	r27, 0x41	; 65
    2722:	0e 94 c7 13 	call	0x278e	; 0x278e <__muluhisi3>
    2726:	6b 01       	movw	r12, r22
    2728:	7c 01       	movw	r14, r24
    272a:	ac ee       	ldi	r26, 0xEC	; 236
    272c:	b4 ef       	ldi	r27, 0xF4	; 244
    272e:	a5 01       	movw	r20, r10
    2730:	94 01       	movw	r18, r8
    2732:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__mulohisi3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8c 0d       	add	r24, r12
    273c:	9d 1d       	adc	r25, r13
    273e:	ae 1d       	adc	r26, r14
    2740:	bf 1d       	adc	r27, r15
    2742:	b7 ff       	sbrs	r27, 7
    2744:	03 c0       	rjmp	.+6      	; 0x274c <do_rand+0x72>
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	a1 09       	sbc	r26, r1
    274a:	b0 48       	sbci	r27, 0x80	; 128
    274c:	88 83       	st	Y, r24
    274e:	99 83       	std	Y+1, r25	; 0x01
    2750:	aa 83       	std	Y+2, r26	; 0x02
    2752:	bb 83       	std	Y+3, r27	; 0x03
    2754:	9f 77       	andi	r25, 0x7F	; 127
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	08 95       	ret

0000276c <rand_r>:
    276c:	0c 94 6d 13 	jmp	0x26da	; 0x26da <do_rand>

00002770 <rand>:
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0c 94 6d 13 	jmp	0x26da	; 0x26da <do_rand>

00002778 <srand>:
    2778:	a0 e0       	ldi	r26, 0x00	; 0
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2780:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2784:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2788:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    278c:	08 95       	ret

0000278e <__muluhisi3>:
    278e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__umulhisi3>
    2792:	a5 9f       	mul	r26, r21
    2794:	90 0d       	add	r25, r0
    2796:	b4 9f       	mul	r27, r20
    2798:	90 0d       	add	r25, r0
    279a:	a4 9f       	mul	r26, r20
    279c:	80 0d       	add	r24, r0
    279e:	91 1d       	adc	r25, r1
    27a0:	11 24       	eor	r1, r1
    27a2:	08 95       	ret

000027a4 <__mulshisi3>:
    27a4:	b7 ff       	sbrs	r27, 7
    27a6:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__muluhisi3>

000027aa <__mulohisi3>:
    27aa:	0e 94 c7 13 	call	0x278e	; 0x278e <__muluhisi3>
    27ae:	82 1b       	sub	r24, r18
    27b0:	93 0b       	sbc	r25, r19
    27b2:	08 95       	ret

000027b4 <__umulhisi3>:
    27b4:	a2 9f       	mul	r26, r18
    27b6:	b0 01       	movw	r22, r0
    27b8:	b3 9f       	mul	r27, r19
    27ba:	c0 01       	movw	r24, r0
    27bc:	a3 9f       	mul	r26, r19
    27be:	70 0d       	add	r23, r0
    27c0:	81 1d       	adc	r24, r1
    27c2:	11 24       	eor	r1, r1
    27c4:	91 1d       	adc	r25, r1
    27c6:	b2 9f       	mul	r27, r18
    27c8:	70 0d       	add	r23, r0
    27ca:	81 1d       	adc	r24, r1
    27cc:	11 24       	eor	r1, r1
    27ce:	91 1d       	adc	r25, r1
    27d0:	08 95       	ret

000027d2 <_exit>:
    27d2:	f8 94       	cli

000027d4 <__stop_program>:
    27d4:	ff cf       	rjmp	.-2      	; 0x27d4 <__stop_program>
