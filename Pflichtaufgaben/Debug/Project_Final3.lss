
Project_Final3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a4  00800100  00002726  000027ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  008003a4  008003a4  00002a5e  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  00002a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013be  00000000  00000000  00004ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006296  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000062a8  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000062e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00007196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_14>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_17>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	32 2e       	mov	r3, r18
      8e:	31 31       	cpi	r19, 0x11	; 17
	...

00000091 <bot_lib_revision>:
	...

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d0 e1       	ldi	r29, 0x10	; 16
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e6 e2       	ldi	r30, 0x26	; 38
      a6:	f7 e2       	ldi	r31, 0x27	; 39
      a8:	00 e0       	ldi	r16, 0x00	; 0
      aa:	0b bf       	out	0x3b, r16	; 59
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x14>
      ae:	07 90       	elpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	a4 3a       	cpi	r26, 0xA4	; 164
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x10>

000000b8 <__do_clear_bss>:
      b8:	24 e0       	ldi	r18, 0x04	; 4
      ba:	a4 ea       	ldi	r26, 0xA4	; 164
      bc:	b3 e0       	ldi	r27, 0x03	; 3
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a3 37       	cpi	r26, 0x73	; 115
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
      cc:	0c 94 91 13 	jmp	0x2722	; 0x2722 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <findDirection>:
 *
 * Function for guiding the Nibo by determining the position of hindrances
 *
*/
void findDirection()
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <findDirection+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
	int r;
	drive(); 	///Nibo goes forward
      de:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <drive>
	showNibo(); ///Shows Nibo on display
      e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <showNibo>



	///Tunnel
	/// if Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      e6:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
      ea:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
      ee:	81 15       	cp	r24, r1
      f0:	95 4b       	sbci	r25, 0xB5	; 181
      f2:	a0 f0       	brcs	.+40     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 120 &&
      f4:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
      f8:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>



	///Tunnel
	/// if Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
      fc:	81 15       	cp	r24, r1
      fe:	99 47       	sbci	r25, 0x79	; 121
     100:	68 f0       	brcs	.+26     	; 0x11c <findDirection+0x48>
		copro_distance[2]/256 > 120 &&
		copro_distance[4]/256 > 180)
     102:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     106:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>


	///Tunnel
	/// if Nibo reached the end of the tunnel
	if (copro_distance[0]/256 > 180 &&
		copro_distance[2]/256 > 120 &&
     10a:	81 15       	cp	r24, r1
     10c:	95 4b       	sbci	r25, 0xB5	; 181
     10e:	30 f0       	brcs	.+12     	; 0x11c <findDirection+0x48>
		copro_distance[4]/256 > 180)
		{
			flag=1; /// Set flag to 1
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__data_end+0x1>
     118:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__data_end>
		}
	///if Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     11c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     120:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     124:	8f 3f       	cpi	r24, 0xFF	; 255
     126:	91 05       	cpc	r25, r1
     128:	81 f1       	breq	.+96     	; 0x18a <findDirection+0xb6>
     12a:	78 f1       	brcs	.+94     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
     12c:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     130:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
		copro_distance[4]/256 > 180)
		{
			flag=1; /// Set flag to 1
		}
	///if Nibo rides forward through the tunnel
	if (copro_distance[0]/256 > 0 &&
     134:	81 15       	cp	r24, r1
     136:	93 43       	sbci	r25, 0x33	; 51
     138:	40 f1       	brcs	.+80     	; 0x18a <findDirection+0xb6>
		copro_distance[4]/256 > 50)
			{
				timer++; ///counter increases
     13a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     13e:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     148:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     14c:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     150:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	11 f5       	brne	.+68     	; 0x19c <findDirection+0xc8>
     158:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     15c:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     160:	02 96       	adiw	r24, 0x02	; 2
     162:	e1 f0       	breq	.+56     	; 0x19c <findDirection+0xc8>
				{
					goBack(); ///Nibo goes back
     164:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <goBack>
					LEDShow('r', 0, 1); // Sets LEDs 0-1 to red
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	82 e7       	ldi	r24, 0x72	; 114
     172:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
					timer--; ///counter decreases
     176:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer.2344>
     17a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer.2344+0x1>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer.2344+0x1>
     184:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer.2344>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     188:	09 c0       	rjmp	.+18     	; 0x19c <findDirection+0xc8>
				}
			}
	///if Nibo left the tunnel
	else
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 a9 10 	call	0x2152	; 0x2152 <leds_set_status>
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 a9 10 	call	0x2152	; 0x2152 <leds_set_status>
     19a:	01 c0       	rjmp	.+2      	; 0x19e <findDirection+0xca>

				/*
				 * if Nibo reached the end of the tunnel and the counter is not equal -2,
				 *	Nibo goes back
				 */
				if(flag==1 && timer!=-2)
     19c:	00 00       	nop
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     19e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     1a2:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     1a6:	81 15       	cp	r24, r1
     1a8:	93 43       	sbci	r25, 0x33	; 51
     1aa:	40 f1       	brcs	.+80     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
     1ac:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     1b0:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
	{
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
     1b4:	81 15       	cp	r24, r1
     1b6:	92 43       	sbci	r25, 0x32	; 50
     1b8:	08 f5       	brcc	.+66     	; 0x1fc <findDirection+0x128>
		copro_distance[4]/256 < 50 &&
		flag==1)
     1ba:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     1be:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		leds_set_status(LEDS_OFF, 0); /// Switch off right back LED
		leds_set_status(LEDS_OFF, 1); /// Switch off left back LED
	}
	/// exit from the tunnel. If a wall is on the right side
	if (copro_distance[0]/256 > 50 &&
		copro_distance[4]/256 < 50 &&
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	d9 f4       	brne	.+54     	; 0x1fc <findDirection+0x128>
		flag==1)
		{
			copro_setTargetRel(-27, 27, 15); ///Sets target position for wheels. Nibo turns left
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	6b e1       	ldi	r22, 0x1B	; 27
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	85 ee       	ldi	r24, 0xE5	; 229
     1d0:	9f ef       	ldi	r25, 0xFF	; 255
     1d2:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	87 e6       	ldi	r24, 0x67	; 103
     1e0:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     1e4:	88 ee       	ldi	r24, 0xE8	; 232
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	0e 94 8c 08 	call	0x1118	; 0x1118 <delay>
			flag=0; /// Set flag to 0
     1ec:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     1f0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// Reset counter
     1f4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     1f8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     1fc:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     200:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     204:	81 15       	cp	r24, r1
     206:	93 43       	sbci	r25, 0x33	; 51
     208:	40 f1       	brcs	.+80     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
     20a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     20e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			flag=0; /// Set flag to 0
			timer=0; /// Reset counter

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
     212:	81 15       	cp	r24, r1
     214:	92 43       	sbci	r25, 0x32	; 50
     216:	08 f5       	brcc	.+66     	; 0x25a <findDirection+0x186>
		copro_distance[0]/256 < 50 &&
		flag==1)
     218:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     21c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0; /// Reset counter

		}
	/// exit from the tunnel. Wall is on the left side
	if (copro_distance[4]/256 > 50 &&
		copro_distance[0]/256 < 50 &&
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	d9 f4       	brne	.+54     	; 0x25a <findDirection+0x186>
		flag==1)
		{
			copro_setTargetRel(27, -27, 15);///Sets target position for wheels. Nibo turns right
     224:	4f e0       	ldi	r20, 0x0F	; 15
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	65 ee       	ldi	r22, 0xE5	; 229
     22a:	7f ef       	ldi	r23, 0xFF	; 255
     22c:	8b e1       	ldi	r24, 0x1B	; 27
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	87 e6       	ldi	r24, 0x67	; 103
     23e:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     242:	88 ee       	ldi	r24, 0xE8	; 232
     244:	93 e0       	ldi	r25, 0x03	; 3
     246:	0e 94 8c 08 	call	0x1118	; 0x1118 <delay>
			flag=0; ///  Set flag to 0
     24a:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     24e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0; /// reset counter
     252:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     256:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     25a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     25e:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     262:	81 15       	cp	r24, r1
     264:	92 43       	sbci	r25, 0x32	; 50
     266:	08 f0       	brcs	.+2      	; 0x26a <findDirection+0x196>
     268:	41 c0       	rjmp	.+130    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
     26a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     26e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
			delay(1000); /// wait 1 second, Nibo turns
			flag=0; ///  Set flag to 0
			timer=0; /// reset counter
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
     272:	81 15       	cp	r24, r1
     274:	92 43       	sbci	r25, 0x32	; 50
     276:	d0 f5       	brcc	.+116    	; 0x2ec <findDirection+0x218>
		copro_distance[0]/256 < 50 &&
		flag==1)
     278:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     27c:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			flag=0; ///  Set flag to 0
			timer=0; /// reset counter
		}
	/// exit from the tunnel. no walls, Nibo randomly chooses where to turn
	if (copro_distance[4]/256 < 50 &&
		copro_distance[0]/256 < 50 &&
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f5       	brne	.+104    	; 0x2ec <findDirection+0x218>
		flag==1)
		{
			r = rand() % 2; ///generate a number between 0 and 1
     284:	0e 94 60 13 	call	0x26c0	; 0x26c0 <rand>
     288:	81 70       	andi	r24, 0x01	; 1
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	99 23       	and	r25, r25
     28e:	24 f4       	brge	.+8      	; 0x298 <findDirection+0x1c4>
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	8e 6f       	ori	r24, 0xFE	; 254
     294:	9f 6f       	ori	r25, 0xFF	; 255
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	9a 83       	std	Y+2, r25	; 0x02
     29a:	89 83       	std	Y+1, r24	; 0x01
			if(r==0){
     29c:	89 81       	ldd	r24, Y+1	; 0x01
     29e:	9a 81       	ldd	r25, Y+2	; 0x02
     2a0:	89 2b       	or	r24, r25
     2a2:	49 f4       	brne	.+18     	; 0x2b6 <findDirection+0x1e2>
				copro_setTargetRel(-27, 27, 15);//Sets target position for wheels. Nibo turns left
     2a4:	4f e0       	ldi	r20, 0x0F	; 15
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	6b e1       	ldi	r22, 0x1B	; 27
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	85 ee       	ldi	r24, 0xE5	; 229
     2ae:	9f ef       	ldi	r25, 0xFF	; 255
     2b0:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
     2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <findDirection+0x1f2>
			}
			else{
				copro_setTargetRel(27, -27, 15); ///Sets target position for wheels. Nibo turns right
     2b6:	4f e0       	ldi	r20, 0x0F	; 15
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	65 ee       	ldi	r22, 0xE5	; 229
     2bc:	7f ef       	ldi	r23, 0xFF	; 255
     2be:	8b e1       	ldi	r24, 0x1B	; 27
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
			}
			LEDShow('g', 0, 1); /// Sets LEDs 0-1 to green
     2c6:	41 e0       	ldi	r20, 0x01	; 1
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	87 e6       	ldi	r24, 0x67	; 103
     2d0:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			delay(1000); /// wait 1 second, Nibo turns
     2d4:	88 ee       	ldi	r24, 0xE8	; 232
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 8c 08 	call	0x1118	; 0x1118 <delay>
			flag=0; /// Set flag to 0
     2dc:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__data_end+0x1>
     2e0:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__data_end>
			timer=0;/// reset counter
     2e4:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <timer.2344+0x1>
     2e8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timer.2344>
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
     2ec:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     2f0:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
     2f4:	81 15       	cp	r24, r1
     2f6:	97 49       	sbci	r25, 0x97	; 151
     2f8:	80 f1       	brcs	.+96     	; 0x35a <findDirection+0x286>
			copro_distance[1]/256 > 100 &&
     2fa:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     2fe:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
			delay(1000); /// wait 1 second, Nibo turns
			flag=0; /// Set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
     302:	81 15       	cp	r24, r1
     304:	95 46       	sbci	r25, 0x65	; 101
     306:	48 f1       	brcs	.+82     	; 0x35a <findDirection+0x286>
			copro_distance[1]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     308:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     30c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
			flag=0; /// Set flag to 0
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 100 &&
     310:	81 15       	cp	r24, r1
     312:	9b 4a       	sbci	r25, 0xAB	; 171
     314:	10 f1       	brcs	.+68     	; 0x35a <findDirection+0x286>
			copro_distance[2]/256 > 170 &&
			flag==0)
     316:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     31a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			timer=0;/// reset counter
		}
		///Hindrance is right
		if (copro_distance[0]/256 > 150 &&
			copro_distance[1]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     31e:	89 2b       	or	r24, r25
     320:	e1 f4       	brne	.+56     	; 0x35a <findDirection+0x286>
			flag==0)
		{
			LEDShow('r', 5, 7);
     322:	47 e0       	ldi	r20, 0x07	; 7
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	65 e0       	ldi	r22, 0x05	; 5
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	82 e7       	ldi	r24, 0x72	; 114
     32c:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnLeft();
     330:	0e 94 8a 02 	call	0x514	; 0x514 <turnLeft>
			HindranceShow(40, 50);//Show the position of Hindrance
     334:	62 e3       	ldi	r22, 0x32	; 50
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
			HindranceShow(40, 30);
     340:	6e e1       	ldi	r22, 0x1E	; 30
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	88 e2       	ldi	r24, 0x28	; 40
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
			HindranceShow(65, 50);
     34c:	62 e3       	ldi	r22, 0x32	; 50
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	81 e4       	ldi	r24, 0x41	; 65
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
     358:	07 c0       	rjmp	.+14     	; 0x368 <findDirection+0x294>
		}
		else
		{
			LEDShow('g', 5, 7);
     35a:	47 e0       	ldi	r20, 0x07	; 7
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	65 e0       	ldi	r22, 0x05	; 5
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	87 e6       	ldi	r24, 0x67	; 103
     364:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
		}

		///Hindrance is top-right
		if (copro_distance[1]/256 > 150 &&
     368:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     36c:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     370:	81 15       	cp	r24, r1
     372:	97 49       	sbci	r25, 0x97	; 151
     374:	e8 f0       	brcs	.+58     	; 0x3b0 <findDirection+0x2dc>
			copro_distance[0]/256 < 150 &&
     376:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     37a:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
		{
			LEDShow('g', 5, 7);
		}

		///Hindrance is top-right
		if (copro_distance[1]/256 > 150 &&
     37e:	81 15       	cp	r24, r1
     380:	96 49       	sbci	r25, 0x96	; 150
     382:	b0 f4       	brcc	.+44     	; 0x3b0 <findDirection+0x2dc>
			copro_distance[0]/256 < 150 &&
			flag==0 )
     384:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     388:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
			LEDShow('g', 5, 7);
		}

		///Hindrance is top-right
		if (copro_distance[1]/256 > 150 &&
			copro_distance[0]/256 < 150 &&
     38c:	89 2b       	or	r24, r25
     38e:	81 f4       	brne	.+32     	; 0x3b0 <findDirection+0x2dc>
			flag==0 )
		{
			LEDShow('r', 6, 6);
     390:	46 e0       	ldi	r20, 0x06	; 6
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	66 e0       	ldi	r22, 0x06	; 6
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	82 e7       	ldi	r24, 0x72	; 114
     39a:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnHalfLeft();
     39e:	0e 94 a0 02 	call	0x540	; 0x540 <turnHalfLeft>
			HindranceShow(40, 50); ///Show the position of Hindrance
     3a2:	62 e3       	ldi	r22, 0x32	; 50
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	88 e2       	ldi	r24, 0x28	; 40
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <findDirection+0x2ea>
	     }
		else {LEDShow('g', 6, 6);}
     3b0:	46 e0       	ldi	r20, 0x06	; 6
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	66 e0       	ldi	r22, 0x06	; 6
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	87 e6       	ldi	r24, 0x67	; 103
     3ba:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     3be:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <copro_distance+0x8>
     3c2:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <copro_distance+0x9>
     3c6:	81 15       	cp	r24, r1
     3c8:	97 49       	sbci	r25, 0x97	; 151
     3ca:	80 f1       	brcs	.+96     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			copro_distance[3]/256 > 100 &&
     3cc:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     3d0:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
			HindranceShow(40, 50); ///Show the position of Hindrance
	     }
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
     3d4:	81 15       	cp	r24, r1
     3d6:	95 46       	sbci	r25, 0x65	; 101
     3d8:	48 f1       	brcs	.+82     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			copro_distance[3]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     3da:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     3de:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
	     }
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 100 &&
     3e2:	81 15       	cp	r24, r1
     3e4:	9b 4a       	sbci	r25, 0xAB	; 171
     3e6:	10 f1       	brcs	.+68     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			copro_distance[2]/256 > 170 &&
			flag==0)
     3e8:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     3ec:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		else {LEDShow('g', 6, 6);}

		///Hindrance is left
		if (copro_distance[4]/256 > 150 &&
			copro_distance[3]/256 > 100 &&
			copro_distance[2]/256 > 170 &&
     3f0:	89 2b       	or	r24, r25
     3f2:	e1 f4       	brne	.+56     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			flag==0)
		{
			LEDShow('r', 2, 4);
     3f4:	44 e0       	ldi	r20, 0x04	; 4
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	62 e0       	ldi	r22, 0x02	; 2
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	82 e7       	ldi	r24, 0x72	; 114
     3fe:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnRight();
     402:	0e 94 b6 02 	call	0x56c	; 0x56c <turnRight>
			HindranceShow(90, 50);//Show the position of Hindrance
     406:	62 e3       	ldi	r22, 0x32	; 50
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	8a e5       	ldi	r24, 0x5A	; 90
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
			HindranceShow(90, 30);
     412:	6e e1       	ldi	r22, 0x1E	; 30
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	8a e5       	ldi	r24, 0x5A	; 90
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
			HindranceShow(65, 50);
     41e:	62 e3       	ldi	r22, 0x32	; 50
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	81 e4       	ldi	r24, 0x41	; 65
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
     42a:	07 c0       	rjmp	.+14     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		}
		else
		{
			LEDShow('g', 2, 4);
     42c:	44 e0       	ldi	r20, 0x04	; 4
     42e:	50 e0       	ldi	r21, 0x00	; 0
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	87 e6       	ldi	r24, 0x67	; 103
     436:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 150 &&
     43a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     43e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     442:	81 15       	cp	r24, r1
     444:	97 49       	sbci	r25, 0x97	; 151
     446:	e8 f0       	brcs	.+58     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			copro_distance[0]/256 < 150 &&
     448:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <copro_distance>
     44c:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <copro_distance+0x1>
		else
		{
			LEDShow('g', 2, 4);
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 150 &&
     450:	81 15       	cp	r24, r1
     452:	96 49       	sbci	r25, 0x96	; 150
     454:	b0 f4       	brcc	.+44     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			copro_distance[0]/256 < 150 &&
		    flag==0)
     456:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <__data_end>
     45a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <__data_end+0x1>
		{
			LEDShow('g', 2, 4);
		}
		///Hindrance is top-left
		if (copro_distance[3]/256 > 150 &&
			copro_distance[0]/256 < 150 &&
     45e:	89 2b       	or	r24, r25
     460:	81 f4       	brne	.+32     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		    flag==0)
		{
			LEDShow('r', 3, 3);
     462:	43 e0       	ldi	r20, 0x03	; 3
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	82 e7       	ldi	r24, 0x72	; 114
     46c:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnHalfRight();
     470:	0e 94 cc 02 	call	0x598	; 0x598 <turnHalfRight>
			HindranceShow(85, 50);//Show the position of Hindrance
     474:	62 e3       	ldi	r22, 0x32	; 50
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	85 e5       	ldi	r24, 0x55	; 85
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <HindranceShow>
     480:	07 c0       	rjmp	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		 }
		else {LEDShow('g', 3, 3);}
     482:	43 e0       	ldi	r20, 0x03	; 3
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	63 e0       	ldi	r22, 0x03	; 3
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	87 e6       	ldi	r24, 0x67	; 103
     48c:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>

		///Hindrance is ahead
		if (copro_distance[2]/256 > 150 && copro_distance[1]/256 > 60)
     490:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     494:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     498:	81 15       	cp	r24, r1
     49a:	97 49       	sbci	r25, 0x97	; 151
     49c:	80 f0       	brcs	.+32     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     49e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <copro_distance+0x2>
     4a2:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <copro_distance+0x3>
     4a6:	81 15       	cp	r24, r1
     4a8:	9d 43       	sbci	r25, 0x3D	; 61
     4aa:	48 f0       	brcs	.+18     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			LEDShow('r', 4, 5);
     4ac:	45 e0       	ldi	r20, 0x05	; 5
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	64 e0       	ldi	r22, 0x04	; 4
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	82 e7       	ldi	r24, 0x72	; 114
     4b6:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnLeft();
     4ba:	0e 94 8a 02 	call	0x514	; 0x514 <turnLeft>
		}
		if (copro_distance[2]/256 > 150 && copro_distance[3]/256 > 60)
     4be:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <copro_distance+0x4>
     4c2:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <copro_distance+0x5>
     4c6:	81 15       	cp	r24, r1
     4c8:	97 49       	sbci	r25, 0x97	; 151
     4ca:	80 f0       	brcs	.+32     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4cc:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <copro_distance+0x6>
     4d0:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <copro_distance+0x7>
     4d4:	81 15       	cp	r24, r1
     4d6:	9d 43       	sbci	r25, 0x3D	; 61
     4d8:	48 f0       	brcs	.+18     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		{
			LEDShow('r', 4, 5);
     4da:	45 e0       	ldi	r20, 0x05	; 5
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	64 e0       	ldi	r22, 0x04	; 4
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	82 e7       	ldi	r24, 0x72	; 114
     4e4:	0e 94 19 03 	call	0x632	; 0x632 <LEDShow>
			turnRight();
     4e8:	0e 94 b6 02 	call	0x56c	; 0x56c <turnRight>
		}
}
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <drive>:
 * @brief
 *
 * Nibo goes forward
 */
void drive()
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(10, 10); ///Set same speed for the two motors. The wheels spin forward
     500:	6a e0       	ldi	r22, 0x0A	; 10
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	8a e0       	ldi	r24, 0x0A	; 10
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <copro_setSpeed>
}
     50c:	00 00       	nop
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <turnLeft>:
 * @brief
 *
 * Nibo turns left
 */
void turnLeft()
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-27, 27, 15); ///rotate 90 degrees left with 15 ticks/s
     51c:	4f e0       	ldi	r20, 0x0F	; 15
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	6b e1       	ldi	r22, 0x1B	; 27
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	85 ee       	ldi	r24, 0xE5	; 229
     526:	9f ef       	ldi	r25, 0xFF	; 255
     528:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
	copro_resetOdometry(0, 0);//Reset odometry values to specified values (0)
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 3d 10 	call	0x207a	; 0x207a <copro_resetOdometry>
}
     538:	00 00       	nop
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <turnHalfLeft>:
 * @brief
 *
 * Nibo turns half left
 */
void turnHalfLeft()
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(-13, 13, 15); ///rotate 45 degrees left with 15 ticks/s
     548:	4f e0       	ldi	r20, 0x0F	; 15
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	6d e0       	ldi	r22, 0x0D	; 13
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	83 ef       	ldi	r24, 0xF3	; 243
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 3d 10 	call	0x207a	; 0x207a <copro_resetOdometry>
}
     564:	00 00       	nop
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <turnRight>:
 * @brief
 *
 * Nibo turns right
 */
void turnRight()
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(27, -27, 15); ///rotate 90 degrees right with 15 ticks/s
     574:	4f e0       	ldi	r20, 0x0F	; 15
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	65 ee       	ldi	r22, 0xE5	; 229
     57a:	7f ef       	ldi	r23, 0xFF	; 255
     57c:	8b e1       	ldi	r24, 0x1B	; 27
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 3d 10 	call	0x207a	; 0x207a <copro_resetOdometry>
}
     590:	00 00       	nop
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <turnHalfRight>:
 * @brief
 *
 * Nibo turns half right
 */
void turnHalfRight()
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
	copro_setTargetRel(13, -13, 15); ///rotate 45 degrees right with 15 ticks/s
     5a0:	4f e0       	ldi	r20, 0x0F	; 15
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	63 ef       	ldi	r22, 0xF3	; 243
     5a6:	7f ef       	ldi	r23, 0xFF	; 255
     5a8:	8d e0       	ldi	r24, 0x0D	; 13
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 16 10 	call	0x202c	; 0x202c <copro_setTargetRel>
	copro_resetOdometry(0, 0);
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 3d 10 	call	0x207a	; 0x207a <copro_resetOdometry>
}
     5bc:	00 00       	nop
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <goBack>:
 *  @brief
 *
 * Nibo goes back
 */
void goBack()
{
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
	copro_setSpeed(-10, -10); ///Set same speed for the two motors. The wheels spin back
     5cc:	66 ef       	ldi	r22, 0xF6	; 246
     5ce:	7f ef       	ldi	r23, 0xFF	; 255
     5d0:	86 ef       	ldi	r24, 0xF6	; 246
     5d2:	9f ef       	ldi	r25, 0xFF	; 255
     5d4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <copro_setSpeed>
	copro_resetOdometry(0, 0);
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 3d 10 	call	0x207a	; 0x207a <copro_resetOdometry>
}
     5e4:	00 00       	nop
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <main>:

/* @brief
 *
 * Main Function
*/
int main() {
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62

		/// turn on the interrupts. Needed for the PWM
		sei();
     5f4:	78 94       	sei

		/// initialization of the robot (always necessary)
		bot_init();
     5f6:	0e 94 8e 10 	call	0x211c	; 0x211c <bot_init>

		/// Initialization of the SPI interface
		spi_init();
     5fa:	0e 94 b9 08 	call	0x1172	; 0x1172 <spi_init>

		/// Initialization of the speaker
		sound_init();
     5fe:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <sound_init>

		/// Initialization of the LEDs
		leds_init();
     602:	0e 94 a1 10 	call	0x2142	; 0x2142 <leds_init>

		/// Initialization of the pulse width modulation
		pwm_init();
     606:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <pwm_init>

		/// Initialization of display and graphics functions
		display_init();
     60a:	0e 94 72 07 	call	0xee4	; 0xee4 <display_init>
		gfx_init();
     60e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <gfx_init>

		/// Switch on distance measurement
		copro_ir_startMeasure();
     612:	0e 94 71 10 	call	0x20e2	; 0x20e2 <copro_ir_startMeasure>

		/// Function for launching a program by a user
		start();
     616:	0e 94 71 06 	call	0xce2	; 0xce2 <start>

		/// endless loop
		while (1 == 1) {
			/// empty the display
			gfx_fill(0);
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <gfx_fill>

			/// update coprocessor values
			copro_update();
     620:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <copro_update>
			/// Function for navigation
			findDirection();
     624:	0e 94 6a 00 	call	0xd4	; 0xd4 <findDirection>

			/// wait 0,5s
			delay(500);
     628:	84 ef       	ldi	r24, 0xF4	; 244
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 8c 08 	call	0x1118	; 0x1118 <delay>
		}
     630:	f4 cf       	rjmp	.-24     	; 0x61a <main+0x2e>

00000632 <LEDShow>:
 *
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	27 97       	sbiw	r28, 0x07	; 7
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	7d 83       	std	Y+5, r23	; 0x05
     64a:	6c 83       	std	Y+4, r22	; 0x04
     64c:	5f 83       	std	Y+7, r21	; 0x07
     64e:	4e 83       	std	Y+6, r20	; 0x06
	for(int i=start; i<=end; i++){
     650:	8c 81       	ldd	r24, Y+4	; 0x04
     652:	9d 81       	ldd	r25, Y+5	; 0x05
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
     658:	13 c0       	rjmp	.+38     	; 0x680 <LEDShow+0x4e>
		/// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///Set LED number i to red
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	82 37       	cpi	r24, 0x72	; 114
     65e:	31 f4       	brne	.+12     	; 0x66c <LEDShow+0x3a>
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	68 2f       	mov	r22, r24
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 a9 10 	call	0x2152	; 0x2152 <leds_set_status>
     66a:	05 c0       	rjmp	.+10     	; 0x676 <LEDShow+0x44>
		else leds_set_status(LEDS_GREEN, i); ///Set LED number i to green
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	68 2f       	mov	r22, r24
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 a9 10 	call	0x2152	; 0x2152 <leds_set_status>
 * @param color Color of LED (r-red, g-green)
 * @param start Number of start LED
 * @param end Number of end LED
 */
void LEDShow(char color, int start, int end){
	for(int i=start; i<=end; i++){
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	9a 83       	std	Y+2, r25	; 0x02
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	29 81       	ldd	r18, Y+1	; 0x01
     682:	3a 81       	ldd	r19, Y+2	; 0x02
     684:	8e 81       	ldd	r24, Y+6	; 0x06
     686:	9f 81       	ldd	r25, Y+7	; 0x07
     688:	82 17       	cp	r24, r18
     68a:	93 07       	cpc	r25, r19
     68c:	34 f7       	brge	.-52     	; 0x65a <LEDShow+0x28>
		/// for all LEDs between start and end LEDs (including start ad end LEDs)
		if(color=='r'){ leds_set_status(LEDS_RED, i);} ///Set LED number i to red
		else leds_set_status(LEDS_GREEN, i); ///Set LED number i to green
	}
}
     68e:	00 00       	nop
     690:	27 96       	adiw	r28, 0x07	; 7
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <showNibo>:
 * @brief
 *
 * Function for showing Nibo on display
 */
void showNibo()
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
	/// Nibo's picture
	gfx_move(53, 12); ///Sets the point from which to draw
     6aa:	6c e0       	ldi	r22, 0x0C	; 12
     6ac:	85 e3       	ldi	r24, 0x35	; 53
     6ae:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_box(4, 6);    ///Draws the box. First argument is width=4, second is height=6
     6b2:	66 e0       	ldi	r22, 0x06	; 6
     6b4:	84 e0       	ldi	r24, 0x04	; 4
     6b6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <gfx_box>

	gfx_move(75, 12); ///Sets the point from which to draw
     6ba:	6c e0       	ldi	r22, 0x0C	; 12
     6bc:	8b e4       	ldi	r24, 0x4B	; 75
     6be:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_box(4, 6);	  ///Draws the box. First argument is width=4, second is height=6
     6c2:	66 e0       	ldi	r22, 0x06	; 6
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <gfx_box>

	gfx_move(59, 14); ///Sets the point from which to draw
     6ca:	6e e0       	ldi	r22, 0x0E	; 14
     6cc:	8b e3       	ldi	r24, 0x3B	; 59
     6ce:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_box(14, 8);	  ///Draws the box. First argument is width=14, second is height=8
     6d2:	68 e0       	ldi	r22, 0x08	; 8
     6d4:	8e e0       	ldi	r24, 0x0E	; 14
     6d6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <gfx_box>

	gfx_move(61, 22); ///Sets the point from which to draw
     6da:	66 e1       	ldi	r22, 0x16	; 22
     6dc:	8d e3       	ldi	r24, 0x3D	; 61
     6de:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_box(10, 3);	  ///Draws the box. First argument is width=10, second is height=3
     6e2:	63 e0       	ldi	r22, 0x03	; 3
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <gfx_box>
}
     6ea:	00 00       	nop
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <HindranceShow>:
 * Draws one triangle with an exclamation mark inside.
 *
 * @param x Abscissa starting point
 * @param y Ordinate starting point
 */
void HindranceShow(int x, int y){
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <HindranceShow+0x6>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <HindranceShow+0x8>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	7c 83       	std	Y+4, r23	; 0x04
     704:	6b 83       	std	Y+3, r22	; 0x03
	gfx_move(x, y); ///Sets the point from which to draw
     706:	9b 81       	ldd	r25, Y+3	; 0x03
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	69 2f       	mov	r22, r25
     70c:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_lineTo(x+7,y-17); ///Draws a line from x, y to x+7,y-17
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9f ee       	ldi	r25, 0xEF	; 239
     714:	98 0f       	add	r25, r24
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	89 5f       	subi	r24, 0xF9	; 249
     71a:	69 2f       	mov	r22, r25
     71c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <gfx_lineTo>
	gfx_lineTo(x-7,y-17);///Draws a line from  x+7,y-17 to x-7,y-17
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9f ee       	ldi	r25, 0xEF	; 239
     724:	98 0f       	add	r25, r24
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	87 50       	subi	r24, 0x07	; 7
     72a:	69 2f       	mov	r22, r25
     72c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <gfx_lineTo>
	gfx_lineTo(x, y); ///Draws a line from x-7,y-17 to start point x,y
     730:	9b 81       	ldd	r25, Y+3	; 0x03
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	69 2f       	mov	r22, r25
     736:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <gfx_lineTo>
	gfx_move(x, y-7);///Sets the point from which to draw
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	99 ef       	ldi	r25, 0xF9	; 249
     73e:	98 0f       	add	r25, r24
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	69 2f       	mov	r22, r25
     744:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_lineTo(x,y-13);///Draws a line from x,y-7 to start point x,y-13
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	93 ef       	ldi	r25, 0xF3	; 243
     74c:	98 0f       	add	r25, r24
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	69 2f       	mov	r22, r25
     752:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <gfx_lineTo>
	gfx_move(x, y-15); ///Sets the point from which to draw
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	91 ef       	ldi	r25, 0xF1	; 241
     75a:	98 0f       	add	r25, r24
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	69 2f       	mov	r22, r25
     760:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_hline(1); ///Draws a horizontal line from the current position to the right - makes one point
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 9a 0b 	call	0x1734	; 0x1734 <gfx_hline>

}
     76a:	00 00       	nop
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <tone>:
/**
 * @brief
 *
 * Function from the Project "HelloSound" for creating sounds on the Nibo
 */
int tone(int frequency, int duration) {
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	c8 54       	subi	r28, 0x48	; 72
     788:	d1 09       	sbc	r29, r1
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	9e 01       	movw	r18, r28
     796:	2b 5b       	subi	r18, 0xBB	; 187
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	f9 01       	movw	r30, r18
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	80 83       	st	Z, r24
     7a0:	ce 01       	movw	r24, r28
     7a2:	89 5b       	subi	r24, 0xB9	; 185
     7a4:	9f 4f       	sbci	r25, 0xFF	; 255
     7a6:	fc 01       	movw	r30, r24
     7a8:	71 83       	std	Z+1, r23	; 0x01
     7aa:	60 83       	st	Z, r22
	int interval = (50000 / frequency);
     7ac:	ce 01       	movw	r24, r28
     7ae:	8b 5b       	subi	r24, 0xBB	; 187
     7b0:	9f 4f       	sbci	r25, 0xFF	; 255
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	9c 01       	movw	r18, r24
     7ba:	99 0f       	add	r25, r25
     7bc:	44 0b       	sbc	r20, r20
     7be:	55 0b       	sbc	r21, r21
     7c0:	80 e5       	ldi	r24, 0x50	; 80
     7c2:	93 ec       	ldi	r25, 0xC3	; 195
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__divmodsi4>
     7d0:	da 01       	movw	r26, r20
     7d2:	c9 01       	movw	r24, r18
     7d4:	9c 83       	std	Y+4, r25	; 0x04
     7d6:	8b 83       	std	Y+3, r24	; 0x03
	duration = duration * 100;
     7d8:	ce 01       	movw	r24, r28
     7da:	89 5b       	subi	r24, 0xB9	; 185
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	9e 01       	movw	r18, r28
     7e0:	29 5b       	subi	r18, 0xB9	; 185
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	f9 01       	movw	r30, r18
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	64 e6       	ldi	r22, 0x64	; 100
     7ec:	64 9f       	mul	r22, r20
     7ee:	90 01       	movw	r18, r0
     7f0:	65 9f       	mul	r22, r21
     7f2:	30 0d       	add	r19, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	fc 01       	movw	r30, r24
     7f8:	31 83       	std	Z+1, r19	; 0x01
     7fa:	20 83       	st	Z, r18

	while (duration) {
     7fc:	5b c2       	rjmp	.+1206   	; 0xcb4 <tone+0x53a>
		int i = interval;
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
		clear_output_bit(IO_AUDIO);
     806:	88 e3       	ldi	r24, 0x38	; 56
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	28 e3       	ldi	r18, 0x38	; 56
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	2f 7e       	andi	r18, 0xEF	; 239
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
		while (duration && i) {
     818:	02 c1       	rjmp	.+516    	; 0xa1e <tone+0x2a4>
			duration--;
     81a:	ce 01       	movw	r24, r28
     81c:	89 5b       	subi	r24, 0xB9	; 185
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	9e 01       	movw	r18, r28
     822:	29 5b       	subi	r18, 0xB9	; 185
     824:	3f 4f       	sbci	r19, 0xFF	; 255
     826:	f9 01       	movw	r30, r18
     828:	20 81       	ld	r18, Z
     82a:	31 81       	ldd	r19, Z+1	; 0x01
     82c:	21 50       	subi	r18, 0x01	; 1
     82e:	31 09       	sbc	r19, r1
     830:	fc 01       	movw	r30, r24
     832:	31 83       	std	Z+1, r19	; 0x01
     834:	20 83       	st	Z, r18
			i--;
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	9a 83       	std	Y+2, r25	; 0x02
     83e:	89 83       	std	Y+1, r24	; 0x01
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e2       	ldi	r26, 0x20	; 32
     846:	b1 e4       	ldi	r27, 0x41	; 65
     848:	89 87       	std	Y+9, r24	; 0x09
     84a:	9a 87       	std	Y+10, r25	; 0x0a
     84c:	ab 87       	std	Y+11, r26	; 0x0b
     84e:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     850:	2b ea       	ldi	r18, 0xAB	; 171
     852:	3a ea       	ldi	r19, 0xAA	; 170
     854:	4a ea       	ldi	r20, 0xAA	; 170
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	69 85       	ldd	r22, Y+9	; 0x09
     85a:	7a 85       	ldd	r23, Y+10	; 0x0a
     85c:	8b 85       	ldd	r24, Y+11	; 0x0b
     85e:	9c 85       	ldd	r25, Y+12	; 0x0c
     860:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	8d 87       	std	Y+13, r24	; 0x0d
     86a:	9e 87       	std	Y+14, r25	; 0x0e
     86c:	af 87       	std	Y+15, r26	; 0x0f
     86e:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	50 e4       	ldi	r21, 0x40	; 64
     878:	69 85       	ldd	r22, Y+9	; 0x09
     87a:	7a 85       	ldd	r23, Y+10	; 0x0a
     87c:	8b 85       	ldd	r24, Y+11	; 0x0b
     87e:	9c 85       	ldd	r25, Y+12	; 0x0c
     880:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	89 8b       	std	Y+17, r24	; 0x11
     88a:	9a 8b       	std	Y+18, r25	; 0x12
     88c:	ab 8b       	std	Y+19, r26	; 0x13
     88e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e8       	ldi	r20, 0x80	; 128
     896:	5f e3       	ldi	r21, 0x3F	; 63
     898:	6d 85       	ldd	r22, Y+13	; 0x0d
     89a:	7e 85       	ldd	r23, Y+14	; 0x0e
     89c:	8f 85       	ldd	r24, Y+15	; 0x0f
     89e:	98 89       	ldd	r25, Y+16	; 0x10
     8a0:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     8a4:	88 23       	and	r24, r24
     8a6:	1c f4       	brge	.+6      	; 0x8ae <tone+0x134>
		__ticks = 1;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	8d 8b       	std	Y+21, r24	; 0x15
     8ac:	b2 c0       	rjmp	.+356    	; 0xa12 <tone+0x298>
	else if (__tmp2 > 65535)
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	3f ef       	ldi	r19, 0xFF	; 255
     8b2:	4f e7       	ldi	r20, 0x7F	; 127
     8b4:	57 e4       	ldi	r21, 0x47	; 71
     8b6:	69 89       	ldd	r22, Y+17	; 0x11
     8b8:	7a 89       	ldd	r23, Y+18	; 0x12
     8ba:	8b 89       	ldd	r24, Y+19	; 0x13
     8bc:	9c 89       	ldd	r25, Y+20	; 0x14
     8be:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <tone+0x14e>
     8c6:	7b c0       	rjmp	.+246    	; 0x9be <tone+0x244>
	{
		_delay_ms(__us / 1000.0);
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	4a e7       	ldi	r20, 0x7A	; 122
     8ce:	54 e4       	ldi	r21, 0x44	; 68
     8d0:	69 85       	ldd	r22, Y+9	; 0x09
     8d2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d8:	0e 94 4c 11 	call	0x2298	; 0x2298 <__divsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	8e 8b       	std	Y+22, r24	; 0x16
     8e2:	9f 8b       	std	Y+23, r25	; 0x17
     8e4:	a8 8f       	std	Y+24, r26	; 0x18
     8e6:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	4a e7       	ldi	r20, 0x7A	; 122
     8ee:	55 e4       	ldi	r21, 0x45	; 69
     8f0:	6e 89       	ldd	r22, Y+22	; 0x16
     8f2:	7f 89       	ldd	r23, Y+23	; 0x17
     8f4:	88 8d       	ldd	r24, Y+24	; 0x18
     8f6:	99 8d       	ldd	r25, Y+25	; 0x19
     8f8:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	8a 8f       	std	Y+26, r24	; 0x1a
     902:	9b 8f       	std	Y+27, r25	; 0x1b
     904:	ac 8f       	std	Y+28, r26	; 0x1c
     906:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e8       	ldi	r20, 0x80	; 128
     90e:	5f e3       	ldi	r21, 0x3F	; 63
     910:	6a 8d       	ldd	r22, Y+26	; 0x1a
     912:	7b 8d       	ldd	r23, Y+27	; 0x1b
     914:	8c 8d       	ldd	r24, Y+28	; 0x1c
     916:	9d 8d       	ldd	r25, Y+29	; 0x1d
     918:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     91c:	88 23       	and	r24, r24
     91e:	2c f4       	brge	.+10     	; 0x92a <tone+0x1b0>
		__ticks = 1;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	9f 8f       	std	Y+31, r25	; 0x1f
     926:	8e 8f       	std	Y+30, r24	; 0x1e
     928:	3f c0       	rjmp	.+126    	; 0x9a8 <tone+0x22e>
	else if (__tmp > 65535)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	3f ef       	ldi	r19, 0xFF	; 255
     92e:	4f e7       	ldi	r20, 0x7F	; 127
     930:	57 e4       	ldi	r21, 0x47	; 71
     932:	6a 8d       	ldd	r22, Y+26	; 0x1a
     934:	7b 8d       	ldd	r23, Y+27	; 0x1b
     936:	8c 8d       	ldd	r24, Y+28	; 0x1c
     938:	9d 8d       	ldd	r25, Y+29	; 0x1d
     93a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     93e:	18 16       	cp	r1, r24
     940:	4c f5       	brge	.+82     	; 0x994 <tone+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	6e 89       	ldd	r22, Y+22	; 0x16
     94c:	7f 89       	ldd	r23, Y+23	; 0x17
     94e:	88 8d       	ldd	r24, Y+24	; 0x18
     950:	99 8d       	ldd	r25, Y+25	; 0x19
     952:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	bc 01       	movw	r22, r24
     95c:	cd 01       	movw	r24, r26
     95e:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	9f 8f       	std	Y+31, r25	; 0x1f
     968:	8e 8f       	std	Y+30, r24	; 0x1e
     96a:	0f c0       	rjmp	.+30     	; 0x98a <tone+0x210>
     96c:	80 e9       	ldi	r24, 0x90	; 144
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	99 a3       	std	Y+33, r25	; 0x21
     972:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     974:	88 a1       	ldd	r24, Y+32	; 0x20
     976:	99 a1       	ldd	r25, Y+33	; 0x21
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <tone+0x1fe>
     97c:	99 a3       	std	Y+33, r25	; 0x21
     97e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     980:	8e 8d       	ldd	r24, Y+30	; 0x1e
     982:	9f 8d       	ldd	r25, Y+31	; 0x1f
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	9f 8f       	std	Y+31, r25	; 0x1f
     988:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     98a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     98c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     98e:	89 2b       	or	r24, r25
     990:	69 f7       	brne	.-38     	; 0x96c <tone+0x1f2>
     992:	3f c0       	rjmp	.+126    	; 0xa12 <tone+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     994:	6a 8d       	ldd	r22, Y+26	; 0x1a
     996:	7b 8d       	ldd	r23, Y+27	; 0x1b
     998:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     99c:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	9f 8f       	std	Y+31, r25	; 0x1f
     9a6:	8e 8f       	std	Y+30, r24	; 0x1e
     9a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9ac:	9b a3       	std	Y+35, r25	; 0x23
     9ae:	8a a3       	std	Y+34, r24	; 0x22
     9b0:	8a a1       	ldd	r24, Y+34	; 0x22
     9b2:	9b a1       	ldd	r25, Y+35	; 0x23
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <tone+0x23a>
     9b8:	9b a3       	std	Y+35, r25	; 0x23
     9ba:	8a a3       	std	Y+34, r24	; 0x22
     9bc:	2a c0       	rjmp	.+84     	; 0xa12 <tone+0x298>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	4f e7       	ldi	r20, 0x7F	; 127
     9c4:	53 e4       	ldi	r21, 0x43	; 67
     9c6:	6d 85       	ldd	r22, Y+13	; 0x0d
     9c8:	7e 85       	ldd	r23, Y+14	; 0x0e
     9ca:	8f 85       	ldd	r24, Y+15	; 0x0f
     9cc:	98 89       	ldd	r25, Y+16	; 0x10
     9ce:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	ac f4       	brge	.+42     	; 0xa00 <tone+0x286>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     9d6:	69 89       	ldd	r22, Y+17	; 0x11
     9d8:	7a 89       	ldd	r23, Y+18	; 0x12
     9da:	8b 89       	ldd	r24, Y+19	; 0x13
     9dc:	9c 89       	ldd	r25, Y+20	; 0x14
     9de:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	9d a3       	std	Y+37, r25	; 0x25
     9e8:	8c a3       	std	Y+36, r24	; 0x24
     9ea:	8c a1       	ldd	r24, Y+36	; 0x24
     9ec:	9d a1       	ldd	r25, Y+37	; 0x25
     9ee:	9f a3       	std	Y+39, r25	; 0x27
     9f0:	8e a3       	std	Y+38, r24	; 0x26
     9f2:	8e a1       	ldd	r24, Y+38	; 0x26
     9f4:	9f a1       	ldd	r25, Y+39	; 0x27
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <tone+0x27c>
     9fa:	9f a3       	std	Y+39, r25	; 0x27
     9fc:	8e a3       	std	Y+38, r24	; 0x26
     9fe:	0f c0       	rjmp	.+30     	; 0xa1e <tone+0x2a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a00:	6d 85       	ldd	r22, Y+13	; 0x0d
     a02:	7e 85       	ldd	r23, Y+14	; 0x0e
     a04:	8f 85       	ldd	r24, Y+15	; 0x0f
     a06:	98 89       	ldd	r25, Y+16	; 0x10
     a08:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	8d 8b       	std	Y+21, r24	; 0x15
     a12:	8d 89       	ldd	r24, Y+21	; 0x15
     a14:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a16:	88 a5       	ldd	r24, Y+40	; 0x28
     a18:	8a 95       	dec	r24
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <tone+0x29e>
     a1c:	88 a7       	std	Y+40, r24	; 0x28
	duration = duration * 100;

	while (duration) {
		int i = interval;
		clear_output_bit(IO_AUDIO);
		while (duration && i) {
     a1e:	ce 01       	movw	r24, r28
     a20:	89 5b       	subi	r24, 0xB9	; 185
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	fc 01       	movw	r30, r24
     a26:	80 81       	ld	r24, Z
     a28:	91 81       	ldd	r25, Z+1	; 0x01
     a2a:	89 2b       	or	r24, r25
     a2c:	29 f0       	breq	.+10     	; 0xa38 <tone+0x2be>
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	9a 81       	ldd	r25, Y+2	; 0x02
     a32:	89 2b       	or	r24, r25
     a34:	09 f0       	breq	.+2      	; 0xa38 <tone+0x2be>
     a36:	f1 ce       	rjmp	.-542    	; 0x81a <tone+0xa0>
			duration--;
			i--;
			delay_us(10);
		}
		i = interval;
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	9a 83       	std	Y+2, r25	; 0x02
     a3e:	89 83       	std	Y+1, r24	; 0x01
		set_output_bit(IO_AUDIO);
     a40:	88 e3       	ldi	r24, 0x38	; 56
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	28 e3       	ldi	r18, 0x38	; 56
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	20 61       	ori	r18, 0x10	; 16
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
		while (duration && i) {
     a52:	23 c1       	rjmp	.+582    	; 0xc9a <tone+0x520>
			duration--;
     a54:	ce 01       	movw	r24, r28
     a56:	89 5b       	subi	r24, 0xB9	; 185
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	9e 01       	movw	r18, r28
     a5c:	29 5b       	subi	r18, 0xB9	; 185
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	f9 01       	movw	r30, r18
     a62:	20 81       	ld	r18, Z
     a64:	31 81       	ldd	r19, Z+1	; 0x01
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	31 09       	sbc	r19, r1
     a6a:	fc 01       	movw	r30, r24
     a6c:	31 83       	std	Z+1, r19	; 0x01
     a6e:	20 83       	st	Z, r18
			i--;
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e2       	ldi	r26, 0x20	; 32
     a80:	b1 e4       	ldi	r27, 0x41	; 65
     a82:	8d 83       	std	Y+5, r24	; 0x05
     a84:	9e 83       	std	Y+6, r25	; 0x06
     a86:	af 83       	std	Y+7, r26	; 0x07
     a88:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a8a:	2b ea       	ldi	r18, 0xAB	; 171
     a8c:	3a ea       	ldi	r19, 0xAA	; 170
     a8e:	4a ea       	ldi	r20, 0xAA	; 170
     a90:	50 e4       	ldi	r21, 0x40	; 64
     a92:	6d 81       	ldd	r22, Y+5	; 0x05
     a94:	7e 81       	ldd	r23, Y+6	; 0x06
     a96:	8f 81       	ldd	r24, Y+7	; 0x07
     a98:	98 85       	ldd	r25, Y+8	; 0x08
     a9a:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	89 a7       	std	Y+41, r24	; 0x29
     aa4:	9a a7       	std	Y+42, r25	; 0x2a
     aa6:	ab a7       	std	Y+43, r26	; 0x2b
     aa8:	bc a7       	std	Y+44, r27	; 0x2c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	50 e4       	ldi	r21, 0x40	; 64
     ab2:	6d 81       	ldd	r22, Y+5	; 0x05
     ab4:	7e 81       	ldd	r23, Y+6	; 0x06
     ab6:	8f 81       	ldd	r24, Y+7	; 0x07
     ab8:	98 85       	ldd	r25, Y+8	; 0x08
     aba:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	8d a7       	std	Y+45, r24	; 0x2d
     ac4:	9e a7       	std	Y+46, r25	; 0x2e
     ac6:	af a7       	std	Y+47, r26	; 0x2f
     ac8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e8       	ldi	r20, 0x80	; 128
     ad0:	5f e3       	ldi	r21, 0x3F	; 63
     ad2:	69 a5       	ldd	r22, Y+41	; 0x29
     ad4:	7a a5       	ldd	r23, Y+42	; 0x2a
     ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
     ada:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     ade:	88 23       	and	r24, r24
     ae0:	1c f4       	brge	.+6      	; 0xae8 <tone+0x36e>
		__ticks = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	89 ab       	std	Y+49, r24	; 0x31
     ae6:	c6 c0       	rjmp	.+396    	; 0xc74 <tone+0x4fa>
	else if (__tmp2 > 65535)
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	3f ef       	ldi	r19, 0xFF	; 255
     aec:	4f e7       	ldi	r20, 0x7F	; 127
     aee:	57 e4       	ldi	r21, 0x47	; 71
     af0:	6d a5       	ldd	r22, Y+45	; 0x2d
     af2:	7e a5       	ldd	r23, Y+46	; 0x2e
     af4:	8f a5       	ldd	r24, Y+47	; 0x2f
     af6:	98 a9       	ldd	r25, Y+48	; 0x30
     af8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     afc:	18 16       	cp	r1, r24
     afe:	0c f0       	brlt	.+2      	; 0xb02 <tone+0x388>
     b00:	7b c0       	rjmp	.+246    	; 0xbf8 <tone+0x47e>
	{
		_delay_ms(__us / 1000.0);
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	4a e7       	ldi	r20, 0x7A	; 122
     b08:	54 e4       	ldi	r21, 0x44	; 68
     b0a:	6d 81       	ldd	r22, Y+5	; 0x05
     b0c:	7e 81       	ldd	r23, Y+6	; 0x06
     b0e:	8f 81       	ldd	r24, Y+7	; 0x07
     b10:	98 85       	ldd	r25, Y+8	; 0x08
     b12:	0e 94 4c 11 	call	0x2298	; 0x2298 <__divsf3>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	8a ab       	std	Y+50, r24	; 0x32
     b1c:	9b ab       	std	Y+51, r25	; 0x33
     b1e:	ac ab       	std	Y+52, r26	; 0x34
     b20:	bd ab       	std	Y+53, r27	; 0x35

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	4a e7       	ldi	r20, 0x7A	; 122
     b28:	55 e4       	ldi	r21, 0x45	; 69
     b2a:	6a a9       	ldd	r22, Y+50	; 0x32
     b2c:	7b a9       	ldd	r23, Y+51	; 0x33
     b2e:	8c a9       	ldd	r24, Y+52	; 0x34
     b30:	9d a9       	ldd	r25, Y+53	; 0x35
     b32:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	8e ab       	std	Y+54, r24	; 0x36
     b3c:	9f ab       	std	Y+55, r25	; 0x37
     b3e:	a8 af       	std	Y+56, r26	; 0x38
     b40:	b9 af       	std	Y+57, r27	; 0x39
	if (__tmp < 1.0)
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e8       	ldi	r20, 0x80	; 128
     b48:	5f e3       	ldi	r21, 0x3F	; 63
     b4a:	6e a9       	ldd	r22, Y+54	; 0x36
     b4c:	7f a9       	ldd	r23, Y+55	; 0x37
     b4e:	88 ad       	ldd	r24, Y+56	; 0x38
     b50:	99 ad       	ldd	r25, Y+57	; 0x39
     b52:	0e 94 47 11 	call	0x228e	; 0x228e <__cmpsf2>
     b56:	88 23       	and	r24, r24
     b58:	2c f4       	brge	.+10     	; 0xb64 <tone+0x3ea>
		__ticks = 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	9b af       	std	Y+59, r25	; 0x3b
     b60:	8a af       	std	Y+58, r24	; 0x3a
     b62:	3f c0       	rjmp	.+126    	; 0xbe2 <tone+0x468>
	else if (__tmp > 65535)
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	4f e7       	ldi	r20, 0x7F	; 127
     b6a:	57 e4       	ldi	r21, 0x47	; 71
     b6c:	6e a9       	ldd	r22, Y+54	; 0x36
     b6e:	7f a9       	ldd	r23, Y+55	; 0x37
     b70:	88 ad       	ldd	r24, Y+56	; 0x38
     b72:	99 ad       	ldd	r25, Y+57	; 0x39
     b74:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     b78:	18 16       	cp	r1, r24
     b7a:	4c f5       	brge	.+82     	; 0xbce <tone+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e2       	ldi	r20, 0x20	; 32
     b82:	51 e4       	ldi	r21, 0x41	; 65
     b84:	6a a9       	ldd	r22, Y+50	; 0x32
     b86:	7b a9       	ldd	r23, Y+51	; 0x33
     b88:	8c a9       	ldd	r24, Y+52	; 0x34
     b8a:	9d a9       	ldd	r25, Y+53	; 0x35
     b8c:	0e 94 67 12 	call	0x24ce	; 0x24ce <__mulsf3>
     b90:	dc 01       	movw	r26, r24
     b92:	cb 01       	movw	r24, r22
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	9b af       	std	Y+59, r25	; 0x3b
     ba2:	8a af       	std	Y+58, r24	; 0x3a
     ba4:	0f c0       	rjmp	.+30     	; 0xbc4 <tone+0x44a>
     ba6:	80 e9       	ldi	r24, 0x90	; 144
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9d af       	std	Y+61, r25	; 0x3d
     bac:	8c af       	std	Y+60, r24	; 0x3c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bae:	8c ad       	ldd	r24, Y+60	; 0x3c
     bb0:	9d ad       	ldd	r25, Y+61	; 0x3d
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <tone+0x438>
     bb6:	9d af       	std	Y+61, r25	; 0x3d
     bb8:	8c af       	std	Y+60, r24	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bba:	8a ad       	ldd	r24, Y+58	; 0x3a
     bbc:	9b ad       	ldd	r25, Y+59	; 0x3b
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	9b af       	std	Y+59, r25	; 0x3b
     bc2:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc4:	8a ad       	ldd	r24, Y+58	; 0x3a
     bc6:	9b ad       	ldd	r25, Y+59	; 0x3b
     bc8:	89 2b       	or	r24, r25
     bca:	69 f7       	brne	.-38     	; 0xba6 <tone+0x42c>
     bcc:	53 c0       	rjmp	.+166    	; 0xc74 <tone+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bce:	6e a9       	ldd	r22, Y+54	; 0x36
     bd0:	7f a9       	ldd	r23, Y+55	; 0x37
     bd2:	88 ad       	ldd	r24, Y+56	; 0x38
     bd4:	99 ad       	ldd	r25, Y+57	; 0x39
     bd6:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	9b af       	std	Y+59, r25	; 0x3b
     be0:	8a af       	std	Y+58, r24	; 0x3a
     be2:	8a ad       	ldd	r24, Y+58	; 0x3a
     be4:	9b ad       	ldd	r25, Y+59	; 0x3b
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	8e af       	std	Y+62, r24	; 0x3e
     bea:	8e ad       	ldd	r24, Y+62	; 0x3e
     bec:	9f ad       	ldd	r25, Y+63	; 0x3f
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <tone+0x474>
     bf2:	9f af       	std	Y+63, r25	; 0x3f
     bf4:	8e af       	std	Y+62, r24	; 0x3e
     bf6:	3e c0       	rjmp	.+124    	; 0xc74 <tone+0x4fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	53 e4       	ldi	r21, 0x43	; 67
     c00:	69 a5       	ldd	r22, Y+41	; 0x29
     c02:	7a a5       	ldd	r23, Y+42	; 0x2a
     c04:	8b a5       	ldd	r24, Y+43	; 0x2b
     c06:	9c a5       	ldd	r25, Y+44	; 0x2c
     c08:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__gesf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	4c f5       	brge	.+82     	; 0xc62 <tone+0x4e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     c10:	8e 01       	movw	r16, r28
     c12:	00 5c       	subi	r16, 0xC0	; 192
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	6d a5       	ldd	r22, Y+45	; 0x2d
     c18:	7e a5       	ldd	r23, Y+46	; 0x2e
     c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1c:	98 a9       	ldd	r25, Y+48	; 0x30
     c1e:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	f8 01       	movw	r30, r16
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	ce 01       	movw	r24, r28
     c2e:	8e 5b       	subi	r24, 0xBE	; 190
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	9e 01       	movw	r18, r28
     c34:	20 5c       	subi	r18, 0xC0	; 192
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	f9 01       	movw	r30, r18
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	fc 01       	movw	r30, r24
     c40:	31 83       	std	Z+1, r19	; 0x01
     c42:	20 83       	st	Z, r18
     c44:	ce 01       	movw	r24, r28
     c46:	8e 5b       	subi	r24, 0xBE	; 190
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <tone+0x4d6>
     c54:	9e 01       	movw	r18, r28
     c56:	2e 5b       	subi	r18, 0xBE	; 190
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	f9 01       	movw	r30, r18
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
     c60:	1c c0       	rjmp	.+56     	; 0xc9a <tone+0x520>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c62:	69 a5       	ldd	r22, Y+41	; 0x29
     c64:	7a a5       	ldd	r23, Y+42	; 0x2a
     c66:	8b a5       	ldd	r24, Y+43	; 0x2b
     c68:	9c a5       	ldd	r25, Y+44	; 0x2c
     c6a:	0e 94 be 11 	call	0x237c	; 0x237c <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	89 ab       	std	Y+49, r24	; 0x31
     c74:	ce 01       	movw	r24, r28
     c76:	8c 5b       	subi	r24, 0xBC	; 188
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	29 a9       	ldd	r18, Y+49	; 0x31
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c80:	ce 01       	movw	r24, r28
     c82:	8c 5b       	subi	r24, 0xBC	; 188
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	28 2f       	mov	r18, r24
     c8c:	2a 95       	dec	r18
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <tone+0x512>
     c90:	ce 01       	movw	r24, r28
     c92:	8c 5b       	subi	r24, 0xBC	; 188
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
			i--;
			delay_us(10);
		}
		i = interval;
		set_output_bit(IO_AUDIO);
		while (duration && i) {
     c9a:	ce 01       	movw	r24, r28
     c9c:	89 5b       	subi	r24, 0xB9	; 185
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	89 2b       	or	r24, r25
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <tone+0x53a>
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	89 2b       	or	r24, r25
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <tone+0x53a>
     cb2:	d0 ce       	rjmp	.-608    	; 0xa54 <tone+0x2da>
 */
int tone(int frequency, int duration) {
	int interval = (50000 / frequency);
	duration = duration * 100;

	while (duration) {
     cb4:	ce 01       	movw	r24, r28
     cb6:	89 5b       	subi	r24, 0xB9	; 185
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	89 2b       	or	r24, r25
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <tone+0x54c>
     cc4:	9c cd       	rjmp	.-1224   	; 0x7fe <tone+0x84>
			i--;
			delay_us(10);
		}
	}

	return 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
}
     cca:	c8 5b       	subi	r28, 0xB8	; 184
     ccc:	df 4f       	sbci	r29, 0xFF	; 255
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <start>:
 * @brief
 *
 * Function for visual and sound representation of a countdown.
 * After 4 signals (3 red and 1 green), the main program starts
*/
void start(){
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <start+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <start+0x8>
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62

	/// Initialization of LEDs numbers
	int led1=2; ///start left LED
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	89 83       	std	Y+1, r24	; 0x01
	int led2=7; ///start right LED
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03

	leds_set_headlights(250); /// Turn on the two headlights.
     cfe:	8a ef       	ldi	r24, 0xFA	; 250
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 d7 10 	call	0x21ae	; 0x21ae <leds_set_headlights>

	/// Show user info
	gfx_move(4, 0);///Sets the point from which to write
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("To start the program,"); /// write the text to the display
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	gfx_move(4, 13);
     d16:	6d e0       	ldi	r22, 0x0D	; 13
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("Press the S3 button");
     d1e:	8a e1       	ldi	r24, 0x1A	; 26
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	gfx_move(50, 23);
     d26:	67 e1       	ldi	r22, 0x17	; 23
     d28:	82 e3       	ldi	r24, 0x32	; 50
     d2a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("----->");
     d2e:	8e e2       	ldi	r24, 0x2E	; 46
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	gfx_move(4, 35);
     d36:	63 e2       	ldi	r22, 0x23	; 35
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("To stop the program");
     d3e:	85 e3       	ldi	r24, 0x35	; 53
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	gfx_move(4, 48);
     d46:	60 e3       	ldi	r22, 0x30	; 48
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("Press the S2 button");
     d4e:	89 e4       	ldi	r24, 0x49	; 73
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	gfx_move(50, 55);
     d56:	67 e3       	ldi	r22, 0x37	; 55
     d58:	82 e3       	ldi	r24, 0x32	; 50
     d5a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
	gfx_print_text("<-----");
     d5e:	8d e5       	ldi	r24, 0x5D	; 93
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0e 94 0a 0b 	call	0x1614	; 0x1614 <gfx_print_text>
	deactivate_output_bit(IO_INPUT_1);
     d66:	81 e3       	ldi	r24, 0x31	; 49
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	21 e3       	ldi	r18, 0x31	; 49
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	2f 7e       	andi	r18, 0xEF	; 239
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
	while(get_input_bit(IO_INPUT_1)){ ///S3 start-button not pressed
     d78:	00 00       	nop
     d7a:	80 e3       	ldi	r24, 0x30	; 48
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	80 71       	andi	r24, 0x10	; 16
     d88:	99 27       	eor	r25, r25
     d8a:	89 2b       	or	r24, r25
     d8c:	b1 f7       	brne	.-20     	; 0xd7a <start+0x98>
				sei(); /// End of Atomic state: interrupts are now possible again
			}
			delay(500); /// wait 0,5s
		}
	}*/
	leds_set_headlights(0); /// switch off headlight
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 d7 10 	call	0x21ae	; 0x21ae <leds_set_headlights>
}
     d96:	00 00       	nop
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <display_write>:
     da6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     daa:	38 2f       	mov	r19, r24
     dac:	31 70       	andi	r19, 0x01	; 1
     dae:	29 2f       	mov	r18, r25
     db0:	2e 7f       	andi	r18, 0xFE	; 254
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	93 27       	eor	r25, r19
     db6:	92 2b       	or	r25, r18
     db8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dbc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dc0:	9d 7f       	andi	r25, 0xFD	; 253
     dc2:	31 11       	cpse	r19, r1
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <display_write+0x24>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <display_write+0x26>
     dca:	22 e0       	ldi	r18, 0x02	; 2
     dcc:	92 2b       	or	r25, r18
     dce:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dd2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dd6:	97 7f       	andi	r25, 0xF7	; 247
     dd8:	81 fd       	sbrc	r24, 1
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <display_write+0x3a>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <display_write+0x3c>
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	89 2b       	or	r24, r25
     de4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     de8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     dec:	8f 7e       	andi	r24, 0xEF	; 239
     dee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	8a bb       	out	0x1a, r24	; 26
     df6:	6b bb       	out	0x1b, r22	; 27
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	8a 95       	dec	r24
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <display_write+0x54>
     dfe:	00 00       	nop
     e00:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e04:	84 60       	ori	r24, 0x04	; 4
     e06:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e0a:	85 e0       	ldi	r24, 0x05	; 5
     e0c:	8a 95       	dec	r24
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <display_write+0x66>
     e10:	00 00       	nop
     e12:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e16:	8b 7f       	andi	r24, 0xFB	; 251
     e18:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	8a 95       	dec	r24
     e20:	f1 f7       	brne	.-4      	; 0xe1e <display_write+0x78>
     e22:	00 00       	nop
     e24:	1b ba       	out	0x1b, r1	; 27
     e26:	1a ba       	out	0x1a, r1	; 26
     e28:	08 95       	ret

00000e2a <display_read>:
     e2a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e2e:	38 2f       	mov	r19, r24
     e30:	31 70       	andi	r19, 0x01	; 1
     e32:	29 2f       	mov	r18, r25
     e34:	2e 7f       	andi	r18, 0xFE	; 254
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	93 27       	eor	r25, r19
     e3a:	92 2b       	or	r25, r18
     e3c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e40:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e44:	9d 7f       	andi	r25, 0xFD	; 253
     e46:	31 11       	cpse	r19, r1
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <display_read+0x24>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <display_read+0x26>
     e4e:	22 e0       	ldi	r18, 0x02	; 2
     e50:	92 2b       	or	r25, r18
     e52:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e56:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e5a:	97 7f       	andi	r25, 0xF7	; 247
     e5c:	81 fd       	sbrc	r24, 1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <display_read+0x3a>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <display_read+0x3c>
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	89 2b       	or	r24, r25
     e68:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e6c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e70:	80 61       	ori	r24, 0x10	; 16
     e72:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e76:	1a ba       	out	0x1a, r1	; 26
     e78:	85 e0       	ldi	r24, 0x05	; 5
     e7a:	8a 95       	dec	r24
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <display_read+0x50>
     e7e:	00 00       	nop
     e80:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e8a:	95 e1       	ldi	r25, 0x15	; 21
     e8c:	9a 95       	dec	r25
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <display_read+0x62>
     e90:	00 00       	nop
     e92:	89 b3       	in	r24, 0x19	; 25
     e94:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e98:	9b 7f       	andi	r25, 0xFB	; 251
     e9a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     e9e:	95 e0       	ldi	r25, 0x05	; 5
     ea0:	9a 95       	dec	r25
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <display_read+0x76>
     ea4:	00 00       	nop
     ea6:	08 95       	ret

00000ea8 <display_wait>:
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <display_type>
     eb2:	91 11       	cpse	r25, r1
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <display_wait+0x12>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	11 c0       	rjmp	.+34     	; 0xedc <display_wait+0x34>
     eba:	c8 2f       	mov	r28, r24
     ebc:	c1 70       	andi	r28, 0x01	; 1
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	10 e0       	ldi	r17, 0x00	; 0
     ec2:	8c 2f       	mov	r24, r28
     ec4:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
     ec8:	0f 5f       	subi	r16, 0xFF	; 255
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	87 ff       	sbrs	r24, 7
     ece:	05 c0       	rjmp	.+10     	; 0xeda <display_wait+0x32>
     ed0:	0f 3f       	cpi	r16, 0xFF	; 255
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	18 07       	cpc	r17, r24
     ed6:	a9 f7       	brne	.-22     	; 0xec2 <display_wait+0x1a>
     ed8:	ee cf       	rjmp	.-36     	; 0xeb6 <display_wait+0xe>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <display_init>:
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     eea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     eee:	88 60       	ori	r24, 0x08	; 8
     ef0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     ef4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     ef8:	80 61       	ori	r24, 0x10	; 16
     efa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     efe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f02:	84 60       	ori	r24, 0x04	; 4
     f04:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f08:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f12:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f16:	82 60       	ori	r24, 0x02	; 2
     f18:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     f1c:	b8 9a       	sbi	0x17, 0	; 23
     f1e:	1a ba       	out	0x1a, r1	; 26
     f20:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f24:	87 7f       	andi	r24, 0xF7	; 247
     f26:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f2a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f34:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f38:	8b 7f       	andi	r24, 0xFB	; 251
     f3a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f3e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f48:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f4c:	8d 7f       	andi	r24, 0xFD	; 253
     f4e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     f52:	c0 98       	cbi	0x18, 0	; 24
     f54:	97 9b       	sbis	0x12, 7	; 18
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <display_init+0x86>
     f58:	97 98       	cbi	0x12, 7	; 18
     f5a:	8f e9       	ldi	r24, 0x9F	; 159
     f5c:	9f e0       	ldi	r25, 0x0F	; 15
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <display_init+0x7a>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <display_init+0x80>
     f64:	00 00       	nop
     f66:	97 9a       	sbi	0x12, 7	; 18
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <display_init+0x92>
     f6a:	8f e9       	ldi	r24, 0x9F	; 159
     f6c:	9f e0       	ldi	r25, 0x0F	; 15
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <display_init+0x8a>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <display_init+0x90>
     f74:	00 00       	nop
     f76:	c0 9a       	sbi	0x18, 0	; 24
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
     f7e:	88 23       	and	r24, r24
     f80:	51 f0       	breq	.+20     	; 0xf96 <display_init+0xb2>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
     f88:	88 23       	and	r24, r24
     f8a:	11 f0       	breq	.+4      	; 0xf90 <display_init+0xac>
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <display_init+0xae>
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <display_type>
     f96:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
     f9a:	8f 3f       	cpi	r24, 0xFF	; 255
     f9c:	11 f4       	brne	.+4      	; 0xfa2 <display_init+0xbe>
     f9e:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <display_type>
     fa2:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <display_type>
     fa6:	08 95       	ret

00000fa8 <pwm_init>:
     fa8:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <pwm_timer_sub+0x1>
     fac:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <pwm_timer_sub>
     fb0:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <pwm_timer_ms+0x1>
     fb4:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <pwm_timer_ms>
     fb8:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <pwm_timer_sec>
     fbc:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <pwm_timer_sec+0x1>
     fc0:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <pwm_timer_sec+0x2>
     fc4:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <pwm_timer_sec+0x3>
     fc8:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <pwm_channel_A+0x1>
     fcc:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <pwm_channel_A>
     fd0:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <pwm_channel_B+0x1>
     fd4:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <pwm_channel_B>
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
     fe0:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
     fe4:	c5 98       	cbi	0x18, 5	; 24
     fe6:	c6 98       	cbi	0x18, 6	; 24
     fe8:	bd 9a       	sbi	0x17, 5	; 23
     fea:	be 9a       	sbi	0x17, 6	; 23
     fec:	bf 9a       	sbi	0x17, 7	; 23
     fee:	c7 9a       	sbi	0x18, 7	; 24
     ff0:	1d bc       	out	0x2d, r1	; 45
     ff2:	1c bc       	out	0x2c, r1	; 44
     ff4:	8a ea       	ldi	r24, 0xAA	; 170
     ff6:	8f bd       	out	0x2f, r24	; 47
     ff8:	82 e1       	ldi	r24, 0x12	; 18
     ffa:	8e bd       	out	0x2e, r24	; 46
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	94 e0       	ldi	r25, 0x04	; 4
    1000:	97 bd       	out	0x27, r25	; 39
    1002:	86 bd       	out	0x26, r24	; 38
    1004:	87 b7       	in	r24, 0x37	; 55
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	87 bf       	out	0x37, r24	; 55
    100a:	08 95       	ret

0000100c <__vector_14>:
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	2f 93       	push	r18
    1018:	3f 93       	push	r19
    101a:	4f 93       	push	r20
    101c:	8f 93       	push	r24
    101e:	9f 93       	push	r25
    1020:	af 93       	push	r26
    1022:	bf 93       	push	r27
    1024:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <pwm_timer_sub>
    1028:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <pwm_timer_sub+0x1>
    102c:	9c 01       	movw	r18, r24
    102e:	28 5e       	subi	r18, 0xE8	; 232
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	28 3e       	cpi	r18, 0xE8	; 232
    1034:	43 e0       	ldi	r20, 0x03	; 3
    1036:	34 07       	cpc	r19, r20
    1038:	28 f4       	brcc	.+10     	; 0x1044 <__vector_14+0x38>
    103a:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <pwm_timer_sub+0x1>
    103e:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <pwm_timer_sub>
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <__vector_14+0x56>
    1044:	80 5d       	subi	r24, 0xD0	; 208
    1046:	93 40       	sbci	r25, 0x03	; 3
    1048:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <pwm_timer_sub+0x1>
    104c:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <pwm_timer_sub>
    1050:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1054:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    105e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    1062:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <pwm_timer_ms>
    1066:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <pwm_timer_ms+0x1>
    106a:	9c 01       	movw	r18, r24
    106c:	2f 5f       	subi	r18, 0xFF	; 255
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	28 3e       	cpi	r18, 0xE8	; 232
    1072:	43 e0       	ldi	r20, 0x03	; 3
    1074:	34 07       	cpc	r19, r20
    1076:	28 f4       	brcc	.+10     	; 0x1082 <__vector_14+0x76>
    1078:	30 93 bd 03 	sts	0x03BD, r19	; 0x8003bd <pwm_timer_ms+0x1>
    107c:	20 93 bc 03 	sts	0x03BC, r18	; 0x8003bc <pwm_timer_ms>
    1080:	19 c0       	rjmp	.+50     	; 0x10b4 <__vector_14+0xa8>
    1082:	87 5e       	subi	r24, 0xE7	; 231
    1084:	93 40       	sbci	r25, 0x03	; 3
    1086:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <pwm_timer_ms+0x1>
    108a:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <pwm_timer_ms>
    108e:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <pwm_timer_sec>
    1092:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <pwm_timer_sec+0x1>
    1096:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <pwm_timer_sec+0x2>
    109a:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <pwm_timer_sec+0x3>
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	a1 1d       	adc	r26, r1
    10a2:	b1 1d       	adc	r27, r1
    10a4:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <pwm_timer_sec>
    10a8:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <pwm_timer_sec+0x1>
    10ac:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <pwm_timer_sec+0x2>
    10b0:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <pwm_timer_sec+0x3>
    10b4:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    10b8:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	23 e0       	ldi	r18, 0x03	; 3
    10c0:	92 07       	cpc	r25, r18
    10c2:	10 f0       	brcs	.+4      	; 0x10c8 <__vector_14+0xbc>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	94 e0       	ldi	r25, 0x04	; 4
    10c8:	9b bd       	out	0x2b, r25	; 43
    10ca:	8a bd       	out	0x2a, r24	; 42
    10cc:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    10d0:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	43 e0       	ldi	r20, 0x03	; 3
    10d8:	94 07       	cpc	r25, r20
    10da:	10 f0       	brcs	.+4      	; 0x10e0 <__vector_14+0xd4>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	99 bd       	out	0x29, r25	; 41
    10e2:	88 bd       	out	0x28, r24	; 40
    10e4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    10e8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    10ec:	8f 3f       	cpi	r24, 0xFF	; 255
    10ee:	23 e0       	ldi	r18, 0x03	; 3
    10f0:	92 07       	cpc	r25, r18
    10f2:	10 f0       	brcs	.+4      	; 0x10f8 <__vector_14+0xec>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	94 e0       	ldi	r25, 0x04	; 4
    10f8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    10fc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	4f 91       	pop	r20
    110a:	3f 91       	pop	r19
    110c:	2f 91       	pop	r18
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <delay>:
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	41 f0       	breq	.+16     	; 0x112c <delay+0x14>
    111c:	ef e9       	ldi	r30, 0x9F	; 159
    111e:	ff e0       	ldi	r31, 0x0F	; 15
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <delay+0x8>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <delay+0xe>
    1126:	00 00       	nop
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f6 cf       	rjmp	.-20     	; 0x1118 <delay>
    112c:	08 95       	ret

0000112e <spi_tx>:
    112e:	8f b9       	out	0x0f, r24	; 15
    1130:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <spi_tx_chk>
    1134:	89 27       	eor	r24, r25
    1136:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <spi_tx_chk>
    113a:	08 95       	ret

0000113c <spi_restart_transmission>:
    113c:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <spi_pos>
    1140:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <spi_tx_size>
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	98 0f       	add	r25, r24
    1148:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <spi_size>
    114c:	96 e9       	ldi	r25, 0x96	; 150
    114e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <spi_tx_chk>
    1152:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    1156:	f8 94       	cli
    1158:	b0 99       	sbic	0x16, 0	; 22
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <spi_restart_transmission+0x26>
    115c:	78 94       	sei
    115e:	00 00       	nop
    1160:	fa cf       	rjmp	.-12     	; 0x1156 <spi_restart_transmission+0x1a>
    1162:	90 ec       	ldi	r25, 0xC0	; 192
    1164:	9d b9       	out	0x0d, r25	; 13
    1166:	0e 94 97 08 	call	0x112e	; 0x112e <spi_tx>
    116a:	77 9a       	sbi	0x0e, 7	; 14
    116c:	78 94       	sei
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret

00001172 <spi_init>:
    1172:	b8 98       	cbi	0x17, 0	; 23
    1174:	c0 98       	cbi	0x18, 0	; 24
    1176:	bb 9a       	sbi	0x17, 3	; 23
    1178:	c3 9a       	sbi	0x18, 3	; 24
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0c 94 9e 08 	jmp	0x113c	; 0x113c <spi_restart_transmission>

00001180 <__vector_17>:
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	0b b6       	in	r0, 0x3b	; 59
    118c:	0f 92       	push	r0
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	8f b1       	in	r24, 0x0f	; 15
    11a8:	90 91 03 04 	lds	r25, 0x0403	; 0x800403 <spi_rx_chk>
    11ac:	98 27       	eor	r25, r24
    11ae:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <spi_rx_chk>
    11b2:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <spi_pos>
    11b6:	e1 11       	cpse	r30, r1
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <__vector_17+0x66>
    11ba:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <spi_rx_size>
    11be:	8c 31       	cpi	r24, 0x1C	; 28
    11c0:	30 f0       	brcs	.+12     	; 0x11ce <__vector_17+0x4e>
    11c2:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <spi_tx_size>
    11c6:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <__vector_17+0x60>
    11ce:	48 2f       	mov	r20, r24
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <spi_size>
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	42 17       	cp	r20, r18
    11da:	53 07       	cpc	r21, r19
    11dc:	fc f0       	brlt	.+62     	; 0x121c <__vector_17+0x9c>
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <spi_size>
    11e4:	1b c0       	rjmp	.+54     	; 0x121c <__vector_17+0x9c>
    11e6:	2e 2f       	mov	r18, r30
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <spi_rx_size>
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	42 17       	cp	r20, r18
    11f2:	53 07       	cpc	r21, r19
    11f4:	2c f0       	brlt	.+10     	; 0x1200 <__vector_17+0x80>
    11f6:	d9 01       	movw	r26, r18
    11f8:	ab 51       	subi	r26, 0x1B	; 27
    11fa:	bc 4f       	sbci	r27, 0xFC	; 252
    11fc:	8c 93       	st	X, r24
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <__vector_17+0x9c>
    1200:	21 50       	subi	r18, 0x01	; 1
    1202:	31 09       	sbc	r19, r1
    1204:	42 17       	cp	r20, r18
    1206:	53 07       	cpc	r21, r19
    1208:	49 f4       	brne	.+18     	; 0x121c <__vector_17+0x9c>
    120a:	99 23       	and	r25, r25
    120c:	39 f0       	breq	.+14     	; 0x121c <__vector_17+0x9c>
    120e:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <spi_err_cnt>
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <spi_err_cnt>
    1218:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <spi_rx_size>
    121c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <spi_tx_size>
    1220:	e8 17       	cp	r30, r24
    1222:	28 f4       	brcc	.+10     	; 0x122e <__vector_17+0xae>
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	ea 53       	subi	r30, 0x3A	; 58
    1228:	fc 4f       	sbci	r31, 0xFC	; 252
    122a:	80 81       	ld	r24, Z
    122c:	0a c0       	rjmp	.+20     	; 0x1242 <__vector_17+0xc2>
    122e:	e8 13       	cpse	r30, r24
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <__vector_17+0xb8>
    1232:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <spi_tx_chk>
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <__vector_17+0xc2>
    1238:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <spi_size>
    123c:	e8 17       	cp	r30, r24
    123e:	48 f4       	brcc	.+18     	; 0x1252 <__vector_17+0xd2>
    1240:	8f ef       	ldi	r24, 0xFF	; 255
    1242:	0e 94 97 08 	call	0x112e	; 0x112e <spi_tx>
    1246:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <spi_pos>
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <spi_pos>
    1250:	11 c0       	rjmp	.+34     	; 0x1274 <__vector_17+0xf4>
    1252:	b8 98       	cbi	0x17, 0	; 23
    1254:	c0 98       	cbi	0x18, 0	; 24
    1256:	1d b8       	out	0x0d, r1	; 13
    1258:	b8 98       	cbi	0x17, 0	; 23
    125a:	c0 98       	cbi	0x18, 0	; 24
    125c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <spi_frame_cnt>
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <spi_frame_cnt>
    1266:	78 94       	sei
    1268:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <spi_rx_size>
    126c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <spi_finished_callback>
    1270:	0e 94 9e 08 	call	0x113c	; 0x113c <spi_restart_transmission>
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	bf 91       	pop	r27
    127a:	af 91       	pop	r26
    127c:	9f 91       	pop	r25
    127e:	8f 91       	pop	r24
    1280:	7f 91       	pop	r23
    1282:	6f 91       	pop	r22
    1284:	5f 91       	pop	r21
    1286:	4f 91       	pop	r20
    1288:	3f 91       	pop	r19
    128a:	2f 91       	pop	r18
    128c:	0f 90       	pop	r0
    128e:	0b be       	out	0x3b, r0	; 59
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <gfx_store_disp_tile>:
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	c8 2f       	mov	r28, r24
    12a0:	d8 eb       	ldi	r29, 0xB8	; 184
    12a2:	d6 0f       	add	r29, r22
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	00 f5       	brcc	.+64     	; 0x12e8 <gfx_store_disp_tile+0x4e>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    12ae:	6d 2f       	mov	r22, r29
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    12bc:	6c 2f       	mov	r22, r28
    12be:	66 0f       	add	r22, r22
    12c0:	66 0f       	add	r22, r22
    12c2:	66 0f       	add	r22, r22
    12c4:	60 5c       	subi	r22, 0xC0	; 192
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    12cc:	c8 e0       	ldi	r28, 0x08	; 8
    12ce:	d4 e0       	ldi	r29, 0x04	; 4
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    12d6:	69 91       	ld	r22, Y+
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	c0 31       	cpi	r28, 0x10	; 16
    12e2:	d8 07       	cpc	r29, r24
    12e4:	a9 f7       	brne	.-22     	; 0x12d0 <gfx_store_disp_tile+0x36>
    12e6:	20 c0       	rjmp	.+64     	; 0x1328 <gfx_store_disp_tile+0x8e>
    12e8:	c8 50       	subi	r28, 0x08	; 8
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    12f0:	6d 2f       	mov	r22, r29
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    12fe:	cc 0f       	add	r28, r28
    1300:	cc 0f       	add	r28, r28
    1302:	cc 0f       	add	r28, r28
    1304:	60 e4       	ldi	r22, 0x40	; 64
    1306:	6c 0f       	add	r22, r28
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    130e:	c8 e0       	ldi	r28, 0x08	; 8
    1310:	d4 e0       	ldi	r29, 0x04	; 4
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1318:	69 91       	ld	r22, Y+
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	c0 31       	cpi	r28, 0x10	; 16
    1324:	d8 07       	cpc	r29, r24
    1326:	a9 f7       	brne	.-22     	; 0x1312 <gfx_store_disp_tile+0x78>
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <gfx_get_x>:
    132e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1332:	08 95       	ret

00001334 <gfx_get_y>:
    1334:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1338:	08 95       	ret

0000133a <gfx_draw_mode>:
    133a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    133e:	08 95       	ret

00001340 <gfx_move>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	d8 2f       	mov	r29, r24
    1346:	c6 2f       	mov	r28, r22
    1348:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    134c:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <gfx_y>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    135c:	c6 95       	lsr	r28
    135e:	c6 95       	lsr	r28
    1360:	c6 95       	lsr	r28
    1362:	c8 54       	subi	r28, 0x48	; 72
    1364:	6c 2f       	mov	r22, r28
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    136c:	6c 2f       	mov	r22, r28
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1380:	60 e4       	ldi	r22, 0x40	; 64
    1382:	d1 34       	cpi	r29, 0x41	; 65
    1384:	28 f0       	brcs	.+10     	; 0x1390 <gfx_move+0x50>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    138c:	6d 2f       	mov	r22, r29
    138e:	05 c0       	rjmp	.+10     	; 0x139a <gfx_move+0x5a>
    1390:	6d 0f       	add	r22, r29
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1398:	60 e4       	ldi	r22, 0x40	; 64
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <display_write>

000013a4 <gfx_fill>:
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	18 2f       	mov	r17, r24
    13ac:	c8 eb       	ldi	r28, 0xB8	; 184
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13ba:	6c 2f       	mov	r22, r28
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    13c2:	6c 2f       	mov	r22, r28
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    13ca:	d0 e4       	ldi	r29, 0x40	; 64
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13d8:	61 2f       	mov	r22, r17
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    13e0:	61 2f       	mov	r22, r17
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    13e8:	d1 50       	subi	r29, 0x01	; 1
    13ea:	81 f7       	brne	.-32     	; 0x13cc <gfx_fill+0x28>
    13ec:	cf 5f       	subi	r28, 0xFF	; 255
    13ee:	c0 3c       	cpi	r28, 0xC0	; 192
    13f0:	f1 f6       	brne	.-68     	; 0x13ae <gfx_fill+0xa>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    13fe:	68 eb       	ldi	r22, 0xB8	; 184
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1406:	68 eb       	ldi	r22, 0xB8	; 184
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <display_write>

00001414 <gfx_display_write2>:
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	d8 2f       	mov	r29, r24
    141e:	c6 2f       	mov	r28, r22
    1420:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1424:	87 fd       	sbrc	r24, 7
    1426:	37 c0       	rjmp	.+110    	; 0x1496 <gfx_display_write2+0x82>
    1428:	11 e0       	ldi	r17, 0x01	; 1
    142a:	80 34       	cpi	r24, 0x40	; 64
    142c:	08 f4       	brcc	.+2      	; 0x1430 <gfx_display_write2+0x1c>
    142e:	10 e0       	ldi	r17, 0x00	; 0
    1430:	81 2f       	mov	r24, r17
    1432:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1436:	02 e0       	ldi	r16, 0x02	; 2
    1438:	01 0f       	add	r16, r17
    143a:	80 2f       	mov	r24, r16
    143c:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1440:	80 2f       	mov	r24, r16
    1442:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1446:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <gfx_dm>
    144a:	92 ff       	sbrs	r25, 2
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <gfx_display_write2+0x3e>
    144e:	d0 95       	com	r29
    1450:	9b 7f       	andi	r25, 0xFB	; 251
    1452:	dc 23       	and	r29, r28
    1454:	91 11       	cpse	r25, r1
    1456:	02 c0       	rjmp	.+4      	; 0x145c <gfx_display_write2+0x48>
    1458:	c8 2f       	mov	r28, r24
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <gfx_display_write2+0x50>
    145c:	91 30       	cpi	r25, 0x01	; 1
    145e:	21 f4       	brne	.+8      	; 0x1468 <gfx_display_write2+0x54>
    1460:	c0 95       	com	r28
    1462:	c8 23       	and	r28, r24
    1464:	cd 2b       	or	r28, r29
    1466:	02 c0       	rjmp	.+4      	; 0x146c <gfx_display_write2+0x58>
    1468:	c8 2f       	mov	r28, r24
    146a:	cd 27       	eor	r28, r29
    146c:	81 2f       	mov	r24, r17
    146e:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1472:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <gfx_x>
    1476:	60 64       	ori	r22, 0x40	; 64
    1478:	81 2f       	mov	r24, r17
    147a:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    147e:	81 2f       	mov	r24, r17
    1480:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1484:	6c 2f       	mov	r22, r28
    1486:	80 2f       	mov	r24, r16
    1488:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    148c:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <gfx_x>
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <gfx_char_width>:
    14a0:	90 ee       	ldi	r25, 0xE0	; 224
    14a2:	98 0f       	add	r25, r24
    14a4:	90 36       	cpi	r25, 0x60	; 96
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <gfx_char_width+0xa>
    14a8:	80 e8       	ldi	r24, 0x80	; 128
    14aa:	80 52       	subi	r24, 0x20	; 32
    14ac:	96 e0       	ldi	r25, 0x06	; 6
    14ae:	89 9f       	mul	r24, r25
    14b0:	f0 01       	movw	r30, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	ec 59       	subi	r30, 0x9C	; 156
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	90 81       	ld	r25, Z
    14ba:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    14be:	81 11       	cpse	r24, r1
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <gfx_char_width+0x24>
    14c2:	9f e1       	ldi	r25, 0x1F	; 31
    14c4:	25 e0       	ldi	r18, 0x05	; 5
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 fd       	sbrc	r25, 0
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	96 95       	lsr	r25
    14ce:	21 50       	subi	r18, 0x01	; 1
    14d0:	d9 f7       	brne	.-10     	; 0x14c8 <gfx_char_width+0x28>
    14d2:	08 95       	ret

000014d4 <gfx_print_char_base>:
    14d4:	7f 92       	push	r7
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	c6 2f       	mov	r28, r22
    14f0:	90 ee       	ldi	r25, 0xE0	; 224
    14f2:	98 0f       	add	r25, r24
    14f4:	90 36       	cpi	r25, 0x60	; 96
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <gfx_print_char_base+0x26>
    14f8:	80 e8       	ldi	r24, 0x80	; 128
    14fa:	80 52       	subi	r24, 0x20	; 32
    14fc:	26 e0       	ldi	r18, 0x06	; 6
    14fe:	82 9f       	mul	r24, r18
    1500:	c0 01       	movw	r24, r0
    1502:	11 24       	eor	r1, r1
    1504:	fc 01       	movw	r30, r24
    1506:	eb 59       	subi	r30, 0x9B	; 155
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	7f 01       	movw	r14, r30
    150c:	fc 01       	movw	r30, r24
    150e:	ec 59       	subi	r30, 0x9C	; 156
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	90 80       	ld	r9, Z
    1514:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    1518:	81 11       	cpse	r24, r1
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <gfx_print_char_base+0x4c>
    151c:	9f e1       	ldi	r25, 0x1F	; 31
    151e:	99 2e       	mov	r9, r25
    1520:	ac 2e       	mov	r10, r28
    1522:	0c 2e       	mov	r0, r28
    1524:	00 0c       	add	r0, r0
    1526:	bb 08       	sbc	r11, r11
    1528:	6f ef       	ldi	r22, 0xFF	; 255
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	6b 01       	movw	r12, r22
    152e:	0c 2e       	mov	r0, r28
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <gfx_print_char_base+0x60>
    1532:	cc 0c       	add	r12, r12
    1534:	0a 94       	dec	r0
    1536:	ea f7       	brpl	.-6      	; 0x1532 <gfx_print_char_base+0x5e>
    1538:	8c 2c       	mov	r8, r12
    153a:	00 27       	eor	r16, r16
    153c:	11 27       	eor	r17, r17
    153e:	0a 19       	sub	r16, r10
    1540:	1b 09       	sbc	r17, r11
    1542:	00 2e       	mov	r0, r16
    1544:	02 c0       	rjmp	.+4      	; 0x154a <gfx_print_char_base+0x76>
    1546:	75 95       	asr	r23
    1548:	67 95       	ror	r22
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <gfx_print_char_base+0x72>
    154e:	d6 2f       	mov	r29, r22
    1550:	85 e0       	ldi	r24, 0x05	; 5
    1552:	78 2e       	mov	r7, r24
    1554:	90 fe       	sbrs	r9, 0
    1556:	15 c0       	rjmp	.+42     	; 0x1582 <gfx_print_char_base+0xae>
    1558:	f7 01       	movw	r30, r14
    155a:	80 81       	ld	r24, Z
    155c:	c7 fd       	sbrc	r28, 7
    155e:	07 c0       	rjmp	.+14     	; 0x156e <gfx_print_char_base+0x9a>
    1560:	68 2d       	mov	r22, r8
    1562:	0a 2c       	mov	r0, r10
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <gfx_print_char_base+0x94>
    1566:	88 0f       	add	r24, r24
    1568:	0a 94       	dec	r0
    156a:	ea f7       	brpl	.-6      	; 0x1566 <gfx_print_char_base+0x92>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <gfx_print_char_base+0xaa>
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	00 2e       	mov	r0, r16
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <gfx_print_char_base+0xa4>
    1574:	95 95       	asr	r25
    1576:	87 95       	ror	r24
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <gfx_print_char_base+0xa0>
    157c:	6d 2f       	mov	r22, r29
    157e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_display_write2>
    1582:	96 94       	lsr	r9
    1584:	ff ef       	ldi	r31, 0xFF	; 255
    1586:	ef 1a       	sub	r14, r31
    1588:	ff 0a       	sbc	r15, r31
    158a:	7a 94       	dec	r7
    158c:	71 10       	cpse	r7, r1
    158e:	e2 cf       	rjmp	.-60     	; 0x1554 <gfx_print_char_base+0x80>
    1590:	c7 fd       	sbrc	r28, 7
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <gfx_print_char_base+0xc4>
    1594:	6c 2d       	mov	r22, r12
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <gfx_print_char_base+0xd2>
    1598:	6f ef       	ldi	r22, 0xFF	; 255
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <gfx_print_char_base+0xce>
    159e:	75 95       	asr	r23
    15a0:	67 95       	ror	r22
    15a2:	0a 95       	dec	r16
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <gfx_print_char_base+0xca>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	df 90       	pop	r13
    15b6:	cf 90       	pop	r12
    15b8:	bf 90       	pop	r11
    15ba:	af 90       	pop	r10
    15bc:	9f 90       	pop	r9
    15be:	8f 90       	pop	r8
    15c0:	7f 90       	pop	r7
    15c2:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <gfx_display_write2>

000015c6 <gfx_print_char>:
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	d8 2f       	mov	r29, r24
    15ce:	10 91 07 04 	lds	r17, 0x0407	; 0x800407 <gfx_x>
    15d2:	c0 91 10 04 	lds	r28, 0x0410	; 0x800410 <gfx_y>
    15d6:	c7 70       	andi	r28, 0x07	; 7
    15d8:	6c 2f       	mov	r22, r28
    15da:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <gfx_print_char_base>
    15de:	cc 23       	and	r28, r28
    15e0:	a9 f0       	breq	.+42     	; 0x160c <gfx_print_char+0x46>
    15e2:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    15e6:	68 5f       	subi	r22, 0xF8	; 248
    15e8:	81 2f       	mov	r24, r17
    15ea:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    15ee:	68 ef       	ldi	r22, 0xF8	; 248
    15f0:	6c 0f       	add	r22, r28
    15f2:	8d 2f       	mov	r24, r29
    15f4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <gfx_print_char_base>
    15f8:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <gfx_y>
    15fc:	68 50       	subi	r22, 0x08	; 8
    15fe:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <gfx_x>
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <gfx_move>
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	08 95       	ret

00001614 <gfx_print_text>:
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
    161a:	89 91       	ld	r24, Y+
    161c:	88 23       	and	r24, r24
    161e:	19 f0       	breq	.+6      	; 0x1626 <gfx_print_text+0x12>
    1620:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <gfx_print_char>
    1624:	fa cf       	rjmp	.-12     	; 0x161a <gfx_print_text+0x6>
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <gfx_text_width>:
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	8c 01       	movw	r16, r24
    1634:	c0 e0       	ldi	r28, 0x00	; 0
    1636:	f8 01       	movw	r30, r16
    1638:	81 91       	ld	r24, Z+
    163a:	8f 01       	movw	r16, r30
    163c:	88 23       	and	r24, r24
    163e:	31 f0       	breq	.+12     	; 0x164c <gfx_text_width+0x20>
    1640:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <gfx_char_width>
    1644:	8c 0f       	add	r24, r28
    1646:	c1 e0       	ldi	r28, 0x01	; 1
    1648:	c8 0f       	add	r28, r24
    164a:	f5 cf       	rjmp	.-22     	; 0x1636 <gfx_text_width+0xa>
    164c:	8c 2f       	mov	r24, r28
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <gfx_print_text_P>:
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	ce 01       	movw	r24, r28
    165e:	fe 01       	movw	r30, r28
    1660:	24 91       	lpm	r18, Z
    1662:	22 23       	and	r18, r18
    1664:	31 f0       	breq	.+12     	; 0x1672 <gfx_print_text_P+0x1c>
    1666:	21 96       	adiw	r28, 0x01	; 1
    1668:	fc 01       	movw	r30, r24
    166a:	84 91       	lpm	r24, Z
    166c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <gfx_print_char>
    1670:	f5 cf       	rjmp	.-22     	; 0x165c <gfx_print_text_P+0x6>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <gfx_text_width_P>:
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	8c 01       	movw	r16, r24
    1680:	c0 e0       	ldi	r28, 0x00	; 0
    1682:	c8 01       	movw	r24, r16
    1684:	f8 01       	movw	r30, r16
    1686:	24 91       	lpm	r18, Z
    1688:	22 23       	and	r18, r18
    168a:	51 f0       	breq	.+20     	; 0x16a0 <gfx_text_width_P+0x28>
    168c:	0f 5f       	subi	r16, 0xFF	; 255
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	fc 01       	movw	r30, r24
    1692:	84 91       	lpm	r24, Z
    1694:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <gfx_char_width>
    1698:	8c 0f       	add	r24, r28
    169a:	c1 e0       	ldi	r28, 0x01	; 1
    169c:	c8 0f       	add	r28, r24
    169e:	f1 cf       	rjmp	.-30     	; 0x1682 <gfx_text_width_P+0xa>
    16a0:	8c 2f       	mov	r24, r28
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <gfx_init>:
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16b0:	6f e3       	ldi	r22, 0x3F	; 63
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16be:	60 ec       	ldi	r22, 0xC0	; 192
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16cc:	60 e4       	ldi	r22, 0x40	; 64
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16da:	68 eb       	ldi	r22, 0xB8	; 184
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16e8:	6f e3       	ldi	r22, 0x3F	; 63
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    16f6:	60 ec       	ldi	r22, 0xC0	; 192
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1704:	60 e4       	ldi	r22, 0x40	; 64
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1712:	68 eb       	ldi	r22, 0xB8	; 184
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <gfx_fill>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <gfx_dm>
    1726:	08 95       	ret

00001728 <gfx_set_proportional>:
    1728:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <gfx_proportional>
    172c:	08 95       	ret

0000172e <gfx_get_proportional>:
    172e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <gfx_proportional>
    1732:	08 95       	ret

00001734 <gfx_hline>:
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    173c:	97 70       	andi	r25, 0x07	; 7
    173e:	c1 e0       	ldi	r28, 0x01	; 1
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <gfx_hline+0x10>
    1742:	cc 0f       	add	r28, r28
    1744:	9a 95       	dec	r25
    1746:	ea f7       	brpl	.-6      	; 0x1742 <gfx_hline+0xe>
    1748:	d8 2f       	mov	r29, r24
    174a:	dd 23       	and	r29, r29
    174c:	31 f0       	breq	.+12     	; 0x175a <gfx_hline+0x26>
    174e:	6c 2f       	mov	r22, r28
    1750:	8c 2f       	mov	r24, r28
    1752:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_display_write2>
    1756:	d1 50       	subi	r29, 0x01	; 1
    1758:	f8 cf       	rjmp	.-16     	; 0x174a <gfx_hline+0x16>
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	08 95       	ret

00001760 <gfx_box>:
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	b8 2e       	mov	r11, r24
    1776:	c6 2f       	mov	r28, r22
    1778:	e0 90 07 04 	lds	r14, 0x0407	; 0x800407 <gfx_x>
    177c:	10 91 10 04 	lds	r17, 0x0410	; 0x800410 <gfx_y>
    1780:	81 2f       	mov	r24, r17
    1782:	87 70       	andi	r24, 0x07	; 7
    1784:	df ef       	ldi	r29, 0xFF	; 255
    1786:	01 c0       	rjmp	.+2      	; 0x178a <gfx_box+0x2a>
    1788:	dd 0f       	add	r29, r29
    178a:	8a 95       	dec	r24
    178c:	ea f7       	brpl	.-6      	; 0x1788 <gfx_box+0x28>
    178e:	88 e0       	ldi	r24, 0x08	; 8
    1790:	a8 2e       	mov	r10, r24
    1792:	cc 24       	eor	r12, r12
    1794:	ca 94       	dec	r12
    1796:	d1 2c       	mov	r13, r1
    1798:	cc 23       	and	r28, r28
    179a:	21 f1       	breq	.+72     	; 0x17e4 <gfx_box+0x84>
    179c:	81 2f       	mov	r24, r17
    179e:	87 70       	andi	r24, 0x07	; 7
    17a0:	0a 2d       	mov	r16, r10
    17a2:	08 1b       	sub	r16, r24
    17a4:	c0 17       	cp	r28, r16
    17a6:	48 f4       	brcc	.+18     	; 0x17ba <gfx_box+0x5a>
    17a8:	80 2f       	mov	r24, r16
    17aa:	8c 1b       	sub	r24, r28
    17ac:	96 01       	movw	r18, r12
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <gfx_box+0x54>
    17b0:	35 95       	asr	r19
    17b2:	27 95       	ror	r18
    17b4:	8a 95       	dec	r24
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <gfx_box+0x50>
    17b8:	d2 23       	and	r29, r18
    17ba:	fb 2c       	mov	r15, r11
    17bc:	ff 20       	and	r15, r15
    17be:	31 f0       	breq	.+12     	; 0x17cc <gfx_box+0x6c>
    17c0:	6d 2f       	mov	r22, r29
    17c2:	8d 2f       	mov	r24, r29
    17c4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_display_write2>
    17c8:	fa 94       	dec	r15
    17ca:	f8 cf       	rjmp	.-16     	; 0x17bc <gfx_box+0x5c>
    17cc:	8c 2f       	mov	r24, r28
    17ce:	0c 17       	cp	r16, r28
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <gfx_box+0x74>
    17d2:	80 2f       	mov	r24, r16
    17d4:	c8 1b       	sub	r28, r24
    17d6:	18 0f       	add	r17, r24
    17d8:	61 2f       	mov	r22, r17
    17da:	8e 2d       	mov	r24, r14
    17dc:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    17e0:	df ef       	ldi	r29, 0xFF	; 255
    17e2:	da cf       	rjmp	.-76     	; 0x1798 <gfx_box+0x38>
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <gfx_vline>:
    17fa:	68 2f       	mov	r22, r24
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <gfx_box>

00001802 <gfx_draw_xbm>:
    1802:	2f 92       	push	r2
    1804:	3f 92       	push	r3
    1806:	4f 92       	push	r4
    1808:	5f 92       	push	r5
    180a:	6f 92       	push	r6
    180c:	7f 92       	push	r7
    180e:	8f 92       	push	r8
    1810:	9f 92       	push	r9
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	48 2e       	mov	r4, r24
    1828:	d6 2f       	mov	r29, r22
    182a:	5a 01       	movw	r10, r20
    182c:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    1830:	80 90 10 04 	lds	r8, 0x0410	; 0x800410 <gfx_y>
    1834:	88 2d       	mov	r24, r8
    1836:	87 70       	andi	r24, 0x07	; 7
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	99 2e       	mov	r9, r25
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <gfx_draw_xbm+0x3e>
    183e:	99 0c       	add	r9, r9
    1840:	8a 95       	dec	r24
    1842:	ea f7       	brpl	.-6      	; 0x183e <gfx_draw_xbm+0x3c>
    1844:	24 2d       	mov	r18, r4
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	c9 01       	movw	r24, r18
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	97 fd       	sbrc	r25, 7
    184e:	07 96       	adiw	r24, 0x07	; 7
    1850:	23 e0       	ldi	r18, 0x03	; 3
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	2a 95       	dec	r18
    1858:	e1 f7       	brne	.-8      	; 0x1852 <gfx_draw_xbm+0x50>
    185a:	c1 e0       	ldi	r28, 0x01	; 1
    185c:	c8 0f       	add	r28, r24
    185e:	ec 2e       	mov	r14, r28
    1860:	f1 2c       	mov	r15, r1
    1862:	67 01       	movw	r12, r14
    1864:	33 e0       	ldi	r19, 0x03	; 3
    1866:	cc 0c       	add	r12, r12
    1868:	dd 1c       	adc	r13, r13
    186a:	3a 95       	dec	r19
    186c:	e1 f7       	brne	.-8      	; 0x1866 <gfx_draw_xbm+0x64>
    186e:	51 2c       	mov	r5, r1
    1870:	48 e0       	ldi	r20, 0x08	; 8
    1872:	24 2e       	mov	r2, r20
    1874:	dd 23       	and	r29, r29
    1876:	09 f4       	brne	.+2      	; 0x187a <gfx_draw_xbm+0x78>
    1878:	56 c0       	rjmp	.+172    	; 0x1926 <gfx_draw_xbm+0x124>
    187a:	88 2d       	mov	r24, r8
    187c:	87 70       	andi	r24, 0x07	; 7
    187e:	72 2c       	mov	r7, r2
    1880:	78 1a       	sub	r7, r24
    1882:	d7 15       	cp	r29, r7
    1884:	50 f4       	brcc	.+20     	; 0x189a <gfx_draw_xbm+0x98>
    1886:	87 2d       	mov	r24, r7
    1888:	8d 1b       	sub	r24, r29
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <gfx_draw_xbm+0x92>
    1890:	35 95       	asr	r19
    1892:	27 95       	ror	r18
    1894:	8a 95       	dec	r24
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <gfx_draw_xbm+0x8e>
    1898:	92 22       	and	r9, r18
    189a:	05 2d       	mov	r16, r5
    189c:	07 0d       	add	r16, r7
    189e:	c0 9f       	mul	r28, r16
    18a0:	80 01       	movw	r16, r0
    18a2:	11 24       	eor	r1, r1
    18a4:	61 2c       	mov	r6, r1
    18a6:	64 14       	cp	r6, r4
    18a8:	81 f1       	breq	.+96     	; 0x190a <gfx_draw_xbm+0x108>
    18aa:	86 2d       	mov	r24, r6
    18ac:	87 70       	andi	r24, 0x07	; 7
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <gfx_draw_xbm+0xc4>
    18b0:	e8 2f       	mov	r30, r24
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	e8 5f       	subi	r30, 0xF8	; 248
    18b6:	fb 4f       	sbci	r31, 0xFB	; 251
    18b8:	80 81       	ld	r24, Z
    18ba:	69 2d       	mov	r22, r9
    18bc:	89 21       	and	r24, r9
    18be:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_display_write2>
    18c2:	63 94       	inc	r6
    18c4:	f0 cf       	rjmp	.-32     	; 0x18a6 <gfx_draw_xbm+0xa4>
    18c6:	96 2d       	mov	r25, r6
    18c8:	96 95       	lsr	r25
    18ca:	96 95       	lsr	r25
    18cc:	96 95       	lsr	r25
    18ce:	f8 01       	movw	r30, r16
    18d0:	e9 0f       	add	r30, r25
    18d2:	f1 1d       	adc	r31, r1
    18d4:	ec 19       	sub	r30, r12
    18d6:	fd 09       	sbc	r31, r13
    18d8:	ea 0d       	add	r30, r10
    18da:	fb 1d       	adc	r31, r11
    18dc:	28 e0       	ldi	r18, 0x08	; 8
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 81       	ld	r20, Z
    18e2:	a8 e0       	ldi	r26, 0x08	; 8
    18e4:	b4 e0       	ldi	r27, 0x04	; 4
    18e6:	9c 91       	ld	r25, X
    18e8:	96 95       	lsr	r25
    18ea:	40 fd       	sbrc	r20, 0
    18ec:	90 68       	ori	r25, 0x80	; 128
    18ee:	9c 93       	st	X, r25
    18f0:	46 95       	lsr	r20
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	60 e1       	ldi	r22, 0x10	; 16
    18f6:	74 e0       	ldi	r23, 0x04	; 4
    18f8:	6a 17       	cp	r22, r26
    18fa:	7b 07       	cpc	r23, r27
    18fc:	a1 f7       	brne	.-24     	; 0x18e6 <gfx_draw_xbm+0xe4>
    18fe:	ee 0d       	add	r30, r14
    1900:	ff 1d       	adc	r31, r15
    1902:	21 50       	subi	r18, 0x01	; 1
    1904:	31 09       	sbc	r19, r1
    1906:	61 f7       	brne	.-40     	; 0x18e0 <gfx_draw_xbm+0xde>
    1908:	d3 cf       	rjmp	.-90     	; 0x18b0 <gfx_draw_xbm+0xae>
    190a:	8d 2f       	mov	r24, r29
    190c:	7d 16       	cp	r7, r29
    190e:	08 f4       	brcc	.+2      	; 0x1912 <gfx_draw_xbm+0x110>
    1910:	87 2d       	mov	r24, r7
    1912:	d8 1b       	sub	r29, r24
    1914:	88 0e       	add	r8, r24
    1916:	58 0e       	add	r5, r24
    1918:	68 2d       	mov	r22, r8
    191a:	83 2d       	mov	r24, r3
    191c:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1920:	99 24       	eor	r9, r9
    1922:	9a 94       	dec	r9
    1924:	a7 cf       	rjmp	.-178    	; 0x1874 <gfx_draw_xbm+0x72>
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	3f 90       	pop	r3
    1948:	2f 90       	pop	r2
    194a:	08 95       	ret

0000194c <gfx_draw_xbm_P>:
    194c:	2f 92       	push	r2
    194e:	3f 92       	push	r3
    1950:	4f 92       	push	r4
    1952:	5f 92       	push	r5
    1954:	6f 92       	push	r6
    1956:	7f 92       	push	r7
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	48 2e       	mov	r4, r24
    1972:	d6 2f       	mov	r29, r22
    1974:	4a 01       	movw	r8, r20
    1976:	30 90 07 04 	lds	r3, 0x0407	; 0x800407 <gfx_x>
    197a:	00 91 10 04 	lds	r16, 0x0410	; 0x800410 <gfx_y>
    197e:	80 2f       	mov	r24, r16
    1980:	87 70       	andi	r24, 0x07	; 7
    1982:	1f ef       	ldi	r17, 0xFF	; 255
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <gfx_draw_xbm_P+0x3c>
    1986:	11 0f       	add	r17, r17
    1988:	8a 95       	dec	r24
    198a:	ea f7       	brpl	.-6      	; 0x1986 <gfx_draw_xbm_P+0x3a>
    198c:	24 2d       	mov	r18, r4
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	c9 01       	movw	r24, r18
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	97 fd       	sbrc	r25, 7
    1996:	07 96       	adiw	r24, 0x07	; 7
    1998:	23 e0       	ldi	r18, 0x03	; 3
    199a:	95 95       	asr	r25
    199c:	87 95       	ror	r24
    199e:	2a 95       	dec	r18
    19a0:	e1 f7       	brne	.-8      	; 0x199a <gfx_draw_xbm_P+0x4e>
    19a2:	c1 e0       	ldi	r28, 0x01	; 1
    19a4:	c8 0f       	add	r28, r24
    19a6:	cc 2e       	mov	r12, r28
    19a8:	d1 2c       	mov	r13, r1
    19aa:	56 01       	movw	r10, r12
    19ac:	33 e0       	ldi	r19, 0x03	; 3
    19ae:	aa 0c       	add	r10, r10
    19b0:	bb 1c       	adc	r11, r11
    19b2:	3a 95       	dec	r19
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <gfx_draw_xbm_P+0x62>
    19b6:	51 2c       	mov	r5, r1
    19b8:	48 e0       	ldi	r20, 0x08	; 8
    19ba:	24 2e       	mov	r2, r20
    19bc:	dd 23       	and	r29, r29
    19be:	09 f4       	brne	.+2      	; 0x19c2 <gfx_draw_xbm_P+0x76>
    19c0:	55 c0       	rjmp	.+170    	; 0x1a6c <gfx_draw_xbm_P+0x120>
    19c2:	80 2f       	mov	r24, r16
    19c4:	87 70       	andi	r24, 0x07	; 7
    19c6:	72 2c       	mov	r7, r2
    19c8:	78 1a       	sub	r7, r24
    19ca:	d7 15       	cp	r29, r7
    19cc:	50 f4       	brcc	.+20     	; 0x19e2 <gfx_draw_xbm_P+0x96>
    19ce:	87 2d       	mov	r24, r7
    19d0:	8d 1b       	sub	r24, r29
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <gfx_draw_xbm_P+0x90>
    19d8:	35 95       	asr	r19
    19da:	27 95       	ror	r18
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <gfx_draw_xbm_P+0x8c>
    19e0:	12 23       	and	r17, r18
    19e2:	e5 2c       	mov	r14, r5
    19e4:	e7 0c       	add	r14, r7
    19e6:	ce 9d       	mul	r28, r14
    19e8:	70 01       	movw	r14, r0
    19ea:	11 24       	eor	r1, r1
    19ec:	61 2c       	mov	r6, r1
    19ee:	64 14       	cp	r6, r4
    19f0:	81 f1       	breq	.+96     	; 0x1a52 <gfx_draw_xbm_P+0x106>
    19f2:	86 2d       	mov	r24, r6
    19f4:	87 70       	andi	r24, 0x07	; 7
    19f6:	59 f0       	breq	.+22     	; 0x1a0e <gfx_draw_xbm_P+0xc2>
    19f8:	e8 2f       	mov	r30, r24
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	e8 5f       	subi	r30, 0xF8	; 248
    19fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1a00:	80 81       	ld	r24, Z
    1a02:	61 2f       	mov	r22, r17
    1a04:	81 23       	and	r24, r17
    1a06:	0e 94 0a 0a 	call	0x1414	; 0x1414 <gfx_display_write2>
    1a0a:	63 94       	inc	r6
    1a0c:	f0 cf       	rjmp	.-32     	; 0x19ee <gfx_draw_xbm_P+0xa2>
    1a0e:	96 2d       	mov	r25, r6
    1a10:	96 95       	lsr	r25
    1a12:	96 95       	lsr	r25
    1a14:	96 95       	lsr	r25
    1a16:	f7 01       	movw	r30, r14
    1a18:	e9 0f       	add	r30, r25
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	ea 19       	sub	r30, r10
    1a1e:	fb 09       	sbc	r31, r11
    1a20:	e8 0d       	add	r30, r8
    1a22:	f9 1d       	adc	r31, r9
    1a24:	28 e0       	ldi	r18, 0x08	; 8
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	44 91       	lpm	r20, Z
    1a2a:	a8 e0       	ldi	r26, 0x08	; 8
    1a2c:	b4 e0       	ldi	r27, 0x04	; 4
    1a2e:	9c 91       	ld	r25, X
    1a30:	96 95       	lsr	r25
    1a32:	40 fd       	sbrc	r20, 0
    1a34:	90 68       	ori	r25, 0x80	; 128
    1a36:	9c 93       	st	X, r25
    1a38:	46 95       	lsr	r20
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	60 e1       	ldi	r22, 0x10	; 16
    1a3e:	74 e0       	ldi	r23, 0x04	; 4
    1a40:	6a 17       	cp	r22, r26
    1a42:	7b 07       	cpc	r23, r27
    1a44:	a1 f7       	brne	.-24     	; 0x1a2e <gfx_draw_xbm_P+0xe2>
    1a46:	ec 0d       	add	r30, r12
    1a48:	fd 1d       	adc	r31, r13
    1a4a:	21 50       	subi	r18, 0x01	; 1
    1a4c:	31 09       	sbc	r19, r1
    1a4e:	61 f7       	brne	.-40     	; 0x1a28 <gfx_draw_xbm_P+0xdc>
    1a50:	d3 cf       	rjmp	.-90     	; 0x19f8 <gfx_draw_xbm_P+0xac>
    1a52:	8d 2f       	mov	r24, r29
    1a54:	7d 16       	cp	r7, r29
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <gfx_draw_xbm_P+0x10e>
    1a58:	87 2d       	mov	r24, r7
    1a5a:	d8 1b       	sub	r29, r24
    1a5c:	08 0f       	add	r16, r24
    1a5e:	58 0e       	add	r5, r24
    1a60:	60 2f       	mov	r22, r16
    1a62:	83 2d       	mov	r24, r3
    1a64:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1a68:	1f ef       	ldi	r17, 0xFF	; 255
    1a6a:	a8 cf       	rjmp	.-176    	; 0x19bc <gfx_draw_xbm_P+0x70>
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	df 90       	pop	r13
    1a7a:	cf 90       	pop	r12
    1a7c:	bf 90       	pop	r11
    1a7e:	af 90       	pop	r10
    1a80:	9f 90       	pop	r9
    1a82:	8f 90       	pop	r8
    1a84:	7f 90       	pop	r7
    1a86:	6f 90       	pop	r6
    1a88:	5f 90       	pop	r5
    1a8a:	4f 90       	pop	r4
    1a8c:	3f 90       	pop	r3
    1a8e:	2f 90       	pop	r2
    1a90:	08 95       	ret

00001a92 <gfx_pixel>:
    1a92:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <gfx_y>
    1a96:	97 70       	andi	r25, 0x07	; 7
    1a98:	21 e0       	ldi	r18, 0x01	; 1
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <gfx_pixel+0xe>
    1a9e:	22 0f       	add	r18, r18
    1aa0:	9a 95       	dec	r25
    1aa2:	ea f7       	brpl	.-6      	; 0x1a9e <gfx_pixel+0xc>
    1aa4:	88 23       	and	r24, r24
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <gfx_pixel+0x1a>
    1aa8:	62 2f       	mov	r22, r18
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <gfx_pixel+0x1c>
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	82 2f       	mov	r24, r18
    1ab0:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <gfx_display_write2>

00001ab4 <gfx_lineTo>:
    1ab4:	bf 92       	push	r11
    1ab6:	cf 92       	push	r12
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	18 2f       	mov	r17, r24
    1ac8:	06 2f       	mov	r16, r22
    1aca:	d0 91 07 04 	lds	r29, 0x0407	; 0x800407 <gfx_x>
    1ace:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <gfx_y>
    1ad2:	d1 13       	cpse	r29, r17
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <gfx_lineTo+0x40>
    1ad6:	86 17       	cp	r24, r22
    1ad8:	20 f4       	brcc	.+8      	; 0x1ae2 <gfx_lineTo+0x2e>
    1ada:	96 2f       	mov	r25, r22
    1adc:	98 1b       	sub	r25, r24
    1ade:	89 2f       	mov	r24, r25
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <gfx_lineTo+0x3a>
    1ae2:	c8 2f       	mov	r28, r24
    1ae4:	c6 1b       	sub	r28, r22
    1ae6:	81 2f       	mov	r24, r17
    1ae8:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1aec:	8c 2f       	mov	r24, r28
    1aee:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <gfx_vline>
    1af2:	5a c0       	rjmp	.+180    	; 0x1ba8 <gfx_lineTo+0xf4>
    1af4:	f8 2e       	mov	r15, r24
    1af6:	68 13       	cpse	r22, r24
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <gfx_lineTo+0x60>
    1afa:	d1 17       	cp	r29, r17
    1afc:	18 f4       	brcc	.+6      	; 0x1b04 <gfx_lineTo+0x50>
    1afe:	81 2f       	mov	r24, r17
    1b00:	8d 1b       	sub	r24, r29
    1b02:	05 c0       	rjmp	.+10     	; 0x1b0e <gfx_lineTo+0x5a>
    1b04:	d1 1b       	sub	r29, r17
    1b06:	81 2f       	mov	r24, r17
    1b08:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1b0c:	8d 2f       	mov	r24, r29
    1b0e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <gfx_hline>
    1b12:	4a c0       	rjmp	.+148    	; 0x1ba8 <gfx_lineTo+0xf4>
    1b14:	1d 17       	cp	r17, r29
    1b16:	28 f4       	brcc	.+10     	; 0x1b22 <gfx_lineTo+0x6e>
    1b18:	dd 2e       	mov	r13, r29
    1b1a:	d1 1a       	sub	r13, r17
    1b1c:	cc 24       	eor	r12, r12
    1b1e:	ca 94       	dec	r12
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <gfx_lineTo+0x80>
    1b22:	d1 17       	cp	r29, r17
    1b24:	28 f4       	brcc	.+10     	; 0x1b30 <gfx_lineTo+0x7c>
    1b26:	d1 2e       	mov	r13, r17
    1b28:	dd 1a       	sub	r13, r29
    1b2a:	cc 24       	eor	r12, r12
    1b2c:	c3 94       	inc	r12
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <gfx_lineTo+0x80>
    1b30:	c1 2c       	mov	r12, r1
    1b32:	d1 2c       	mov	r13, r1
    1b34:	08 17       	cp	r16, r24
    1b36:	28 f4       	brcc	.+10     	; 0x1b42 <gfx_lineTo+0x8e>
    1b38:	c8 2f       	mov	r28, r24
    1b3a:	c0 1b       	sub	r28, r16
    1b3c:	bb 24       	eor	r11, r11
    1b3e:	ba 94       	dec	r11
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <gfx_lineTo+0xa0>
    1b42:	80 17       	cp	r24, r16
    1b44:	28 f4       	brcc	.+10     	; 0x1b50 <gfx_lineTo+0x9c>
    1b46:	c0 2f       	mov	r28, r16
    1b48:	c8 1b       	sub	r28, r24
    1b4a:	bb 24       	eor	r11, r11
    1b4c:	b3 94       	inc	r11
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <gfx_lineTo+0xa0>
    1b50:	b1 2c       	mov	r11, r1
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <gfx_pixel>
    1b5a:	cd 15       	cp	r28, r13
    1b5c:	98 f4       	brcc	.+38     	; 0x1b84 <gfx_lineTo+0xd0>
    1b5e:	ed 2c       	mov	r14, r13
    1b60:	e6 94       	lsr	r14
    1b62:	e1 94       	neg	r14
    1b64:	ec 0e       	add	r14, r28
    1b66:	dc 0d       	add	r29, r12
    1b68:	1e 14       	cp	r1, r14
    1b6a:	14 f4       	brge	.+4      	; 0x1b70 <gfx_lineTo+0xbc>
    1b6c:	ed 18       	sub	r14, r13
    1b6e:	fb 0c       	add	r15, r11
    1b70:	6f 2d       	mov	r22, r15
    1b72:	8d 2f       	mov	r24, r29
    1b74:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <gfx_pixel>
    1b7e:	1d 13       	cpse	r17, r29
    1b80:	f1 cf       	rjmp	.-30     	; 0x1b64 <gfx_lineTo+0xb0>
    1b82:	12 c0       	rjmp	.+36     	; 0x1ba8 <gfx_lineTo+0xf4>
    1b84:	ec 2e       	mov	r14, r28
    1b86:	e6 94       	lsr	r14
    1b88:	e1 94       	neg	r14
    1b8a:	ed 0c       	add	r14, r13
    1b8c:	fb 0c       	add	r15, r11
    1b8e:	1e 14       	cp	r1, r14
    1b90:	14 f4       	brge	.+4      	; 0x1b96 <gfx_lineTo+0xe2>
    1b92:	ec 1a       	sub	r14, r28
    1b94:	dc 0d       	add	r29, r12
    1b96:	6f 2d       	mov	r22, r15
    1b98:	8d 2f       	mov	r24, r29
    1b9a:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <gfx_pixel>
    1ba4:	0f 11       	cpse	r16, r15
    1ba6:	f1 cf       	rjmp	.-30     	; 0x1b8a <gfx_lineTo+0xd6>
    1ba8:	60 2f       	mov	r22, r16
    1baa:	81 2f       	mov	r24, r17
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <gfx_move>

00001bc2 <gfx_term_clear>:
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <gfx_fill>
    1bc8:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <gfx_term_row>
    1bcc:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1bd0:	08 95       	ret

00001bd2 <gfx_term_goto>:
    1bd2:	86 31       	cpi	r24, 0x16	; 22
    1bd4:	30 f4       	brcc	.+12     	; 0x1be2 <gfx_term_goto+0x10>
    1bd6:	68 30       	cpi	r22, 0x08	; 8
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <gfx_term_goto+0x10>
    1bda:	60 93 05 04 	sts	0x0405, r22	; 0x800405 <gfx_term_row>
    1bde:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1be2:	08 95       	ret

00001be4 <gfx_term_scroll>:
    1be4:	cf 92       	push	r12
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	c9 eb       	ldi	r28, 0xB9	; 185
    1bf6:	20 e1       	ldi	r18, 0x10	; 16
    1bf8:	c2 2e       	mov	r12, r18
    1bfa:	24 e0       	ldi	r18, 0x04	; 4
    1bfc:	d2 2e       	mov	r13, r18
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	d0 e0       	ldi	r29, 0x00	; 0
    1c02:	07 e4       	ldi	r16, 0x47	; 71
    1c04:	0c 0f       	add	r16, r28
    1c06:	d8 30       	cpi	r29, 0x08	; 8
    1c08:	50 f5       	brcc	.+84     	; 0x1c5e <gfx_term_scroll+0x7a>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1c10:	6c 2f       	mov	r22, r28
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1c1e:	60 e4       	ldi	r22, 0x40	; 64
    1c20:	61 0f       	add	r22, r17
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1c2e:	98 e0       	ldi	r25, 0x08	; 8
    1c30:	e9 2e       	mov	r14, r25
    1c32:	94 e0       	ldi	r25, 0x04	; 4
    1c34:	f9 2e       	mov	r15, r25
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	81 93       	st	Z+, r24
    1c40:	7f 01       	movw	r14, r30
    1c42:	f0 e1       	ldi	r31, 0x10	; 16
    1c44:	ef 16       	cp	r14, r31
    1c46:	f4 e0       	ldi	r31, 0x04	; 4
    1c48:	ff 06       	cpc	r15, r31
    1c4a:	a9 f7       	brne	.-22     	; 0x1c36 <gfx_term_scroll+0x52>
    1c4c:	60 2f       	mov	r22, r16
    1c4e:	8d 2f       	mov	r24, r29
    1c50:	0e 94 4d 09 	call	0x129a	; 0x129a <gfx_store_disp_tile>
    1c54:	df 5f       	subi	r29, 0xFF	; 255
    1c56:	18 5f       	subi	r17, 0xF8	; 248
    1c58:	d0 31       	cpi	r29, 0x10	; 16
    1c5a:	a9 f6       	brne	.-86     	; 0x1c06 <gfx_term_scroll+0x22>
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <gfx_term_scroll+0xb8>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1c64:	6c 2f       	mov	r22, r28
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	0e 94 54 07 	call	0xea8	; 0xea8 <display_wait>
    1c72:	61 2f       	mov	r22, r17
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	0e 94 d3 06 	call	0xda6	; 0xda6 <display_write>
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1c80:	88 e0       	ldi	r24, 0x08	; 8
    1c82:	e8 2e       	mov	r14, r24
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	f8 2e       	mov	r15, r24
    1c88:	83 e0       	ldi	r24, 0x03	; 3
    1c8a:	0e 94 15 07 	call	0xe2a	; 0xe2a <display_read>
    1c8e:	f7 01       	movw	r30, r14
    1c90:	81 93       	st	Z+, r24
    1c92:	7f 01       	movw	r14, r30
    1c94:	ce 16       	cp	r12, r30
    1c96:	df 06       	cpc	r13, r31
    1c98:	b9 f7       	brne	.-18     	; 0x1c88 <gfx_term_scroll+0xa4>
    1c9a:	d8 cf       	rjmp	.-80     	; 0x1c4c <gfx_term_scroll+0x68>
    1c9c:	cf 5f       	subi	r28, 0xFF	; 255
    1c9e:	c0 3c       	cpi	r28, 0xC0	; 192
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <gfx_term_scroll+0xc0>
    1ca2:	ad cf       	rjmp	.-166    	; 0x1bfe <gfx_term_scroll+0x1a>
    1ca4:	e8 e0       	ldi	r30, 0x08	; 8
    1ca6:	f4 e0       	ldi	r31, 0x04	; 4
    1ca8:	80 e1       	ldi	r24, 0x10	; 16
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	11 92       	st	Z+, r1
    1cae:	8e 17       	cp	r24, r30
    1cb0:	9f 07       	cpc	r25, r31
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <gfx_term_scroll+0xc8>
    1cb4:	c0 e0       	ldi	r28, 0x00	; 0
    1cb6:	67 e0       	ldi	r22, 0x07	; 7
    1cb8:	8c 2f       	mov	r24, r28
    1cba:	0e 94 4d 09 	call	0x129a	; 0x129a <gfx_store_disp_tile>
    1cbe:	cf 5f       	subi	r28, 0xFF	; 255
    1cc0:	c0 31       	cpi	r28, 0x10	; 16
    1cc2:	c9 f7       	brne	.-14     	; 0x1cb6 <gfx_term_scroll+0xd2>
    1cc4:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <gfx_term_scroll+0xee>
    1ccc:	81 50       	subi	r24, 0x01	; 1
    1cce:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret

00001ce4 <gfx_term_print>:
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	cf 93       	push	r28
    1cea:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <gfx_proportional>
    1cee:	8c 01       	movw	r16, r24
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	c1 91       	ld	r28, Z+
    1cf4:	8f 01       	movw	r16, r30
    1cf6:	cc 23       	and	r28, r28
    1cf8:	b9 f1       	breq	.+110    	; 0x1d68 <gfx_term_print+0x84>
    1cfa:	ca 30       	cpi	r28, 0x0A	; 10
    1cfc:	69 f4       	brne	.+26     	; 0x1d18 <gfx_term_print+0x34>
    1cfe:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1d02:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1d0c:	88 30       	cpi	r24, 0x08	; 8
    1d0e:	81 f7       	brne	.-32     	; 0x1cf0 <gfx_term_print+0xc>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <gfx_term_scroll>
    1d16:	ec cf       	rjmp	.-40     	; 0x1cf0 <gfx_term_print+0xc>
    1d18:	cd 30       	cpi	r28, 0x0D	; 13
    1d1a:	51 f3       	breq	.-44     	; 0x1cf0 <gfx_term_print+0xc>
    1d1c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1d20:	85 31       	cpi	r24, 0x15	; 21
    1d22:	60 f0       	brcs	.+24     	; 0x1d3c <gfx_term_print+0x58>
    1d24:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <gfx_term_col>
    1d28:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <gfx_term_row>
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <gfx_term_row>
    1d32:	88 30       	cpi	r24, 0x08	; 8
    1d34:	19 f4       	brne	.+6      	; 0x1d3c <gfx_term_print+0x58>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <gfx_term_scroll>
    1d3c:	60 91 05 04 	lds	r22, 0x0405	; 0x800405 <gfx_term_row>
    1d40:	66 0f       	add	r22, r22
    1d42:	66 0f       	add	r22, r22
    1d44:	66 0f       	add	r22, r22
    1d46:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1d4a:	98 2f       	mov	r25, r24
    1d4c:	99 0f       	add	r25, r25
    1d4e:	89 0f       	add	r24, r25
    1d50:	88 0f       	add	r24, r24
    1d52:	0e 94 a0 09 	call	0x1340	; 0x1340 <gfx_move>
    1d56:	8c 2f       	mov	r24, r28
    1d58:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <gfx_print_char>
    1d5c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <gfx_term_col>
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <gfx_term_col>
    1d66:	c4 cf       	rjmp	.-120    	; 0x1cf0 <gfx_term_print+0xc>
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <wait_copro>:
    1d70:	78 94       	sei
    1d72:	20 e1       	ldi	r18, 0x10	; 16
    1d74:	37 e2       	ldi	r19, 0x27	; 39
    1d76:	97 e0       	ldi	r25, 0x07	; 7
    1d78:	89 9f       	mul	r24, r25
    1d7a:	f0 01       	movw	r30, r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	e8 5e       	subi	r30, 0xE8	; 232
    1d80:	fb 4f       	sbci	r31, 0xFB	; 251
    1d82:	21 50       	subi	r18, 0x01	; 1
    1d84:	31 09       	sbc	r19, r1
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <wait_copro+0x1e>
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8c:	d1 f7       	brne	.-12     	; 0x1d82 <wait_copro+0x12>
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	23 2b       	or	r18, r19
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <wait_copro+0x26>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret

00001d98 <spi_finished_callback>:
    1d98:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <copro_seq>
    1d9c:	9f 5f       	subi	r25, 0xFF	; 255
    1d9e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <copro_seq>
    1da2:	8b 31       	cpi	r24, 0x1B	; 27
    1da4:	41 f4       	brne	.+16     	; 0x1db6 <spi_finished_callback+0x1e>
    1da6:	e6 ee       	ldi	r30, 0xE6	; 230
    1da8:	f3 e0       	ldi	r31, 0x03	; 3
    1daa:	af e4       	ldi	r26, 0x4F	; 79
    1dac:	b4 e0       	ldi	r27, 0x04	; 4
    1dae:	01 90       	ld	r0, Z+
    1db0:	0d 92       	st	X+, r0
    1db2:	8a 95       	dec	r24
    1db4:	e1 f7       	brne	.-8      	; 0x1dae <spi_finished_callback+0x16>
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <spi_tx_buf+0xe>
    1dbc:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <spi_tx_buf+0x7>
    1dc0:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <spi_tx_buf>
    1dc4:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <copro_commands>
    1dc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1dca:	69 f0       	breq	.+26     	; 0x1de6 <spi_finished_callback+0x4e>
    1dcc:	97 e0       	ldi	r25, 0x07	; 7
    1dce:	e8 e1       	ldi	r30, 0x18	; 24
    1dd0:	f4 e0       	ldi	r31, 0x04	; 4
    1dd2:	a6 ec       	ldi	r26, 0xC6	; 198
    1dd4:	b3 e0       	ldi	r27, 0x03	; 3
    1dd6:	01 90       	ld	r0, Z+
    1dd8:	0d 92       	st	X+, r0
    1dda:	9a 95       	dec	r25
    1ddc:	e1 f7       	brne	.-8      	; 0x1dd6 <spi_finished_callback+0x3e>
    1dde:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1de2:	87 e0       	ldi	r24, 0x07	; 7
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <spi_finished_callback+0x50>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <copro_commands+0x7>
    1dec:	9f 3f       	cpi	r25, 0xFF	; 255
    1dee:	79 f0       	breq	.+30     	; 0x1e0e <spi_finished_callback+0x76>
    1df0:	a8 2f       	mov	r26, r24
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	aa 53       	subi	r26, 0x3A	; 58
    1df6:	bc 4f       	sbci	r27, 0xFC	; 252
    1df8:	97 e0       	ldi	r25, 0x07	; 7
    1dfa:	ef e1       	ldi	r30, 0x1F	; 31
    1dfc:	f4 e0       	ldi	r31, 0x04	; 4
    1dfe:	01 90       	ld	r0, Z+
    1e00:	0d 92       	st	X+, r0
    1e02:	9a 95       	dec	r25
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <spi_finished_callback+0x66>
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <copro_commands+0x7>
    1e0c:	89 5f       	subi	r24, 0xF9	; 249
    1e0e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <copro_commands+0xe>
    1e12:	9f 3f       	cpi	r25, 0xFF	; 255
    1e14:	79 f0       	breq	.+30     	; 0x1e34 <spi_finished_callback+0x9c>
    1e16:	a8 2f       	mov	r26, r24
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	aa 53       	subi	r26, 0x3A	; 58
    1e1c:	bc 4f       	sbci	r27, 0xFC	; 252
    1e1e:	87 e0       	ldi	r24, 0x07	; 7
    1e20:	e6 e2       	ldi	r30, 0x26	; 38
    1e22:	f4 e0       	ldi	r31, 0x04	; 4
    1e24:	01 90       	ld	r0, Z+
    1e26:	0d 92       	st	X+, r0
    1e28:	8a 95       	dec	r24
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <spi_finished_callback+0x8c>
    1e2c:	8f ef       	ldi	r24, 0xFF	; 255
    1e2e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <copro_commands+0xe>
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <spi_finished_callback+0xa4>
    1e34:	81 11       	cpse	r24, r1
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <spi_finished_callback+0xa4>
    1e38:	87 e0       	ldi	r24, 0x07	; 7
    1e3a:	08 95       	ret
    1e3c:	85 e1       	ldi	r24, 0x15	; 21
    1e3e:	08 95       	ret

00001e40 <_copro_check_busy>:
    1e40:	27 e0       	ldi	r18, 0x07	; 7
    1e42:	82 9f       	mul	r24, r18
    1e44:	c0 01       	movw	r24, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e8 5e       	subi	r30, 0xE8	; 232
    1e4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 81       	ld	r25, Z
    1e52:	9f 3f       	cpi	r25, 0xFF	; 255
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <_copro_check_busy+0x18>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	08 95       	ret

00001e5a <copro_update>:
    1e5a:	f8 94       	cli
    1e5c:	a1 e3       	ldi	r26, 0x31	; 49
    1e5e:	b4 e0       	ldi	r27, 0x04	; 4
    1e60:	ef e4       	ldi	r30, 0x4F	; 79
    1e62:	f4 e0       	ldi	r31, 0x04	; 4
    1e64:	81 81       	ldd	r24, Z+1	; 0x01
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	98 2f       	mov	r25, r24
    1e6a:	88 27       	eor	r24, r24
    1e6c:	20 81       	ld	r18, Z
    1e6e:	82 0f       	add	r24, r18
    1e70:	91 1d       	adc	r25, r1
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
    1e78:	83 81       	ldd	r24, Z+3	; 0x03
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	88 27       	eor	r24, r24
    1e80:	22 81       	ldd	r18, Z+2	; 0x02
    1e82:	82 0f       	add	r24, r18
    1e84:	91 1d       	adc	r25, r1
    1e86:	13 96       	adiw	r26, 0x03	; 3
    1e88:	9c 93       	st	X, r25
    1e8a:	8e 93       	st	-X, r24
    1e8c:	12 97       	sbiw	r26, 0x02	; 2
    1e8e:	85 81       	ldd	r24, Z+5	; 0x05
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	98 2f       	mov	r25, r24
    1e94:	88 27       	eor	r24, r24
    1e96:	24 81       	ldd	r18, Z+4	; 0x04
    1e98:	82 0f       	add	r24, r18
    1e9a:	91 1d       	adc	r25, r1
    1e9c:	15 96       	adiw	r26, 0x05	; 5
    1e9e:	9c 93       	st	X, r25
    1ea0:	8e 93       	st	-X, r24
    1ea2:	14 97       	sbiw	r26, 0x04	; 4
    1ea4:	87 81       	ldd	r24, Z+7	; 0x07
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	88 27       	eor	r24, r24
    1eac:	26 81       	ldd	r18, Z+6	; 0x06
    1eae:	82 0f       	add	r24, r18
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	17 96       	adiw	r26, 0x07	; 7
    1eb4:	9c 93       	st	X, r25
    1eb6:	8e 93       	st	-X, r24
    1eb8:	16 97       	sbiw	r26, 0x06	; 6
    1eba:	81 85       	ldd	r24, Z+9	; 0x09
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	88 27       	eor	r24, r24
    1ec2:	20 85       	ldd	r18, Z+8	; 0x08
    1ec4:	82 0f       	add	r24, r18
    1ec6:	91 1d       	adc	r25, r1
    1ec8:	19 96       	adiw	r26, 0x09	; 9
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
    1ece:	18 97       	sbiw	r26, 0x08	; 8
    1ed0:	78 94       	sei
    1ed2:	f8 94       	cli
    1ed4:	22 85       	ldd	r18, Z+10	; 0x0a
    1ed6:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1eda:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    1ede:	ac 01       	movw	r20, r24
    1ee0:	42 0f       	add	r20, r18
    1ee2:	51 1d       	adc	r21, r1
    1ee4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ee6:	89 2f       	mov	r24, r25
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	98 2f       	mov	r25, r24
    1eec:	88 27       	eor	r24, r24
    1eee:	84 0f       	add	r24, r20
    1ef0:	95 1f       	adc	r25, r21
    1ef2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    1ef6:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    1efa:	24 85       	ldd	r18, Z+12	; 0x0c
    1efc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <copro_ticks_offset_r>
    1f00:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    1f04:	ac 01       	movw	r20, r24
    1f06:	42 0f       	add	r20, r18
    1f08:	51 1d       	adc	r21, r1
    1f0a:	95 85       	ldd	r25, Z+13	; 0x0d
    1f0c:	89 2f       	mov	r24, r25
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	98 2f       	mov	r25, r24
    1f12:	88 27       	eor	r24, r24
    1f14:	84 0f       	add	r24, r20
    1f16:	95 1f       	adc	r25, r21
    1f18:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <copro_ticks_r+0x1>
    1f1c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <copro_ticks_r>
    1f20:	87 85       	ldd	r24, Z+15	; 0x0f
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	98 2f       	mov	r25, r24
    1f26:	88 27       	eor	r24, r24
    1f28:	26 85       	ldd	r18, Z+14	; 0x0e
    1f2a:	82 0f       	add	r24, r18
    1f2c:	91 1d       	adc	r25, r1
    1f2e:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <copro_speed_l+0x1>
    1f32:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <copro_speed_l>
    1f36:	81 89       	ldd	r24, Z+17	; 0x11
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	88 27       	eor	r24, r24
    1f3e:	20 89       	ldd	r18, Z+16	; 0x10
    1f40:	82 0f       	add	r24, r18
    1f42:	91 1d       	adc	r25, r1
    1f44:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <copro_speed_r+0x1>
    1f48:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <copro_speed_r>
    1f4c:	83 89       	ldd	r24, Z+19	; 0x13
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	98 2f       	mov	r25, r24
    1f52:	88 27       	eor	r24, r24
    1f54:	22 89       	ldd	r18, Z+18	; 0x12
    1f56:	82 0f       	add	r24, r18
    1f58:	91 1d       	adc	r25, r1
    1f5a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <copro_current_l+0x1>
    1f5e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <copro_current_l>
    1f62:	85 89       	ldd	r24, Z+21	; 0x15
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	98 2f       	mov	r25, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	24 89       	ldd	r18, Z+20	; 0x14
    1f6c:	82 0f       	add	r24, r18
    1f6e:	91 1d       	adc	r25, r1
    1f70:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <copro_current_r+0x1>
    1f74:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <copro_current_r>
    1f78:	78 94       	sei
    1f7a:	f8 94       	cli
    1f7c:	80 8d       	ldd	r24, Z+24	; 0x18
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	98 2f       	mov	r25, r24
    1f82:	88 27       	eor	r24, r24
    1f84:	27 89       	ldd	r18, Z+23	; 0x17
    1f86:	82 0f       	add	r24, r18
    1f88:	91 1d       	adc	r25, r1
    1f8a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <copro_rc5_cmd+0x1>
    1f8e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <copro_rc5_cmd>
    1f92:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	98 2f       	mov	r25, r24
    1f98:	88 27       	eor	r24, r24
    1f9a:	21 8d       	ldd	r18, Z+25	; 0x19
    1f9c:	82 0f       	add	r24, r18
    1f9e:	91 1d       	adc	r25, r1
    1fa0:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <copro_target_distance+0x1>
    1fa4:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <copro_target_distance>
    1fa8:	78 94       	sei
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	08 95       	ret

00001fae <copro_stop>:
    1fae:	f8 94       	cli
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1fb6:	78 94       	sei
    1fb8:	08 95       	ret

00001fba <copro_stopImmediate>:
    1fba:	f8 94       	cli
    1fbc:	8a e0       	ldi	r24, 0x0A	; 10
    1fbe:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <copro_commands>
    1fc2:	78 94       	sei
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	08 95       	ret

00001fc8 <copro_setPWM>:
    1fc8:	f8 94       	cli
    1fca:	e8 e1       	ldi	r30, 0x18	; 24
    1fcc:	f4 e0       	ldi	r31, 0x04	; 4
    1fce:	25 e0       	ldi	r18, 0x05	; 5
    1fd0:	20 83       	st	Z, r18
    1fd2:	81 83       	std	Z+1, r24	; 0x01
    1fd4:	92 83       	std	Z+2, r25	; 0x02
    1fd6:	63 83       	std	Z+3, r22	; 0x03
    1fd8:	74 83       	std	Z+4, r23	; 0x04
    1fda:	78 94       	sei
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	08 95       	ret

00001fe0 <copro_setSpeed>:
    1fe0:	f8 94       	cli
    1fe2:	e8 e1       	ldi	r30, 0x18	; 24
    1fe4:	f4 e0       	ldi	r31, 0x04	; 4
    1fe6:	22 e0       	ldi	r18, 0x02	; 2
    1fe8:	20 83       	st	Z, r18
    1fea:	81 83       	std	Z+1, r24	; 0x01
    1fec:	92 83       	std	Z+2, r25	; 0x02
    1fee:	63 83       	std	Z+3, r22	; 0x03
    1ff0:	74 83       	std	Z+4, r23	; 0x04
    1ff2:	78 94       	sei
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	08 95       	ret

00001ff8 <copro_setTargetAbs>:
    1ff8:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <copro_ticks_offset_l>
    1ffc:	30 91 15 04 	lds	r19, 0x0415	; 0x800415 <copro_ticks_offset_l+0x1>
    2000:	82 1b       	sub	r24, r18
    2002:	93 0b       	sbc	r25, r19
    2004:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <copro_ticks_offset_r>
    2008:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <copro_ticks_offset_r+0x1>
    200c:	62 1b       	sub	r22, r18
    200e:	73 0b       	sbc	r23, r19
    2010:	f8 94       	cli
    2012:	e8 e1       	ldi	r30, 0x18	; 24
    2014:	f4 e0       	ldi	r31, 0x04	; 4
    2016:	23 e0       	ldi	r18, 0x03	; 3
    2018:	20 83       	st	Z, r18
    201a:	81 83       	std	Z+1, r24	; 0x01
    201c:	92 83       	std	Z+2, r25	; 0x02
    201e:	63 83       	std	Z+3, r22	; 0x03
    2020:	74 83       	std	Z+4, r23	; 0x04
    2022:	45 83       	std	Z+5, r20	; 0x05
    2024:	56 83       	std	Z+6, r21	; 0x06
    2026:	78 94       	sei
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	08 95       	ret

0000202c <copro_setTargetRel>:
    202c:	f8 94       	cli
    202e:	e8 e1       	ldi	r30, 0x18	; 24
    2030:	f4 e0       	ldi	r31, 0x04	; 4
    2032:	24 e0       	ldi	r18, 0x04	; 4
    2034:	20 83       	st	Z, r18
    2036:	81 83       	std	Z+1, r24	; 0x01
    2038:	92 83       	std	Z+2, r25	; 0x02
    203a:	63 83       	std	Z+3, r22	; 0x03
    203c:	74 83       	std	Z+4, r23	; 0x04
    203e:	45 83       	std	Z+5, r20	; 0x05
    2040:	56 83       	std	Z+6, r21	; 0x06
    2042:	78 94       	sei
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	08 95       	ret

00002048 <copro_setSpeedParameters>:
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	18 2f       	mov	r17, r24
    2050:	d6 2f       	mov	r29, r22
    2052:	c4 2f       	mov	r28, r20
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <wait_copro>
    205a:	f8 94       	cli
    205c:	e8 e1       	ldi	r30, 0x18	; 24
    205e:	f4 e0       	ldi	r31, 0x04	; 4
    2060:	86 e0       	ldi	r24, 0x06	; 6
    2062:	86 87       	std	Z+14, r24	; 0x0e
    2064:	17 87       	std	Z+15, r17	; 0x0f
    2066:	d0 8b       	std	Z+16, r29	; 0x10
    2068:	c1 8b       	std	Z+17, r28	; 0x11
    206a:	78 94       	sei
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	08 95       	ret

00002076 <copro_setPositionParameters>:
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	08 95       	ret

0000207a <copro_resetOdometry>:
    207a:	f8 94       	cli
    207c:	ef e4       	ldi	r30, 0x4F	; 79
    207e:	f4 e0       	ldi	r31, 0x04	; 4
    2080:	25 85       	ldd	r18, Z+13	; 0x0d
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	32 2f       	mov	r19, r18
    2086:	22 27       	eor	r18, r18
    2088:	44 85       	ldd	r20, Z+12	; 0x0c
    208a:	24 0f       	add	r18, r20
    208c:	31 1d       	adc	r19, r1
    208e:	43 85       	ldd	r20, Z+11	; 0x0b
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	54 2f       	mov	r21, r20
    2094:	44 27       	eor	r20, r20
    2096:	e2 85       	ldd	r30, Z+10	; 0x0a
    2098:	4e 0f       	add	r20, r30
    209a:	51 1d       	adc	r21, r1
    209c:	fc 01       	movw	r30, r24
    209e:	e4 1b       	sub	r30, r20
    20a0:	f5 0b       	sbc	r31, r21
    20a2:	f0 93 15 04 	sts	0x0415, r31	; 0x800415 <copro_ticks_offset_l+0x1>
    20a6:	e0 93 14 04 	sts	0x0414, r30	; 0x800414 <copro_ticks_offset_l>
    20aa:	ab 01       	movw	r20, r22
    20ac:	42 1b       	sub	r20, r18
    20ae:	53 0b       	sbc	r21, r19
    20b0:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <copro_ticks_offset_r+0x1>
    20b4:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <copro_ticks_offset_r>
    20b8:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <copro_ticks_l+0x1>
    20bc:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <copro_ticks_l>
    20c0:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <copro_ticks_r+0x1>
    20c4:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <copro_ticks_r>
    20c8:	78 94       	sei
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	08 95       	ret

000020ce <copro_ir_stop>:
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <wait_copro>
    20d4:	f8 94       	cli
    20d6:	88 e0       	ldi	r24, 0x08	; 8
    20d8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    20dc:	78 94       	sei
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	08 95       	ret

000020e2 <copro_ir_startMeasure>:
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <wait_copro>
    20e8:	f8 94       	cli
    20ea:	87 e0       	ldi	r24, 0x07	; 7
    20ec:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <copro_commands+0x7>
    20f0:	78 94       	sei
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	08 95       	ret

000020f6 <copro_transmitRC5>:
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	d8 2f       	mov	r29, r24
    20fc:	c9 2f       	mov	r28, r25
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <wait_copro>
    2104:	f8 94       	cli
    2106:	e8 e1       	ldi	r30, 0x18	; 24
    2108:	f4 e0       	ldi	r31, 0x04	; 4
    210a:	89 e0       	ldi	r24, 0x09	; 9
    210c:	87 83       	std	Z+7, r24	; 0x07
    210e:	d0 87       	std	Z+8, r29	; 0x08
    2110:	c1 87       	std	Z+9, r28	; 0x09
    2112:	78 94       	sei
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <bot_init>:
    211c:	8f 9a       	sbi	0x11, 7	; 17
    211e:	97 98       	cbi	0x12, 7	; 18
    2120:	8a e0       	ldi	r24, 0x0A	; 10
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 8c 08 	call	0x1118	; 0x1118 <delay>
    2128:	97 9a       	sbi	0x12, 7	; 18
    212a:	84 e6       	ldi	r24, 0x64	; 100
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <delay>

00002132 <bot_update>:
    2132:	87 e0       	ldi	r24, 0x07	; 7
    2134:	0e 94 24 11 	call	0x2248	; 0x2248 <adc_read>
    2138:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <bot_supply+0x1>
    213c:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <bot_supply>
    2140:	08 95       	ret

00002142 <leds_init>:
    2142:	bf 9a       	sbi	0x17, 7	; 23
    2144:	c7 9a       	sbi	0x18, 7	; 24
    2146:	bd 9a       	sbi	0x17, 5	; 23
    2148:	be 9a       	sbi	0x17, 6	; 23
    214a:	8f ef       	ldi	r24, 0xFF	; 255
    214c:	82 b9       	out	0x02, r24	; 2
    214e:	84 bb       	out	0x14, r24	; 20
    2150:	08 95       	ret

00002152 <leds_set_status>:
    2152:	95 b3       	in	r25, 0x15	; 21
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	06 2e       	mov	r0, r22
    215a:	01 c0       	rjmp	.+2      	; 0x215e <leds_set_status+0xc>
    215c:	22 0f       	add	r18, r18
    215e:	0a 94       	dec	r0
    2160:	ea f7       	brpl	.-6      	; 0x215c <leds_set_status+0xa>
    2162:	80 ff       	sbrs	r24, 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <leds_set_status+0x18>
    2166:	29 2b       	or	r18, r25
    2168:	02 c0       	rjmp	.+4      	; 0x216e <leds_set_status+0x1c>
    216a:	20 95       	com	r18
    216c:	29 23       	and	r18, r25
    216e:	25 bb       	out	0x15, r18	; 21
    2170:	23 b1       	in	r18, 0x03	; 3
    2172:	81 ff       	sbrs	r24, 1
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <leds_set_status+0x34>
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	01 c0       	rjmp	.+2      	; 0x217e <leds_set_status+0x2c>
    217c:	88 0f       	add	r24, r24
    217e:	6a 95       	dec	r22
    2180:	ea f7       	brpl	.-6      	; 0x217c <leds_set_status+0x2a>
    2182:	82 2b       	or	r24, r18
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <leds_set_status+0x44>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	01 c0       	rjmp	.+2      	; 0x218e <leds_set_status+0x3c>
    218c:	88 0f       	add	r24, r24
    218e:	6a 95       	dec	r22
    2190:	ea f7       	brpl	.-6      	; 0x218c <leds_set_status+0x3a>
    2192:	80 95       	com	r24
    2194:	82 23       	and	r24, r18
    2196:	83 b9       	out	0x03, r24	; 3
    2198:	08 95       	ret

0000219a <leds_set_status_intensity>:
    219a:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <pwm_channel_C+0x1>
    219e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <pwm_channel_C>
    21a2:	08 95       	ret

000021a4 <leds_get_status_intensity>:
    21a4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <pwm_channel_C>
    21a8:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <pwm_channel_C+0x1>
    21ac:	08 95       	ret

000021ae <leds_set_headlights>:
    21ae:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <pwm_channel_A+0x1>
    21b2:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <pwm_channel_A>
    21b6:	08 95       	ret

000021b8 <leds_get_headlights>:
    21b8:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <pwm_channel_A>
    21bc:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <pwm_channel_A+0x1>
    21c0:	08 95       	ret

000021c2 <leds_set_displaylight>:
    21c2:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <pwm_channel_B+0x1>
    21c6:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <pwm_channel_B>
    21ca:	08 95       	ret

000021cc <leds_get_displaylight>:
    21cc:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <pwm_channel_B>
    21d0:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <pwm_channel_B+0x1>
    21d4:	08 95       	ret

000021d6 <sound_init>:
    21d6:	bc 9a       	sbi	0x17, 4	; 23
    21d8:	08 95       	ret

000021da <sound_tone>:
    21da:	61 15       	cp	r22, r1
    21dc:	71 05       	cpc	r23, r1
    21de:	09 f1       	breq	.+66     	; 0x2222 <sound_tone+0x48>
    21e0:	c4 98       	cbi	0x18, 4	; 24
    21e2:	9b 01       	movw	r18, r22
    21e4:	28 1b       	sub	r18, r24
    21e6:	39 0b       	sbc	r19, r25
    21e8:	62 17       	cp	r22, r18
    21ea:	73 07       	cpc	r23, r19
    21ec:	49 f0       	breq	.+18     	; 0x2200 <sound_tone+0x26>
    21ee:	61 50       	subi	r22, 0x01	; 1
    21f0:	71 09       	sbc	r23, r1
    21f2:	45 e3       	ldi	r20, 0x35	; 53
    21f4:	4a 95       	dec	r20
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <sound_tone+0x1a>
    21f8:	00 00       	nop
    21fa:	61 15       	cp	r22, r1
    21fc:	71 05       	cpc	r23, r1
    21fe:	a1 f7       	brne	.-24     	; 0x21e8 <sound_tone+0xe>
    2200:	c4 9a       	sbi	0x18, 4	; 24
    2202:	9b 01       	movw	r18, r22
    2204:	28 1b       	sub	r18, r24
    2206:	39 0b       	sbc	r19, r25
    2208:	61 15       	cp	r22, r1
    220a:	71 05       	cpc	r23, r1
    220c:	31 f3       	breq	.-52     	; 0x21da <sound_tone>
    220e:	62 17       	cp	r22, r18
    2210:	73 07       	cpc	r23, r19
    2212:	19 f3       	breq	.-58     	; 0x21da <sound_tone>
    2214:	61 50       	subi	r22, 0x01	; 1
    2216:	71 09       	sbc	r23, r1
    2218:	45 e3       	ldi	r20, 0x35	; 53
    221a:	4a 95       	dec	r20
    221c:	f1 f7       	brne	.-4      	; 0x221a <sound_tone+0x40>
    221e:	00 00       	nop
    2220:	f3 cf       	rjmp	.-26     	; 0x2208 <sound_tone+0x2e>
    2222:	08 95       	ret

00002224 <adc_init>:
    2224:	e1 e6       	ldi	r30, 0x61	; 97
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	90 81       	ld	r25, Z
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <adc_init+0xe>
    2230:	22 0f       	add	r18, r18
    2232:	8a 95       	dec	r24
    2234:	ea f7       	brpl	.-6      	; 0x2230 <adc_init+0xc>
    2236:	20 95       	com	r18
    2238:	92 23       	and	r25, r18
    223a:	90 83       	st	Z, r25
    223c:	e2 e6       	ldi	r30, 0x62	; 98
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	28 23       	and	r18, r24
    2244:	20 83       	st	Z, r18
    2246:	08 95       	ret

00002248 <adc_read>:
    2248:	90 e4       	ldi	r25, 0x40	; 64
    224a:	97 b9       	out	0x07, r25	; 7
    224c:	97 b1       	in	r25, 0x07	; 7
    224e:	87 70       	andi	r24, 0x07	; 7
    2250:	98 2b       	or	r25, r24
    2252:	97 b9       	out	0x07, r25	; 7
    2254:	87 ec       	ldi	r24, 0xC7	; 199
    2256:	86 b9       	out	0x06, r24	; 6
    2258:	36 9b       	sbis	0x06, 6	; 6
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <adc_read+0x18>
    225c:	00 00       	nop
    225e:	fc cf       	rjmp	.-8      	; 0x2258 <adc_read+0x10>
    2260:	24 b1       	in	r18, 0x04	; 4
    2262:	85 b1       	in	r24, 0x05	; 5
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	98 2f       	mov	r25, r24
    2268:	88 27       	eor	r24, r24
    226a:	82 0f       	add	r24, r18
    226c:	91 1d       	adc	r25, r1
    226e:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <adc_random_seed>
    2272:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <adc_random_seed+0x1>
    2276:	28 0f       	add	r18, r24
    2278:	39 1f       	adc	r19, r25
    227a:	30 93 72 04 	sts	0x0472, r19	; 0x800472 <adc_random_seed+0x1>
    227e:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <adc_random_seed>
    2282:	08 95       	ret

00002284 <adc_get_random_seed>:
    2284:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <adc_random_seed>
    2288:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <adc_random_seed+0x1>
    228c:	08 95       	ret

0000228e <__cmpsf2>:
    228e:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_cmp>
    2292:	08 f4       	brcc	.+2      	; 0x2296 <__cmpsf2+0x8>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	08 95       	ret

00002298 <__divsf3>:
    2298:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__divsf3x>
    229c:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_round>
    22a0:	0e 94 21 12 	call	0x2442	; 0x2442 <__fp_pscB>
    22a4:	58 f0       	brcs	.+22     	; 0x22bc <__divsf3+0x24>
    22a6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_pscA>
    22aa:	40 f0       	brcs	.+16     	; 0x22bc <__divsf3+0x24>
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <__divsf3+0x20>
    22ae:	5f 3f       	cpi	r21, 0xFF	; 255
    22b0:	29 f0       	breq	.+10     	; 0x22bc <__divsf3+0x24>
    22b2:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_inf>
    22b6:	51 11       	cpse	r21, r1
    22b8:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_szero>
    22bc:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_nan>

000022c0 <__divsf3x>:
    22c0:	0e 94 39 12 	call	0x2472	; 0x2472 <__fp_split3>
    22c4:	68 f3       	brcs	.-38     	; 0x22a0 <__divsf3+0x8>

000022c6 <__divsf3_pse>:
    22c6:	99 23       	and	r25, r25
    22c8:	b1 f3       	breq	.-20     	; 0x22b6 <__divsf3+0x1e>
    22ca:	55 23       	and	r21, r21
    22cc:	91 f3       	breq	.-28     	; 0x22b2 <__divsf3+0x1a>
    22ce:	95 1b       	sub	r25, r21
    22d0:	55 0b       	sbc	r21, r21
    22d2:	bb 27       	eor	r27, r27
    22d4:	aa 27       	eor	r26, r26
    22d6:	62 17       	cp	r22, r18
    22d8:	73 07       	cpc	r23, r19
    22da:	84 07       	cpc	r24, r20
    22dc:	38 f0       	brcs	.+14     	; 0x22ec <__divsf3_pse+0x26>
    22de:	9f 5f       	subi	r25, 0xFF	; 255
    22e0:	5f 4f       	sbci	r21, 0xFF	; 255
    22e2:	22 0f       	add	r18, r18
    22e4:	33 1f       	adc	r19, r19
    22e6:	44 1f       	adc	r20, r20
    22e8:	aa 1f       	adc	r26, r26
    22ea:	a9 f3       	breq	.-22     	; 0x22d6 <__divsf3_pse+0x10>
    22ec:	35 d0       	rcall	.+106    	; 0x2358 <__divsf3_pse+0x92>
    22ee:	0e 2e       	mov	r0, r30
    22f0:	3a f0       	brmi	.+14     	; 0x2300 <__divsf3_pse+0x3a>
    22f2:	e0 e8       	ldi	r30, 0x80	; 128
    22f4:	32 d0       	rcall	.+100    	; 0x235a <__divsf3_pse+0x94>
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	50 40       	sbci	r21, 0x00	; 0
    22fa:	e6 95       	lsr	r30
    22fc:	00 1c       	adc	r0, r0
    22fe:	ca f7       	brpl	.-14     	; 0x22f2 <__divsf3_pse+0x2c>
    2300:	2b d0       	rcall	.+86     	; 0x2358 <__divsf3_pse+0x92>
    2302:	fe 2f       	mov	r31, r30
    2304:	29 d0       	rcall	.+82     	; 0x2358 <__divsf3_pse+0x92>
    2306:	66 0f       	add	r22, r22
    2308:	77 1f       	adc	r23, r23
    230a:	88 1f       	adc	r24, r24
    230c:	bb 1f       	adc	r27, r27
    230e:	26 17       	cp	r18, r22
    2310:	37 07       	cpc	r19, r23
    2312:	48 07       	cpc	r20, r24
    2314:	ab 07       	cpc	r26, r27
    2316:	b0 e8       	ldi	r27, 0x80	; 128
    2318:	09 f0       	breq	.+2      	; 0x231c <__divsf3_pse+0x56>
    231a:	bb 0b       	sbc	r27, r27
    231c:	80 2d       	mov	r24, r0
    231e:	bf 01       	movw	r22, r30
    2320:	ff 27       	eor	r31, r31
    2322:	93 58       	subi	r25, 0x83	; 131
    2324:	5f 4f       	sbci	r21, 0xFF	; 255
    2326:	3a f0       	brmi	.+14     	; 0x2336 <__divsf3_pse+0x70>
    2328:	9e 3f       	cpi	r25, 0xFE	; 254
    232a:	51 05       	cpc	r21, r1
    232c:	78 f0       	brcs	.+30     	; 0x234c <__divsf3_pse+0x86>
    232e:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_inf>
    2332:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_szero>
    2336:	5f 3f       	cpi	r21, 0xFF	; 255
    2338:	e4 f3       	brlt	.-8      	; 0x2332 <__divsf3_pse+0x6c>
    233a:	98 3e       	cpi	r25, 0xE8	; 232
    233c:	d4 f3       	brlt	.-12     	; 0x2332 <__divsf3_pse+0x6c>
    233e:	86 95       	lsr	r24
    2340:	77 95       	ror	r23
    2342:	67 95       	ror	r22
    2344:	b7 95       	ror	r27
    2346:	f7 95       	ror	r31
    2348:	9f 5f       	subi	r25, 0xFF	; 255
    234a:	c9 f7       	brne	.-14     	; 0x233e <__divsf3_pse+0x78>
    234c:	88 0f       	add	r24, r24
    234e:	91 1d       	adc	r25, r1
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	97 f9       	bld	r25, 7
    2356:	08 95       	ret
    2358:	e1 e0       	ldi	r30, 0x01	; 1
    235a:	66 0f       	add	r22, r22
    235c:	77 1f       	adc	r23, r23
    235e:	88 1f       	adc	r24, r24
    2360:	bb 1f       	adc	r27, r27
    2362:	62 17       	cp	r22, r18
    2364:	73 07       	cpc	r23, r19
    2366:	84 07       	cpc	r24, r20
    2368:	ba 07       	cpc	r27, r26
    236a:	20 f0       	brcs	.+8      	; 0x2374 <__divsf3_pse+0xae>
    236c:	62 1b       	sub	r22, r18
    236e:	73 0b       	sbc	r23, r19
    2370:	84 0b       	sbc	r24, r20
    2372:	ba 0b       	sbc	r27, r26
    2374:	ee 1f       	adc	r30, r30
    2376:	88 f7       	brcc	.-30     	; 0x235a <__divsf3_pse+0x94>
    2378:	e0 95       	com	r30
    237a:	08 95       	ret

0000237c <__fixunssfsi>:
    237c:	0e 94 41 12 	call	0x2482	; 0x2482 <__fp_splitA>
    2380:	88 f0       	brcs	.+34     	; 0x23a4 <__fixunssfsi+0x28>
    2382:	9f 57       	subi	r25, 0x7F	; 127
    2384:	98 f0       	brcs	.+38     	; 0x23ac <__fixunssfsi+0x30>
    2386:	b9 2f       	mov	r27, r25
    2388:	99 27       	eor	r25, r25
    238a:	b7 51       	subi	r27, 0x17	; 23
    238c:	b0 f0       	brcs	.+44     	; 0x23ba <__fixunssfsi+0x3e>
    238e:	e1 f0       	breq	.+56     	; 0x23c8 <__fixunssfsi+0x4c>
    2390:	66 0f       	add	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	1a f0       	brmi	.+6      	; 0x23a0 <__fixunssfsi+0x24>
    239a:	ba 95       	dec	r27
    239c:	c9 f7       	brne	.-14     	; 0x2390 <__fixunssfsi+0x14>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <__fixunssfsi+0x4c>
    23a0:	b1 30       	cpi	r27, 0x01	; 1
    23a2:	91 f0       	breq	.+36     	; 0x23c8 <__fixunssfsi+0x4c>
    23a4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fp_zero>
    23a8:	b1 e0       	ldi	r27, 0x01	; 1
    23aa:	08 95       	ret
    23ac:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__fp_zero>
    23b0:	67 2f       	mov	r22, r23
    23b2:	78 2f       	mov	r23, r24
    23b4:	88 27       	eor	r24, r24
    23b6:	b8 5f       	subi	r27, 0xF8	; 248
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <__fixunssfsi+0x4c>
    23ba:	b9 3f       	cpi	r27, 0xF9	; 249
    23bc:	cc f3       	brlt	.-14     	; 0x23b0 <__fixunssfsi+0x34>
    23be:	86 95       	lsr	r24
    23c0:	77 95       	ror	r23
    23c2:	67 95       	ror	r22
    23c4:	b3 95       	inc	r27
    23c6:	d9 f7       	brne	.-10     	; 0x23be <__fixunssfsi+0x42>
    23c8:	3e f4       	brtc	.+14     	; 0x23d8 <__fixunssfsi+0x5c>
    23ca:	90 95       	com	r25
    23cc:	80 95       	com	r24
    23ce:	70 95       	com	r23
    23d0:	61 95       	neg	r22
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	8f 4f       	sbci	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	08 95       	ret

000023da <__fp_cmp>:
    23da:	99 0f       	add	r25, r25
    23dc:	00 08       	sbc	r0, r0
    23de:	55 0f       	add	r21, r21
    23e0:	aa 0b       	sbc	r26, r26
    23e2:	e0 e8       	ldi	r30, 0x80	; 128
    23e4:	fe ef       	ldi	r31, 0xFE	; 254
    23e6:	16 16       	cp	r1, r22
    23e8:	17 06       	cpc	r1, r23
    23ea:	e8 07       	cpc	r30, r24
    23ec:	f9 07       	cpc	r31, r25
    23ee:	c0 f0       	brcs	.+48     	; 0x2420 <__fp_cmp+0x46>
    23f0:	12 16       	cp	r1, r18
    23f2:	13 06       	cpc	r1, r19
    23f4:	e4 07       	cpc	r30, r20
    23f6:	f5 07       	cpc	r31, r21
    23f8:	98 f0       	brcs	.+38     	; 0x2420 <__fp_cmp+0x46>
    23fa:	62 1b       	sub	r22, r18
    23fc:	73 0b       	sbc	r23, r19
    23fe:	84 0b       	sbc	r24, r20
    2400:	95 0b       	sbc	r25, r21
    2402:	39 f4       	brne	.+14     	; 0x2412 <__fp_cmp+0x38>
    2404:	0a 26       	eor	r0, r26
    2406:	61 f0       	breq	.+24     	; 0x2420 <__fp_cmp+0x46>
    2408:	23 2b       	or	r18, r19
    240a:	24 2b       	or	r18, r20
    240c:	25 2b       	or	r18, r21
    240e:	21 f4       	brne	.+8      	; 0x2418 <__fp_cmp+0x3e>
    2410:	08 95       	ret
    2412:	0a 26       	eor	r0, r26
    2414:	09 f4       	brne	.+2      	; 0x2418 <__fp_cmp+0x3e>
    2416:	a1 40       	sbci	r26, 0x01	; 1
    2418:	a6 95       	lsr	r26
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	81 1d       	adc	r24, r1
    241e:	81 1d       	adc	r24, r1
    2420:	08 95       	ret

00002422 <__fp_inf>:
    2422:	97 f9       	bld	r25, 7
    2424:	9f 67       	ori	r25, 0x7F	; 127
    2426:	80 e8       	ldi	r24, 0x80	; 128
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	08 95       	ret

0000242e <__fp_nan>:
    242e:	9f ef       	ldi	r25, 0xFF	; 255
    2430:	80 ec       	ldi	r24, 0xC0	; 192
    2432:	08 95       	ret

00002434 <__fp_pscA>:
    2434:	00 24       	eor	r0, r0
    2436:	0a 94       	dec	r0
    2438:	16 16       	cp	r1, r22
    243a:	17 06       	cpc	r1, r23
    243c:	18 06       	cpc	r1, r24
    243e:	09 06       	cpc	r0, r25
    2440:	08 95       	ret

00002442 <__fp_pscB>:
    2442:	00 24       	eor	r0, r0
    2444:	0a 94       	dec	r0
    2446:	12 16       	cp	r1, r18
    2448:	13 06       	cpc	r1, r19
    244a:	14 06       	cpc	r1, r20
    244c:	05 06       	cpc	r0, r21
    244e:	08 95       	ret

00002450 <__fp_round>:
    2450:	09 2e       	mov	r0, r25
    2452:	03 94       	inc	r0
    2454:	00 0c       	add	r0, r0
    2456:	11 f4       	brne	.+4      	; 0x245c <__fp_round+0xc>
    2458:	88 23       	and	r24, r24
    245a:	52 f0       	brmi	.+20     	; 0x2470 <__fp_round+0x20>
    245c:	bb 0f       	add	r27, r27
    245e:	40 f4       	brcc	.+16     	; 0x2470 <__fp_round+0x20>
    2460:	bf 2b       	or	r27, r31
    2462:	11 f4       	brne	.+4      	; 0x2468 <__fp_round+0x18>
    2464:	60 ff       	sbrs	r22, 0
    2466:	04 c0       	rjmp	.+8      	; 0x2470 <__fp_round+0x20>
    2468:	6f 5f       	subi	r22, 0xFF	; 255
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	8f 4f       	sbci	r24, 0xFF	; 255
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	08 95       	ret

00002472 <__fp_split3>:
    2472:	57 fd       	sbrc	r21, 7
    2474:	90 58       	subi	r25, 0x80	; 128
    2476:	44 0f       	add	r20, r20
    2478:	55 1f       	adc	r21, r21
    247a:	59 f0       	breq	.+22     	; 0x2492 <__fp_splitA+0x10>
    247c:	5f 3f       	cpi	r21, 0xFF	; 255
    247e:	71 f0       	breq	.+28     	; 0x249c <__fp_splitA+0x1a>
    2480:	47 95       	ror	r20

00002482 <__fp_splitA>:
    2482:	88 0f       	add	r24, r24
    2484:	97 fb       	bst	r25, 7
    2486:	99 1f       	adc	r25, r25
    2488:	61 f0       	breq	.+24     	; 0x24a2 <__fp_splitA+0x20>
    248a:	9f 3f       	cpi	r25, 0xFF	; 255
    248c:	79 f0       	breq	.+30     	; 0x24ac <__fp_splitA+0x2a>
    248e:	87 95       	ror	r24
    2490:	08 95       	ret
    2492:	12 16       	cp	r1, r18
    2494:	13 06       	cpc	r1, r19
    2496:	14 06       	cpc	r1, r20
    2498:	55 1f       	adc	r21, r21
    249a:	f2 cf       	rjmp	.-28     	; 0x2480 <__fp_split3+0xe>
    249c:	46 95       	lsr	r20
    249e:	f1 df       	rcall	.-30     	; 0x2482 <__fp_splitA>
    24a0:	08 c0       	rjmp	.+16     	; 0x24b2 <__fp_splitA+0x30>
    24a2:	16 16       	cp	r1, r22
    24a4:	17 06       	cpc	r1, r23
    24a6:	18 06       	cpc	r1, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	f1 cf       	rjmp	.-30     	; 0x248e <__fp_splitA+0xc>
    24ac:	86 95       	lsr	r24
    24ae:	71 05       	cpc	r23, r1
    24b0:	61 05       	cpc	r22, r1
    24b2:	08 94       	sec
    24b4:	08 95       	ret

000024b6 <__fp_zero>:
    24b6:	e8 94       	clt

000024b8 <__fp_szero>:
    24b8:	bb 27       	eor	r27, r27
    24ba:	66 27       	eor	r22, r22
    24bc:	77 27       	eor	r23, r23
    24be:	cb 01       	movw	r24, r22
    24c0:	97 f9       	bld	r25, 7
    24c2:	08 95       	ret

000024c4 <__gesf2>:
    24c4:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_cmp>
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <__gesf2+0x8>
    24ca:	8f ef       	ldi	r24, 0xFF	; 255
    24cc:	08 95       	ret

000024ce <__mulsf3>:
    24ce:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__mulsf3x>
    24d2:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__fp_round>
    24d6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__fp_pscA>
    24da:	38 f0       	brcs	.+14     	; 0x24ea <__mulsf3+0x1c>
    24dc:	0e 94 21 12 	call	0x2442	; 0x2442 <__fp_pscB>
    24e0:	20 f0       	brcs	.+8      	; 0x24ea <__mulsf3+0x1c>
    24e2:	95 23       	and	r25, r21
    24e4:	11 f0       	breq	.+4      	; 0x24ea <__mulsf3+0x1c>
    24e6:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_inf>
    24ea:	0c 94 17 12 	jmp	0x242e	; 0x242e <__fp_nan>
    24ee:	11 24       	eor	r1, r1
    24f0:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_szero>

000024f4 <__mulsf3x>:
    24f4:	0e 94 39 12 	call	0x2472	; 0x2472 <__fp_split3>
    24f8:	70 f3       	brcs	.-36     	; 0x24d6 <__mulsf3+0x8>

000024fa <__mulsf3_pse>:
    24fa:	95 9f       	mul	r25, r21
    24fc:	c1 f3       	breq	.-16     	; 0x24ee <__mulsf3+0x20>
    24fe:	95 0f       	add	r25, r21
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	55 1f       	adc	r21, r21
    2504:	62 9f       	mul	r22, r18
    2506:	f0 01       	movw	r30, r0
    2508:	72 9f       	mul	r23, r18
    250a:	bb 27       	eor	r27, r27
    250c:	f0 0d       	add	r31, r0
    250e:	b1 1d       	adc	r27, r1
    2510:	63 9f       	mul	r22, r19
    2512:	aa 27       	eor	r26, r26
    2514:	f0 0d       	add	r31, r0
    2516:	b1 1d       	adc	r27, r1
    2518:	aa 1f       	adc	r26, r26
    251a:	64 9f       	mul	r22, r20
    251c:	66 27       	eor	r22, r22
    251e:	b0 0d       	add	r27, r0
    2520:	a1 1d       	adc	r26, r1
    2522:	66 1f       	adc	r22, r22
    2524:	82 9f       	mul	r24, r18
    2526:	22 27       	eor	r18, r18
    2528:	b0 0d       	add	r27, r0
    252a:	a1 1d       	adc	r26, r1
    252c:	62 1f       	adc	r22, r18
    252e:	73 9f       	mul	r23, r19
    2530:	b0 0d       	add	r27, r0
    2532:	a1 1d       	adc	r26, r1
    2534:	62 1f       	adc	r22, r18
    2536:	83 9f       	mul	r24, r19
    2538:	a0 0d       	add	r26, r0
    253a:	61 1d       	adc	r22, r1
    253c:	22 1f       	adc	r18, r18
    253e:	74 9f       	mul	r23, r20
    2540:	33 27       	eor	r19, r19
    2542:	a0 0d       	add	r26, r0
    2544:	61 1d       	adc	r22, r1
    2546:	23 1f       	adc	r18, r19
    2548:	84 9f       	mul	r24, r20
    254a:	60 0d       	add	r22, r0
    254c:	21 1d       	adc	r18, r1
    254e:	82 2f       	mov	r24, r18
    2550:	76 2f       	mov	r23, r22
    2552:	6a 2f       	mov	r22, r26
    2554:	11 24       	eor	r1, r1
    2556:	9f 57       	subi	r25, 0x7F	; 127
    2558:	50 40       	sbci	r21, 0x00	; 0
    255a:	9a f0       	brmi	.+38     	; 0x2582 <__mulsf3_pse+0x88>
    255c:	f1 f0       	breq	.+60     	; 0x259a <__mulsf3_pse+0xa0>
    255e:	88 23       	and	r24, r24
    2560:	4a f0       	brmi	.+18     	; 0x2574 <__mulsf3_pse+0x7a>
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	bb 1f       	adc	r27, r27
    2568:	66 1f       	adc	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	91 50       	subi	r25, 0x01	; 1
    2570:	50 40       	sbci	r21, 0x00	; 0
    2572:	a9 f7       	brne	.-22     	; 0x255e <__mulsf3_pse+0x64>
    2574:	9e 3f       	cpi	r25, 0xFE	; 254
    2576:	51 05       	cpc	r21, r1
    2578:	80 f0       	brcs	.+32     	; 0x259a <__mulsf3_pse+0xa0>
    257a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__fp_inf>
    257e:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_szero>
    2582:	5f 3f       	cpi	r21, 0xFF	; 255
    2584:	e4 f3       	brlt	.-8      	; 0x257e <__mulsf3_pse+0x84>
    2586:	98 3e       	cpi	r25, 0xE8	; 232
    2588:	d4 f3       	brlt	.-12     	; 0x257e <__mulsf3_pse+0x84>
    258a:	86 95       	lsr	r24
    258c:	77 95       	ror	r23
    258e:	67 95       	ror	r22
    2590:	b7 95       	ror	r27
    2592:	f7 95       	ror	r31
    2594:	e7 95       	ror	r30
    2596:	9f 5f       	subi	r25, 0xFF	; 255
    2598:	c1 f7       	brne	.-16     	; 0x258a <__mulsf3_pse+0x90>
    259a:	fe 2b       	or	r31, r30
    259c:	88 0f       	add	r24, r24
    259e:	91 1d       	adc	r25, r1
    25a0:	96 95       	lsr	r25
    25a2:	87 95       	ror	r24
    25a4:	97 f9       	bld	r25, 7
    25a6:	08 95       	ret

000025a8 <__divmodsi4>:
    25a8:	05 2e       	mov	r0, r21
    25aa:	97 fb       	bst	r25, 7
    25ac:	1e f4       	brtc	.+6      	; 0x25b4 <__divmodsi4+0xc>
    25ae:	00 94       	com	r0
    25b0:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__negsi2>
    25b4:	57 fd       	sbrc	r21, 7
    25b6:	07 d0       	rcall	.+14     	; 0x25c6 <__divmodsi4_neg2>
    25b8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__udivmodsi4>
    25bc:	07 fc       	sbrc	r0, 7
    25be:	03 d0       	rcall	.+6      	; 0x25c6 <__divmodsi4_neg2>
    25c0:	4e f4       	brtc	.+18     	; 0x25d4 <__divmodsi4_exit>
    25c2:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__negsi2>

000025c6 <__divmodsi4_neg2>:
    25c6:	50 95       	com	r21
    25c8:	40 95       	com	r20
    25ca:	30 95       	com	r19
    25cc:	21 95       	neg	r18
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	4f 4f       	sbci	r20, 0xFF	; 255
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255

000025d4 <__divmodsi4_exit>:
    25d4:	08 95       	ret

000025d6 <__negsi2>:
    25d6:	90 95       	com	r25
    25d8:	80 95       	com	r24
    25da:	70 95       	com	r23
    25dc:	61 95       	neg	r22
    25de:	7f 4f       	sbci	r23, 0xFF	; 255
    25e0:	8f 4f       	sbci	r24, 0xFF	; 255
    25e2:	9f 4f       	sbci	r25, 0xFF	; 255
    25e4:	08 95       	ret

000025e6 <__udivmodsi4>:
    25e6:	a1 e2       	ldi	r26, 0x21	; 33
    25e8:	1a 2e       	mov	r1, r26
    25ea:	aa 1b       	sub	r26, r26
    25ec:	bb 1b       	sub	r27, r27
    25ee:	fd 01       	movw	r30, r26
    25f0:	0d c0       	rjmp	.+26     	; 0x260c <__udivmodsi4_ep>

000025f2 <__udivmodsi4_loop>:
    25f2:	aa 1f       	adc	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	ee 1f       	adc	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	a2 17       	cp	r26, r18
    25fc:	b3 07       	cpc	r27, r19
    25fe:	e4 07       	cpc	r30, r20
    2600:	f5 07       	cpc	r31, r21
    2602:	20 f0       	brcs	.+8      	; 0x260c <__udivmodsi4_ep>
    2604:	a2 1b       	sub	r26, r18
    2606:	b3 0b       	sbc	r27, r19
    2608:	e4 0b       	sbc	r30, r20
    260a:	f5 0b       	sbc	r31, r21

0000260c <__udivmodsi4_ep>:
    260c:	66 1f       	adc	r22, r22
    260e:	77 1f       	adc	r23, r23
    2610:	88 1f       	adc	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	1a 94       	dec	r1
    2616:	69 f7       	brne	.-38     	; 0x25f2 <__udivmodsi4_loop>
    2618:	60 95       	com	r22
    261a:	70 95       	com	r23
    261c:	80 95       	com	r24
    261e:	90 95       	com	r25
    2620:	9b 01       	movw	r18, r22
    2622:	ac 01       	movw	r20, r24
    2624:	bd 01       	movw	r22, r26
    2626:	cf 01       	movw	r24, r30
    2628:	08 95       	ret

0000262a <do_rand>:
    262a:	8f 92       	push	r8
    262c:	9f 92       	push	r9
    262e:	af 92       	push	r10
    2630:	bf 92       	push	r11
    2632:	cf 92       	push	r12
    2634:	df 92       	push	r13
    2636:	ef 92       	push	r14
    2638:	ff 92       	push	r15
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	ec 01       	movw	r28, r24
    2640:	68 81       	ld	r22, Y
    2642:	79 81       	ldd	r23, Y+1	; 0x01
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	9b 81       	ldd	r25, Y+3	; 0x03
    2648:	61 15       	cp	r22, r1
    264a:	71 05       	cpc	r23, r1
    264c:	81 05       	cpc	r24, r1
    264e:	91 05       	cpc	r25, r1
    2650:	21 f4       	brne	.+8      	; 0x265a <do_rand+0x30>
    2652:	64 e2       	ldi	r22, 0x24	; 36
    2654:	79 ed       	ldi	r23, 0xD9	; 217
    2656:	8b e5       	ldi	r24, 0x5B	; 91
    2658:	97 e0       	ldi	r25, 0x07	; 7
    265a:	2d e1       	ldi	r18, 0x1D	; 29
    265c:	33 ef       	ldi	r19, 0xF3	; 243
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__divmodsi4>
    2666:	49 01       	movw	r8, r18
    2668:	5a 01       	movw	r10, r20
    266a:	9b 01       	movw	r18, r22
    266c:	ac 01       	movw	r20, r24
    266e:	a7 ea       	ldi	r26, 0xA7	; 167
    2670:	b1 e4       	ldi	r27, 0x41	; 65
    2672:	0e 94 6f 13 	call	0x26de	; 0x26de <__muluhisi3>
    2676:	6b 01       	movw	r12, r22
    2678:	7c 01       	movw	r14, r24
    267a:	ac ee       	ldi	r26, 0xEC	; 236
    267c:	b4 ef       	ldi	r27, 0xF4	; 244
    267e:	a5 01       	movw	r20, r10
    2680:	94 01       	movw	r18, r8
    2682:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__mulohisi3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8c 0d       	add	r24, r12
    268c:	9d 1d       	adc	r25, r13
    268e:	ae 1d       	adc	r26, r14
    2690:	bf 1d       	adc	r27, r15
    2692:	b7 ff       	sbrs	r27, 7
    2694:	03 c0       	rjmp	.+6      	; 0x269c <do_rand+0x72>
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	a1 09       	sbc	r26, r1
    269a:	b0 48       	sbci	r27, 0x80	; 128
    269c:	88 83       	st	Y, r24
    269e:	99 83       	std	Y+1, r25	; 0x01
    26a0:	aa 83       	std	Y+2, r26	; 0x02
    26a2:	bb 83       	std	Y+3, r27	; 0x03
    26a4:	9f 77       	andi	r25, 0x7F	; 127
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	ff 90       	pop	r15
    26ac:	ef 90       	pop	r14
    26ae:	df 90       	pop	r13
    26b0:	cf 90       	pop	r12
    26b2:	bf 90       	pop	r11
    26b4:	af 90       	pop	r10
    26b6:	9f 90       	pop	r9
    26b8:	8f 90       	pop	r8
    26ba:	08 95       	ret

000026bc <rand_r>:
    26bc:	0c 94 15 13 	jmp	0x262a	; 0x262a <do_rand>

000026c0 <rand>:
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	91 e0       	ldi	r25, 0x01	; 1
    26c4:	0c 94 15 13 	jmp	0x262a	; 0x262a <do_rand>

000026c8 <srand>:
    26c8:	a0 e0       	ldi	r26, 0x00	; 0
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    26d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    26d4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    26d8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    26dc:	08 95       	ret

000026de <__muluhisi3>:
    26de:	0e 94 82 13 	call	0x2704	; 0x2704 <__umulhisi3>
    26e2:	a5 9f       	mul	r26, r21
    26e4:	90 0d       	add	r25, r0
    26e6:	b4 9f       	mul	r27, r20
    26e8:	90 0d       	add	r25, r0
    26ea:	a4 9f       	mul	r26, r20
    26ec:	80 0d       	add	r24, r0
    26ee:	91 1d       	adc	r25, r1
    26f0:	11 24       	eor	r1, r1
    26f2:	08 95       	ret

000026f4 <__mulshisi3>:
    26f4:	b7 ff       	sbrs	r27, 7
    26f6:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__muluhisi3>

000026fa <__mulohisi3>:
    26fa:	0e 94 6f 13 	call	0x26de	; 0x26de <__muluhisi3>
    26fe:	82 1b       	sub	r24, r18
    2700:	93 0b       	sbc	r25, r19
    2702:	08 95       	ret

00002704 <__umulhisi3>:
    2704:	a2 9f       	mul	r26, r18
    2706:	b0 01       	movw	r22, r0
    2708:	b3 9f       	mul	r27, r19
    270a:	c0 01       	movw	r24, r0
    270c:	a3 9f       	mul	r26, r19
    270e:	70 0d       	add	r23, r0
    2710:	81 1d       	adc	r24, r1
    2712:	11 24       	eor	r1, r1
    2714:	91 1d       	adc	r25, r1
    2716:	b2 9f       	mul	r27, r18
    2718:	70 0d       	add	r23, r0
    271a:	81 1d       	adc	r24, r1
    271c:	11 24       	eor	r1, r1
    271e:	91 1d       	adc	r25, r1
    2720:	08 95       	ret

00002722 <_exit>:
    2722:	f8 94       	cli

00002724 <__stop_program>:
    2724:	ff cf       	rjmp	.-2      	; 0x2724 <__stop_program>
